/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugins.problems.view
 *  Class:      ProblemsView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/actionScripts/plugins/problems/view/ProblemsView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:58 MSK
 */

package actionScripts.plugins.problems.view;

import mx.collections.ArrayCollection;
import actionScripts.ui.tabview.TabViewTab;
import actionScripts.valueObjects.Diagnostic;
import mx.controls.dataGridClasses.DataGridColumn;
import actionScripts.valueObjects.Range;
import actionScripts.valueObjects.Position;
import actionScripts.factory.FileLocation;

import haxe.Constraints.Function;
import actionScripts.interfaces.IViewWithTitle;
import components.renderers.CopyContentDataGridItemRenderer;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.VBox;
import mx.controls.DataGrid;

import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;
import mx.styles.*;

class ProblemsView extends mx.containers.VBox implements actionScripts.interfaces.IViewWithTitle implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _ProblemsView_DataGridColumn1:mx.controls.dataGridClasses.DataGridColumn;

	/**
	 * @private
	 **/
	public var _ProblemsView_DataGridColumn2:mx.controls.dataGridClasses.DataGridColumn;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var problemsTree:mx.controls.DataGrid;

	private var _documentDescriptor_:mx.core.UIComponentDescriptor;

	/**
	 * @private
	 **/
	public function new() {
		this._documentDescriptor_ =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.VBox,
					'propertiesFactory': function():Dynamic {
						return {
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': mx.controls.DataGrid,
								'id': 'problemsTree',
								'stylesFactory': function():Void {
									this.color = 14737632;
									this.contentBackgroundColor = 0;
									this.textRollOverColor = 16777215;
									this.rollOverColor = 3750201;
									this.selectionColor = 3750201;
									this.alternatingItemColors = [4473924, 5065804];
									this.textSelectedColor = 14737632;
									this.borderVisible = false;
									this.useRollOver = true;
									this.headerStyleName = 'problemsHeaderStyle';
									this.chromeColor = 3750201;
								},
								'propertiesFactory': function():Dynamic {
									return {
										'percentWidth': 100.0,
										'percentHeight': 100.0,
										'draggableColumns': false,
										'sortableColumns': false,
										'columns': [this._ProblemsView_DataGridColumn1_i(), this._ProblemsView_DataGridColumn2_i()]
									};
								}
							})
				]
						};
					}
				});
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _ProblemsView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugins_problems_view_ProblemsViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(ProblemsView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.verticalScrollPolicy = 'off';

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 4473924;
					this.verticalGap = 0;
				};
		// ambient styles
		// mx_internal::_ProblemsView_StylesInit();

		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	@:meta(Bindable())
	public var objectTree:ArrayCollection = new ArrayCollection();

	public var title(get, never):String;
	private function get_title():String {
		return 'Problems';
	}

	private function getMessageLabel(diagnostic:Diagnostic, column:DataGridColumn):String {
		var label:String = Std.string(diagnostic.message);
		if (AS3.as(diagnostic.code, Bool)) {
			label += ' (' + diagnostic.code + ')';
		}
		return label;
	}

	private function getLocationLabel(diagnostic:Diagnostic, column:DataGridColumn):String {
		var label:String = Std.string(new FileLocation(diagnostic.path).name);
		var range:Range = diagnostic.range;
		var start:Position = range.start;
		if (start != null) {
			label += ' (' + (start.line + 1) + ', ' + (start.character + 1) + ')';
		}
		return label;
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _ProblemsView_DataGridColumn1_i():mx.controls.dataGridClasses.DataGridColumn {
		var temp:mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
		temp.headerText = 'Problem';
		temp.dataField = 'message';
		temp.itemRenderer = _ProblemsView_ClassFactory1_c();
		_ProblemsView_DataGridColumn1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ProblemsView_DataGridColumn1', _ProblemsView_DataGridColumn1);
		return temp;
	}

	private function _ProblemsView_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.renderers.CopyContentDataGridItemRenderer;
		return temp;
	}

	private function _ProblemsView_DataGridColumn2_i():mx.controls.dataGridClasses.DataGridColumn {
		var temp:mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
		temp.headerText = 'Location';
		temp.dataField = 'path';
		temp.itemRenderer = _ProblemsView_ClassFactory2_c();
		_ProblemsView_DataGridColumn2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ProblemsView_DataGridColumn2', _ProblemsView_DataGridColumn2);
		return temp;
	}

	private function _ProblemsView_ClassFactory2_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.renderers.CopyContentDataGridItemRenderer;
		return temp;
	}

	//  binding mgmt
	private function _ProblemsView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'problemsTree.dataProvider', 'objectTree');

		result[1] = new mx.binding.Binding(this,
				function():Function {
					return (getMessageLabel);
				},
				null,
				'_ProblemsView_DataGridColumn1.labelFunction');

		result[2] = new mx.binding.Binding(this,
				function():Function {
					return (getLocationLabel);
				},
				null,
				'_ProblemsView_DataGridColumn2.labelFunction');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(ProblemsView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	@:ns('mx_internal') private var _ProblemsView_StylesInit_done:Bool = false;

	@:ns('mx_internal') private function _ProblemsView_StylesInit():Void {
		//  only add our style defs to the style manager once
		if ( //  mx_internal::_ProblemsView_StylesInit_done) {
			return;
		} else {
			// mx_internal::_ProblemsView_StylesInit_done = true;
		}

		var style:CSSStyleDeclaration;
		var effects:Array<Dynamic>;

		var conditions:Array<Dynamic>;
		var condition:CSSCondition;
		var selector:CSSSelector;
		selector = null;
		conditions = null;
		conditions = [];
		condition = new CSSCondition('class', 'problemsHeaderStyle');
		conditions.push(condition);
		selector = new CSSSelector('', conditions, selector);
		// .problemsHeaderStyle
		style = styleManager.getStyleDeclaration('.problemsHeaderStyle');
		if (style == null) {
			style = new CSSStyleDeclaration(selector, styleManager);
		}

		if (style.factory == null) {
			style.factory = function():Void {
						this.color = 0xe0e0e0;
						this.fontWeight = 'bold';
					};
		}

	}

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}