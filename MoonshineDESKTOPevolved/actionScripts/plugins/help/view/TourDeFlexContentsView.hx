/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugins.help.view
 *  Class:      TourDeFlexContentsView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/actionScripts/plugins/help/view/TourDeFlexContentsView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:14:00 MSK
 */

package actionScripts.plugins.help.view;

import mx.events.FlexEvent;
import mx.events.ListEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.OpenFileEvent;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.plugins.ui.editor.TourDeTreeItemRenderer;
import actionScripts.ui.LayoutModifier;
import actionScripts.ui.tabview.TabViewTab;

import haxe.Constraints.Function;
import actionScripts.plugins.fdb.view.DebugViewHeader;
import actionScripts.ui.IPanelWindow;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.VBox;
import mx.controls.Tree;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;

import mx.styles.*;

class TourDeFlexContentsView extends mx.containers.VBox implements actionScripts.ui.IPanelWindow implements mx.binding.IBindingClient {

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var compLibTree:mx.controls.Tree;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var header:actionScripts.plugins.fdb.view.DebugViewHeader;

	private var _documentDescriptor_:mx.core.UIComponentDescriptor;

	/**
	 * @private
	 **/
	public function new() {
		this._documentDescriptor_ =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.VBox,
					'propertiesFactory': function():Dynamic {
						return {
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': actionScripts.plugins.fdb.view.DebugViewHeader,
								'id': 'header',
								'events': {
									'creationComplete': '__header_creationComplete'
								},
								'propertiesFactory': function():Dynamic {
									return {
										'label': 'Tour De Flex',
										'percentWidth': 100.0
									};
								}
							}),
							new mx.core.UIComponentDescriptor({
								'type': mx.controls.Tree,
								'id': 'compLibTree',
								'events': {
									'itemClick': '__compLibTree_itemClick'
								},
								'stylesFactory': function():Void {
									this.color = 15658734;
									this.contentBackgroundColor = 0;
									this.rollOverColor = 3750201;
									this.selectionColor = 3750201;
									this.alternatingItemColors = [4473924, 5065804];
									this.verticalScrollBarStyleName = 'black';
									this.borderVisible = false;
									this.useRollOver = true;
									this.borderStyle = 'none';
								},
								'propertiesFactory': function():Dynamic {
									return {
										'rowHeight': 18,
										'doubleClickEnabled': true,
										'percentWidth': 100.0,
										'percentHeight': 100.0,
										'showRoot': false,
										'labelField': '@label'
									};
								}
							})
				]
						};
					}
				});
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _TourDeFlexContentsView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugins_help_view_TourDeFlexContentsViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(TourDeFlexContentsView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		// events
		this.addEventListener('initialize', ___TourDeFlexContentsView_VBox1_initialize);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 4473924;
					this.verticalGap = 0;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	@:meta(Bindable())private var noExamples:Int = 0;
	@:meta(Bindable())private var explorerTree:FastXML;

	private var stream:FileStream;

	private var thirdPatyWarningText:String = '<!--\n\nThis example or component has been developed by a 3rd party and is hosted outside of the Tour De Flex site and may contain links to non ASF sites.\nIt\'s code may not be Open Source or may be under a license other than the Apache license so please check carefully before using it.\nNeither the ASF or the Apache Flex PMC can endorse or recommend using this example but you may still find it useful.\n\n-->';

	public function refresh():Void {
		compLibTree.invalidateList();
	}

	private function getIconForObject(object:Dynamic):Class<Dynamic> {
		return null;
	}

	private function initHeader():Void {
		header.addEventListener(TabViewTab.EVENT_TAB_CLOSE, handleClose);
	}

	private function handleClose(event:Event):Void {
		if (stage != null) {
			LayoutModifier.removeFromSidebar(this);
		}
	}

	private function onInitialized(event:FlexEvent):Void {
		compLibTree.itemRenderer = new ClassFactory(TourDeTreeItemRenderer);

		var tmpFile:File = File.applicationDirectory.resolvePath('tourDeFlex/explorer.xml');
		if (AS3.as(tmpFile.exists, Bool)) {
			stream = new FileStream();
			stream.addEventListener(Event.COMPLETE, onExplorerLoaded, false, 0, true);
			stream.openAsync(tmpFile, FileMode.READ);
		}
	}

	private function onExplorerLoaded(event:Event):Void {
		stream.removeEventListener(Event.COMPLETE, onExplorerLoaded);

		var data:FastXML = FastXML.parse(stream.readUTFBytes(stream.bytesAvailable));
		data.node.normalize();
		explorerTree = FastXML.parse(data.node);

		noExamples = AS3.int((FastXML.filterNodes(explorerTree.descendants('node'), function(x:FastXML) {
									if(x.has.app && Std.parseFloat(Std.string(x.att.app.length())) > 0)
										return true;
									return false;

								})).length());

		var tmpFile:File = File.applicationDirectory.resolvePath('tourDeFlex/3rdparty.xml');
		if (AS3.as(tmpFile.exists, Bool)) {
			stream = new FileStream();
			stream.addEventListener(Event.COMPLETE, load3rdParty, false, 0, true);
			stream.openAsync(tmpFile, FileMode.READ);
		}
	}

	private function load3rdParty(event:Event):Void {
		stream.removeEventListener(Event.COMPLETE, onExplorerLoaded);

		var newNode:FastXML = FastXML.parse(stream.readUTFBytes(stream.bytesAvailable));
		newNode.node.normalize();

		for (i in as3hx.Compat.each(newNode.descendants('node'))) {
			if (i.att.thirdParty != null) {
				var definedName:String = Std.string(i.att.label).split(' ').join('');
				i.setAttribute("app", definedName + '_ThirdParty.txt');
			}
		}

		if (newNode.descendants('node').length() > 0) {
			explorerTree.node.appendChild(newNode.node);
			compLibTree.dataProvider = explorerTree;
			noExamples += AS3.int((FastXML.filterNodes(newNode.descendants('node'), function(x:FastXML) {
								if(x.has.app && Std.parseFloat(Std.string(x.att.app.length())) > 0)
									return true;
								return false;

							})).length());
		}
	}

	private function loadApp(application:String, source:String, thirdParty:Bool, link:String = ''):Void {
		var swfLink:String = '';
		var tmpFile:File;

		if (application.indexOf('.swf') > 0) {
			swfLink = application;
		} else if (application.indexOf('.jpg') > 0 || application.indexOf('.png') > 0) {
			//swfLoader.loadApp(application,link);
			swfLink = application;
		} else {
			swfLink = application + '.swf';
		}

		if (thirdParty) {
			// Since we can't use same 'opened' file to open in multiple tabs.
			// we need some extra works here
			tmpFile = File.applicationStorageDirectory.resolvePath(application);
			if (!AS3.as(tmpFile.exists, Bool)) {
				var fs:FileStream = new FileStream();
				fs.open(tmpFile, FileMode.WRITE);
				fs.writeUTFBytes(thirdPatyWarningText);
				fs.close();
			}
			if (AS3.as(tmpFile.exists, Bool)) {
				GlobalEventDispatcher.getInstance().dispatchEvent(
						new OpenFileEvent(OpenFileEvent.OPEN_FILE, [new FileLocation(tmpFile.nativePath)], -1, null, true, link)
			);
			}
		} else {
			tmpFile = File.applicationDirectory.resolvePath('tourDeFlex/' + application + '.mxml');
			if (AS3.as(tmpFile.exists, Bool)) {
				GlobalEventDispatcher.getInstance().dispatchEvent(
						new OpenFileEvent(OpenFileEvent.OPEN_FILE, [new FileLocation(tmpFile.nativePath)], -1, null, true, 'http://flex.apache.org/tourdeflex/' + swfLink)
			);
			}
			//vs.loadSource(application, source);
		}
	}

	private function getIconForFile(object:Dynamic):Class<Dynamic> {
		return null;
	}

	private function onTreeChanged(event:ListEvent):Void {
		var nodeApp:String = Std.string(compLibTree.selectedItem.att.app);
		var link:String = (AS3.as(AS3.hasOwnProperty(compLibTree.selectedItem, '@link'), Bool)) ? Std.string(compLibTree.selectedItem.att.link) : '';
		var thirdParty:Bool = AS3.as(AS3.hasOwnProperty(compLibTree.selectedItem, '@thirdParty'), Bool)
		&& compLibTree.selectedItem.att.thirdParty == 'true';

		if (nodeApp != null && nodeApp != '') {
			loadApp(nodeApp, Std.string(compLibTree.selectedItem.att.src), thirdParty, link);
		} else {
			compLibTree.expandItem(compLibTree.selectedItem, true, true);
		}
	}

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___TourDeFlexContentsView_VBox1_initialize(event:mx.events.FlexEvent):Void {
		onInitialized(event);
	}

	/**
	 * @private
	 **/
	public function __header_creationComplete(event:mx.events.FlexEvent):Void {
		initHeader();
	}

	/**
	 * @private
	 **/
	public function __compLibTree_itemClick(event:mx.events.ListEvent):Void {
		onTreeChanged(event);
	}

	//  binding mgmt
	private function _TourDeFlexContentsView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Dynamic {
					return (explorerTree);
				},
				null,
				'compLibTree.dataProvider');

		result[1] = new mx.binding.Binding(this,
				function():Function {
					return (getIconForFile);
				},
				null,
				'compLibTree.iconFunction');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(TourDeFlexContentsView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}