/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugins.help.view
 *  Class:      AboutScreen
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/actionScripts/plugins/help/view/AboutScreen.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:14:00 MSK
 */

package actionScripts.plugins.help.view;

import mx.core.FlexGlobals;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.managers.PopUpManager;
import actionScripts.locator.IDEModel;
import actionScripts.locator.IDEWorker;
import actionScripts.plugin.help.HelpPlugin;
import actionScripts.valueObjects.ConstantsCoreVO;
import components.popup.InfoBackgroundPopup;

import actionScripts.ui.IContentWindow;
import components.popup.SoftwareInformation;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.HRule;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.BorderContainer;
import spark.components.BusyIndicator;
import spark.components.HGroup;
import spark.components.Image;
import spark.components.Label;
import spark.components.VGroup;

class AboutScreen extends spark.components.BorderContainer implements actionScripts.ui.IContentWindow implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _AboutScreen_Label1:spark.components.Label;

	/**
	 * @private
	 **/
	public var _AboutScreen_Label4:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var busy:spark.components.BusyIndicator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var hgTitle:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var version:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var vgBody:spark.components.VGroup;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _AboutScreen_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugins_help_view_AboutScreenWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(AboutScreen, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_AboutScreen_Array1_c);

		// events
		this.addEventListener('creationComplete', ___AboutScreen_BorderContainer1_creationComplete);
		this.addEventListener('remove', ___AboutScreen_BorderContainer1_remove);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16777215;
					this.fontFamily = 'DejaVuSans';
					this.color = 6842472;
					this.fontSize = 14;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	private var infoBackground:InfoBackgroundPopup;

	public var longLabel(get, never):String;
	private function get_longLabel():String {
		return 'About Moonshine';
	}

	public var label(get, never):String;
	private function get_label():String {
		return 'About Moonshine';
	}

	public function isChanged():Bool {
		return false;
	}

	public function isEmpty():Bool {
		return false;
	}

	public function save():Void {}

	private function onAboutScreenCreationComplete(event:FlexEvent):Void {
		version.text = IDEModel.getInstance().getVersionWithBuildNumber();
	}

	private function onInfoBackground(event:MouseEvent):Void {
		if (infoBackground == null) {
			infoBackground = AS3.as(PopUpManager.createPopUp(AS3.as(FlexGlobals.topLevelApplication, DisplayObject), InfoBackgroundPopup, true), InfoBackgroundPopup);
			infoBackground.addEventListener(CloseEvent.CLOSE, handleInfoBackgroundPopupClose);
			infoBackground.height = screen.height - 100;

			PopUpManager.centerPopUp(infoBackground);
		} else {
			infoBackground.setFocus();
		}
	}

	private function handleInfoBackgroundPopupClose(event:CloseEvent):Void {
		infoBackground.removeEventListener(CloseEvent.CLOSE, handleInfoBackgroundPopupClose);
		infoBackground = null;
	}

	private function onSoftwareInformationRetreived(event:Event):Void {
		hgTitle.removeElement(busy);
	}

	private function onTabRemoved(event:Event):Void {
		IDEWorker.getInstance().unSubscribeComponent(HelpPlugin.ABOUT_SUBSCRIBE_ID_TO_WORKER);
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _AboutScreen_Array1_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_AboutScreen_VGroup1_i(), _AboutScreen_VGroup3_c()];
		return cast temp;
	}

	private function _AboutScreen_VGroup1_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 80.0;
		temp.percentHeight = 80.0;
		temp.paddingLeft = 12;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.paddingBottom = 3;
		temp.horizontalCenter = 0;
		temp.verticalCenter = -12;
		temp.mxmlContent = [_AboutScreen_HGroup1_i(), _AboutScreen_HRule1_c(), _AboutScreen_SoftwareInformation1_c()];
		temp.id = 'vgBody';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		vgBody = temp;
		mx.binding.BindingManager.executeBindings(this, 'vgBody', vgBody);
		return temp;
	}

	private function _AboutScreen_HGroup1_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_AboutScreen_Image1_c(), _AboutScreen_VGroup2_c(), _AboutScreen_Spacer1_c(), _AboutScreen_BusyIndicator1_i()];
		temp.id = 'hgTitle';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		hgTitle = temp;
		mx.binding.BindingManager.executeBindings(this, 'hgTitle', hgTitle);
		return temp;
	}

	private function _AboutScreen_Image1_c():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = '/elements/moonshine_logo/logo_48.png';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AboutScreen_VGroup2_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.autoLayout = true;
		temp.mxmlContent = [_AboutScreen_Label1_i(), _AboutScreen_Label2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AboutScreen_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.setStyle('color', 9054762);
		temp.setStyle('paddingLeft', 8);
		temp.id = '_AboutScreen_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_AboutScreen_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_AboutScreen_Label1', _AboutScreen_Label1);
		return temp;
	}

	private function _AboutScreen_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.setStyle('paddingLeft', 8);
		temp.id = 'version';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		version = temp;
		mx.binding.BindingManager.executeBindings(this, 'version', version);
		return temp;
	}

	private function _AboutScreen_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AboutScreen_BusyIndicator1_i():spark.components.BusyIndicator {
		var temp:spark.components.BusyIndicator = new spark.components.BusyIndicator();
		temp.id = 'busy';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		busy = temp;
		mx.binding.BindingManager.executeBindings(this, 'busy', busy);
		return temp;
	}

	private function _AboutScreen_HRule1_c():mx.controls.HRule {
		var temp:mx.controls.HRule = new mx.controls.HRule();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AboutScreen_SoftwareInformation1_c():components.popup.SoftwareInformation {
		var temp:components.popup.SoftwareInformation = new components.popup.SoftwareInformation();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.paddingTop = 10;
		temp.addEventListener('complete', ___AboutScreen_SoftwareInformation1_complete);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___AboutScreen_SoftwareInformation1_complete(event:flash.events.Event):Void {
		onSoftwareInformationRetreived(event);
	}

	private function _AboutScreen_VGroup3_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 20.0;
		temp.verticalAlign = 'bottom';
		temp.horizontalAlign = 'center';
		temp.bottom = 0;
		temp.paddingBottom = 10;
		temp.mxmlContent = [_AboutScreen_Label3_c(), _AboutScreen_Label4_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AboutScreen_Label3_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'About the background image';
		temp.buttonMode = true;
		temp.setStyle('textDecoration', 'underline');
		temp.setStyle('fontSize', 12);
		temp.setStyle('color', 9054762);
		temp.setStyle('paddingTop', 20);
		temp.addEventListener('click', ___AboutScreen_Label3_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___AboutScreen_Label3_click(event:flash.events.MouseEvent):Void {
		onInfoBackground(event);
	}

	private function _AboutScreen_Label4_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.setStyle('fontSize', 12);
		temp.id = '_AboutScreen_Label4';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_AboutScreen_Label4 = temp;
		mx.binding.BindingManager.executeBindings(this, '_AboutScreen_Label4', _AboutScreen_Label4);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___AboutScreen_BorderContainer1_creationComplete(event:mx.events.FlexEvent):Void {
		onAboutScreenCreationComplete(event);
	}

	/**
	 * @private
	 **/
	public function ___AboutScreen_BorderContainer1_remove(event:mx.events.FlexEvent):Void {
		onTabRemoved(event);
	}

	//  binding mgmt
	private function _AboutScreen_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (ConstantsCoreVO.MOONSHINE_IDE_LABEL);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_AboutScreen_Label1.text');

		result[1] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (ConstantsCoreVO.MOONSHINE_IDE_COPYRIGHT_LABEL);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_AboutScreen_Label4.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(AboutScreen)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}