/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugins.references.view
 *  Class:      ReferencesView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/actionScripts/plugins/references/view/ReferencesView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:58 MSK
 */

package actionScripts.plugins.references.view;

import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.OpenFileEvent;
import actionScripts.factory.FileLocation;
import actionScripts.valueObjects.Location;
import actionScripts.valueObjects.Position;
import actionScripts.valueObjects.SymbolInformation;
import spark.components.Alert;

import haxe.Constraints.Function;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.ArrayCollection;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.Label;
import spark.components.List;
import spark.components.VGroup;
import spark.layouts.VerticalLayout;

class ReferencesView extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lstReferences:spark.components.List;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var references:mx.collections.ArrayCollection;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _ReferencesView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugins_references_view_ReferencesViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(ReferencesView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.title = 'References';
		this.width = 600;
		this.height = 500;
		this.minWidth = 300;
		this.minHeight = 300;
		this.controlBarContent = [_ReferencesView_Button1_c()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_ReferencesView_Array2_c);
		_ReferencesView_ArrayCollection1_i();

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	private function itemToLabel(item:Location):String {
		var start:Position = item.range.start;
		return '(' + start.line + ', ' + start.character + ') ' + new File(item.uri).nativePath;
	}

	private function onListDoubleClicked(event:MouseEvent):Void {
		if (!AS3.as(lstReferences.selectedItem, Bool)) {
			Alert.show('Please select an item to open.');
			return;
		}

		var location:Location = AS3.as(lstReferences.selectedItem, Location);
		var openEvent:OpenFileEvent = new OpenFileEvent(OpenFileEvent.OPEN_FILE,
		[new FileLocation(location.uri, true)], location.range.start.line);
		openEvent.atChar = location.range.start.character;
		GlobalEventDispatcher.getInstance().dispatchEvent(openEvent);

		super.closeThis();
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _ReferencesView_ArrayCollection1_i():mx.collections.ArrayCollection {
		var temp:mx.collections.ArrayCollection = new mx.collections.ArrayCollection();
		temp.initialized(this, 'references');
		references = temp;
		mx.binding.BindingManager.executeBindings(this, 'references', references);
		return temp;
	}

	private function _ReferencesView_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Open';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___ReferencesView_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ReferencesView_Button1_click(event:flash.events.MouseEvent):Void {
		onListDoubleClicked(null);
	}

	private function _ReferencesView_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_ReferencesView_VGroup1_c()];
		return cast temp;
	}

	private function _ReferencesView_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.mxmlContent = [_ReferencesView_Label1_c(), _ReferencesView_List1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ReferencesView_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Matching items:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ReferencesView_List1_i():spark.components.List {
		var temp:spark.components.List = new spark.components.List();
		temp.styleName = 'multiLineList';
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.doubleClickEnabled = true;
		temp.layout = _ReferencesView_VerticalLayout1_c();
		temp.addEventListener('doubleClick', __lstReferences_doubleClick);
		temp.id = 'lstReferences';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lstReferences = temp;
		mx.binding.BindingManager.executeBindings(this, 'lstReferences', lstReferences);
		return temp;
	}

	private function _ReferencesView_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.horizontalAlign = 'justify';
		temp.useVirtualLayout = true;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __lstReferences_doubleClick(event:flash.events.MouseEvent):Void {
		onListDoubleClicked(event);
	}

	//  binding mgmt
	private function _ReferencesView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'lstReferences.dataProvider', 'references');

		result[1] = new mx.binding.Binding(this,
				function():Function {
					return (itemToLabel);
				},
				null,
				'lstReferences.labelFunction');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(ReferencesView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}