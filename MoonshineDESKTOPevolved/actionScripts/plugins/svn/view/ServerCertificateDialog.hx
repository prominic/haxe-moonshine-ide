/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugins.svn.view
 *  Class:      ServerCertificateDialog
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/actionScripts/plugins/svn/view/ServerCertificateDialog.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:57 MSK
 */

package actionScripts.plugins.svn.view;

import flash.filesystem.File;
import flash.events.Event;

import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.GlowFilter;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.BorderContainer;
import spark.components.Button;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.TextArea;
import spark.components.VGroup;

class ServerCertificateDialog extends spark.components.BorderContainer implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _ServerCertificateDialog_TextArea1:spark.components.TextArea;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _ServerCertificateDialog_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugins_svn_view_ServerCertificateDialogWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(ServerCertificateDialog, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 450;
		this.filters = [_ServerCertificateDialog_GlowFilter1_c()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_ServerCertificateDialog_Array2_c);

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.contentBackgroundColor = 16119285;
					this.contentBackgroundAlpha = 1;
					this.borderVisible = false;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	public static inline var EVENT_ACCEPT_TEMP:String = 'acceptTempEvent';
	public static inline var EVENT_ACCEPT_PERM:String = 'acceptPermEvent';
	public static inline var EVENT_CANCEL:String = 'cancelEvent';

	@:meta(Bindable())
	public var prompt:String;

	private function acceptPerm():Void {
		dispatchEvent(new Event(EVENT_ACCEPT_PERM));
	}

	private function acceptTemp():Void {
		dispatchEvent(new Event(EVENT_ACCEPT_TEMP));
	}

	private function cancel():Void {
		dispatchEvent(new Event(EVENT_CANCEL));
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _ServerCertificateDialog_GlowFilter1_c():flash.filters.GlowFilter {
		var temp:flash.filters.GlowFilter = new flash.filters.GlowFilter();
		temp.color = 0;
		temp.alpha = 0.3;
		temp.blurX = 6;
		temp.blurY = 6;
		temp.quality = 2;
		return temp;
	}

	private function _ServerCertificateDialog_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_ServerCertificateDialog_VGroup1_c()];
		return cast temp;
	}

	private function _ServerCertificateDialog_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.paddingLeft = 10;
		temp.paddingRight = 10;
		temp.paddingTop = 10;
		temp.paddingBottom = 10;
		temp.mxmlContent = [_ServerCertificateDialog_HGroup1_c(), _ServerCertificateDialog_TextArea1_i(), _ServerCertificateDialog_HGroup2_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ServerCertificateDialog_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_ServerCertificateDialog_Label1_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ServerCertificateDialog_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.percentWidth = 100.0;
		temp.text = 'Subversion Server Certificate';
		temp.styleName = 'uiTextSettingsLabel';
		temp.setStyle('paddingBottom', 5);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ServerCertificateDialog_TextArea1_i():spark.components.TextArea {
		var temp:spark.components.TextArea = new spark.components.TextArea();
		temp.percentWidth = 100.0;
		temp.height = 200;
		temp.styleName = 'uiText';
		temp.id = '_ServerCertificateDialog_TextArea1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ServerCertificateDialog_TextArea1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ServerCertificateDialog_TextArea1', _ServerCertificateDialog_TextArea1);
		return temp;
	}

	private function _ServerCertificateDialog_HGroup2_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.horizontalAlign = 'right';
		temp.paddingTop = 5;
		temp.mxmlContent = [_ServerCertificateDialog_Button1_c(), _ServerCertificateDialog_Button2_c(), _ServerCertificateDialog_Button3_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ServerCertificateDialog_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Accept for now';
		temp.styleName = 'lightButton';
		temp.addEventListener('click', ___ServerCertificateDialog_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ServerCertificateDialog_Button1_click(event:flash.events.MouseEvent):Void {
		acceptTemp();
	}

	private function _ServerCertificateDialog_Button2_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Accept forever';
		temp.styleName = 'lightButton';
		temp.addEventListener('click', ___ServerCertificateDialog_Button2_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ServerCertificateDialog_Button2_click(event:flash.events.MouseEvent):Void {
		acceptPerm();
	}

	private function _ServerCertificateDialog_Button3_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Cancel';
		temp.styleName = 'lightButton';
		temp.addEventListener('click', ___ServerCertificateDialog_Button3_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ServerCertificateDialog_Button3_click(event:flash.events.MouseEvent):Void {
		cancel();
	}

	//  binding mgmt
	private function _ServerCertificateDialog_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'_ServerCertificateDialog_TextArea1.text', 'prompt');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(ServerCertificateDialog)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}