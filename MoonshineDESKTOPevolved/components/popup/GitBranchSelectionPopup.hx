/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      GitBranchSelectionPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/GitBranchSelectionPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:59 MSK
 */

package components.popup;

import mx.collections.ArrayCollection;
import mx.controls.Alert;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import actionScripts.valueObjects.GenericSelectableObject;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.popup.GitBranchSelectionPopupInnerClass0;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.Label;
import spark.components.List;
import spark.components.VGroup;

class GitBranchSelectionPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _GitBranchSelectionPopup_Label2:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnCommit:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lstBranches:spark.components.List;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _GitBranchSelectionPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_GitBranchSelectionPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(GitBranchSelectionPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 600;
		this.height = 400;
		this.minWidth = 300;
		this.minHeight = 200;
		this.controlBarContent = [_GitBranchSelectionPopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_GitBranchSelectionPopup_Array2_c);

		// events
		this.addEventListener('initialize', ___GitBranchSelectionPopup_ResizableTitleWindow1_initialize);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	@:meta(Bindable())public var branchCollection:ArrayCollection;
	@:meta(Bindable())public var isGitAvailable:Bool = false;

	public var isSubmit:Bool = false;

	private function onInit(event:FlexEvent):Void {}

	private function onSubmit():Void {
		if (AS3.as(lstBranches.selectedItem.isSelected, Bool)) {
			Alert.show('Selected item is already set as current branch.', 'Error!');
			return;
		}

		isSubmit = true;
		// for now - testing
		dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
	}

	private function getResourceName(item:Dynamic):String {
		return (Std.string((AS3.as(item, GenericSelectableObject)).data.path));
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _GitBranchSelectionPopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Checkout Branch';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btnCommit_click);
		temp.id = 'btnCommit';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnCommit = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnCommit', btnCommit);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnCommit_click(event:flash.events.MouseEvent):Void {
		onSubmit();
	}

	private function _GitBranchSelectionPopup_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_GitBranchSelectionPopup_VGroup1_c()];
		return cast temp;
	}

	private function _GitBranchSelectionPopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 9;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.mxmlContent = [_GitBranchSelectionPopup_Label1_c(), _GitBranchSelectionPopup_List1_i(), _GitBranchSelectionPopup_Label2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitBranchSelectionPopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Select a branch to switch to:';
		temp.setStyle('paddingBottom', 4);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitBranchSelectionPopup_List1_i():spark.components.List {
		var temp:spark.components.List = new spark.components.List();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.styleName = 'multiLineList';
		temp.labelField = 'data';
		temp.requireSelection = true;
		temp.doubleClickEnabled = true;
		temp.itemRenderer = _GitBranchSelectionPopup_ClassFactory1_c();
		temp.addEventListener('doubleClick', __lstBranches_doubleClick);
		temp.id = 'lstBranches';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lstBranches = temp;
		mx.binding.BindingManager.executeBindings(this, 'lstBranches', lstBranches);
		return temp;
	}

	private function _GitBranchSelectionPopup_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.popup.GitBranchSelectionPopupInnerClass0;
		temp.properties = {
					'outerDocument': this
				};
		return temp;
	}

	/**
	 * @private
	 **/
	public function __lstBranches_doubleClick(event:flash.events.MouseEvent):Void {
		onSubmit();
	}

	private function _GitBranchSelectionPopup_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'You need Git installed on your system to continue.';
		temp.percentWidth = 100.0;
		temp.setStyle('textAlign', 'center');
		temp.setStyle('color', 16711680);
		temp.id = '_GitBranchSelectionPopup_Label2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_GitBranchSelectionPopup_Label2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_GitBranchSelectionPopup_Label2', _GitBranchSelectionPopup_Label2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___GitBranchSelectionPopup_ResizableTitleWindow1_initialize(event:mx.events.FlexEvent):Void {
		onInit(event);
	}

	//  binding mgmt
	private function _GitBranchSelectionPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(lstBranches.selectedItem, Bool));
				},
				null,
				'btnCommit.enabled');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'lstBranches.dataProvider', 'branchCollection');

		result[2] = new mx.binding.Binding(this,
				function():Bool {
					return (!isGitAvailable);
				},
				null,
				'_GitBranchSelectionPopup_Label2.visible');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (!isGitAvailable);
				},
				null,
				'_GitBranchSelectionPopup_Label2.includeInLayout');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(GitBranchSelectionPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}