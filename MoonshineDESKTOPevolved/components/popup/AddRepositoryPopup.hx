/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      AddRepositoryPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/AddRepositoryPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:58 MSK
 */

package components.popup;

import com.adobe.utils.StringUtil;
import mx.controls.Alert;
import mx.events.CloseEvent;
import mx.validators.Validator;
import actionScripts.plugins.versionControl.VersionControlUtils;
import actionScripts.plugins.versionControl.event.VersionControlEvent;
import actionScripts.utils.UtilsCore;
import actionScripts.valueObjects.RepositoryItemVO;
import actionScripts.valueObjects.VersionControlTypes;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.IEventDispatcher;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.styles.*;
import mx.validators.StringValidator;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.RadioButton;
import spark.components.RadioButtonGroup;
import spark.components.VGroup;
import spark.events.TextOperationEvent;
import spark.layouts.VerticalLayout;

class AddRepositoryPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _AddRepositoryPopup_RadioButton1:spark.components.RadioButton;

	/**
	 * @private
	 **/
	public var _AddRepositoryPopup_RadioButton2:spark.components.RadioButton;

	/**
	 * @private
	 **/
	public var _AddRepositoryPopup_VGroup2:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnSubmit:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbLogin:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbTrustCert:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var eValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblNoPath:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var rgType:spark.components.RadioButtonGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtLogin:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtNotes:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtSource:actionScripts.plugin.findreplace.view.PromptTextInput;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _AddRepositoryPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_AddRepositoryPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(AddRepositoryPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 500;
		this.minWidth = 400;
		this.minHeight = 100;
		this.autoLayout = true;
		this.layout = _AddRepositoryPopup_VerticalLayout1_c();
		this.controlBarContent = [_AddRepositoryPopup_Spacer1_c(), _AddRepositoryPopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_AddRepositoryPopup_Array2_c);
		_AddRepositoryPopup_StringValidator1_i();
		_AddRepositoryPopup_RadioButtonGroup1_i();

		// events
		this.addEventListener('creationComplete', ___AddRepositoryPopup_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	@:meta(Bindable())public var type:String;

	public var editingRepository:RepositoryItemVO;

	@:meta(Bindable())private var isValidURL:Bool = false;

	public function notifySVNCheckoutError():Void {
		Alert.show('Oops! There is something wrong!\nPlease check console for details.', 'Error!');
		btnSubmit.enabled = true;
	}

	private function onAddRequest():Void {
		if (type == Std.string(VersionControlTypes.SVN) && AS3.as(cbLogin.selected, Bool)) {
			var tmpArr:Array<Dynamic> = new Array<Dynamic>();
			if (Validator.validateAll(tmpArr).length != 0) {
				return;
			}
		}

		// do not let keep any trailing slash (necessary for svn)
		var tmpRepositoryUrl:String = ((txtSource.text.charAt(txtSource.text.length - 1) == '/')) ?
		Std.string(txtSource.text.substr(0, txtSource.text.length - 1)) :
		Std.string(txtSource.text);

		// ensure duplicate url entry
		if (VersionControlUtils.REPOSITORIES != null) {
			for (repo in VersionControlUtils.REPOSITORIES) {
				if (Reflect.field(repo, 'url') == tmpRepositoryUrl) {
					Alert.show('Duplicate repository entry is not permitted.', 'Error!');
					return;
				}
			}
		}

		var isEditing:Bool;
		if (editingRepository == null) {
			editingRepository = new RepositoryItemVO();
		} else {
			isEditing = true;
		}

		editingRepository.url = tmpRepositoryUrl;
		editingRepository.notes = (StringTools.trim(txtNotes.text).length != 0) ? txtNotes.text : null;
		editingRepository.isRequireAuthentication = cbLogin.selected;
		editingRepository.isTrustCertificate = ((type == Std.string(VersionControlTypes.SVN))) ? cbTrustCert.selected : false;
		editingRepository.type = Std.string(rgType.selectedValue);
		editingRepository.children = (AS3.as(editingRepository.children, Bool)) ? editingRepository.children : ((editingRepository.type == VersionControlTypes.SVN) ? [] : null);
		editingRepository.isRoot = true;
		if (AS3.as(editingRepository.isRequireAuthentication, Bool)) {
			editingRepository.userName = (StringTools.trim(txtLogin.text).length != 0) ? txtLogin.text : null;
		} else {
			editingRepository.userName = null;
		}

		dispatchEvent(new VersionControlEvent(
				VersionControlEvent.ADD_EDIT_REPOSITORY,
				editingRepository));
		dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
	}

	private function updatePossiblePath():Void {
		var searchRegExp:as3hx.Compat.Regex;
		var results:Array<Dynamic>;
		if (type == Std.string(VersionControlTypes.GIT)) {
			// expected format is https://github.com/{organization/author}/{project}
			searchRegExp = new as3hx.Compat.Regex('(?:https?|git|ssh)\://.*/([^/]+)(?:\\.git)?', 'i');
			results = searchRegExp.exec(txtSource.text);
			if (results != null) {
				isValidURL = true;
			} else {
				isValidURL = false;
			}
		} else {
			searchRegExp = new as3hx.Compat.Regex('\\w*://.*/.+$', 'i');
			results = searchRegExp.exec(txtSource.text);
			if (results != null) {
				isValidURL = true;
			} else {
				isValidURL = false;
			}
		}
	}

	private function onCreationCompletes():Void {
		// if in edit mode
		if (editingRepository != null) {
			rgType.selectedValue = editingRepository.type;
			txtSource.text = editingRepository.url;
			txtNotes.text = editingRepository.notes;
			cbLogin.selected = editingRepository.isRequireAuthentication;
			cbTrustCert.selected = editingRepository.isTrustCertificate;
			txtLogin.text = editingRepository.userName;
		}

		txtSource.setFocus();
		onTypeChanged(null);
	}

	private function onTypeChanged(event:Event):Void {
		function displayNoPathMessageFor(pathType:String):Void {
			lblNoPath.text = 'You need ' + pathType + ' installed on your system.';
			lblNoPath.visible = lblNoPath.includeInLayout = true;
		};
		lblNoPath.visible = lblNoPath.includeInLayout = false;
		if (rgType.selectedValue == VersionControlTypes.SVN) {
			type = Std.string(VersionControlTypes.SVN);
			if (!AS3.as(UtilsCore.isSVNPresent(), Bool)) {
				displayNoPathMessageFor('SVN');
			}
		} else if (rgType.selectedValue == VersionControlTypes.GIT) {
			type = Std.string(VersionControlTypes.GIT);
			if (!AS3.as(UtilsCore.isGitPresent(), Bool)) {
				displayNoPathMessageFor('Git');
			}
		} /*
		 * @local
		 */

		// update if already inserted path
		if (StringTools.trim(txtSource.text).length != 0) {
			updatePossiblePath();
		}
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _AddRepositoryPopup_StringValidator1_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'eValidator');
		eValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'eValidator', eValidator);
		return temp;
	}

	private function _AddRepositoryPopup_RadioButtonGroup1_i():spark.components.RadioButtonGroup {
		var temp:spark.components.RadioButtonGroup = new spark.components.RadioButtonGroup();
		temp.addEventListener('change', __rgType_change);
		temp.initialized(this, 'rgType');
		rgType = temp;
		mx.binding.BindingManager.executeBindings(this, 'rgType', rgType);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __rgType_change(event:flash.events.Event):Void {
		onTypeChanged(event);
	}

	private function _AddRepositoryPopup_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.paddingLeft = 12;
		temp.paddingBottom = 12;
		temp.paddingTop = 9;
		temp.paddingRight = 12;
		return temp;
	}

	private function _AddRepositoryPopup_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AddRepositoryPopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Save';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btnSubmit_click);
		temp.id = 'btnSubmit';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnSubmit = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnSubmit', btnSubmit);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnSubmit_click(event:flash.events.MouseEvent):Void {
		onAddRequest();
	}

	private function _AddRepositoryPopup_Array2_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [_AddRepositoryPopup_HGroup1_c(), _AddRepositoryPopup_PromptTextInput1_i(), _AddRepositoryPopup_VGroup1_c(), _AddRepositoryPopup_Label2_i(), _AddRepositoryPopup_HGroup2_c(), _AddRepositoryPopup_VGroup2_i()];
		return temp;
	}

	private function _AddRepositoryPopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_AddRepositoryPopup_RadioButton1_i(), _AddRepositoryPopup_RadioButton2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AddRepositoryPopup_RadioButton1_i():spark.components.RadioButton {
		var temp:spark.components.RadioButton = new spark.components.RadioButton();
		temp.groupName = 'rgType';
		temp.label = 'SVN';
		temp.selected = true;
		temp.id = '_AddRepositoryPopup_RadioButton1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_AddRepositoryPopup_RadioButton1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_AddRepositoryPopup_RadioButton1', _AddRepositoryPopup_RadioButton1);
		return temp;
	}

	private function _AddRepositoryPopup_RadioButton2_i():spark.components.RadioButton {
		var temp:spark.components.RadioButton = new spark.components.RadioButton();
		temp.groupName = 'rgType';
		temp.label = 'Git';
		temp.id = '_AddRepositoryPopup_RadioButton2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_AddRepositoryPopup_RadioButton2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_AddRepositoryPopup_RadioButton2', _AddRepositoryPopup_RadioButton2);
		return temp;
	}

	private function _AddRepositoryPopup_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.prompt = 'Repository URL';
		temp.addEventListener('change', __txtSource_change);
		temp.id = 'txtSource';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtSource = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtSource', txtSource);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtSource_change(event:spark.events.TextOperationEvent):Void {
		updatePossiblePath();
	}

	private function _AddRepositoryPopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_AddRepositoryPopup_Label1_c(), _AddRepositoryPopup_PromptTextInput2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AddRepositoryPopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Notes (optional):';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AddRepositoryPopup_PromptTextInput2_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Repostory notes..';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.id = 'txtNotes';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtNotes = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtNotes', txtNotes);
		return temp;
	}

	private function _AddRepositoryPopup_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.percentWidth = 100.0;
		temp.includeInLayout = false;
		temp.visible = false;
		temp.setStyle('textAlign', 'center');
		temp.setStyle('color', 16711680);
		temp.id = 'lblNoPath';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblNoPath = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblNoPath', lblNoPath);
		return temp;
	}

	private function _AddRepositoryPopup_HGroup2_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_AddRepositoryPopup_CheckBox1_i(), _AddRepositoryPopup_CheckBox2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _AddRepositoryPopup_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Need Authentication';
		temp.selected = false;
		temp.id = 'cbLogin';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbLogin = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbLogin', cbLogin);
		return temp;
	}

	private function _AddRepositoryPopup_CheckBox2_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Trust Server Certificate';
		temp.id = 'cbTrustCert';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbTrustCert = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbTrustCert', cbTrustCert);
		return temp;
	}

	private function _AddRepositoryPopup_VGroup2_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_AddRepositoryPopup_PromptTextInput3_i(), _AddRepositoryPopup_Label3_c()];
		temp.id = '_AddRepositoryPopup_VGroup2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_AddRepositoryPopup_VGroup2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_AddRepositoryPopup_VGroup2', _AddRepositoryPopup_VGroup2);
		return temp;
	}

	private function _AddRepositoryPopup_PromptTextInput3_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'User Name';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.id = 'txtLogin';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtLogin = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtLogin', txtLogin);
		return temp;
	}

	private function _AddRepositoryPopup_Label3_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Password will be prompted when needed by version control software';
		temp.setStyle('color', 4473924);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___AddRepositoryPopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes();
	}

	//  binding mgmt
	private function _AddRepositoryPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'eValidator.source', 'txtLogin');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'eValidator.trigger', 'btnSubmit');

		result[2] = new mx.binding.Binding(this,
				function():Bool {
					return (isValidURL);
				},
				null,
				'btnSubmit.enabled');

		result[3] = new mx.binding.Binding(this,
				function():Dynamic {
					return (VersionControlTypes.SVN);
				},
				null,
				'_AddRepositoryPopup_RadioButton1.value');

		result[4] = new mx.binding.Binding(this,
				function():Dynamic {
					return (VersionControlTypes.GIT);
				},
				null,
				'_AddRepositoryPopup_RadioButton2.value');

		result[5] = new mx.binding.Binding(this,
				function():Bool {
					return (type == Std.string(VersionControlTypes.SVN));
				},
				null,
				'cbTrustCert.enabled');

		result[6] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(cbLogin.selected, Bool));
				},
				null,
				'_AddRepositoryPopup_VGroup2.visible');

		result[7] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(cbLogin.selected, Bool));
				},
				null,
				'_AddRepositoryPopup_VGroup2.includeInLayout');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(AddRepositoryPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}