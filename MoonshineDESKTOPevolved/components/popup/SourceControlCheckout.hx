/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      SourceControlCheckout
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/SourceControlCheckout.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:59 MSK
 */

package components.popup;

import com.adobe.utils.StringUtil;
import mx.controls.Alert;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.validators.Validator;
import spark.events.TextOperationEvent;
import actionScripts.locator.IDEModel;
import actionScripts.plugins.svn.event.SVNEvent;
import actionScripts.valueObjects.RepositoryItemVO;
import actionScripts.valueObjects.VersionControlTypes;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.IEventDispatcher;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import mx.validators.StringValidator;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.VGroup;

@:meta(Event(name = 'name', type = 'flash.events.Event'))
class SourceControlCheckout extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _SourceControlCheckout_Label2:spark.components.Label;

	/**
	 * @private
	 **/
	public var _SourceControlCheckout_VGroup2:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnSubmit:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbLogin:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var eValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var fnValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblSeparator:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var pValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtFolderName:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtLogin:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtPassword:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtSource:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtTarget:actionScripts.plugin.findreplace.view.PromptTextInput;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _SourceControlCheckout_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_SourceControlCheckoutWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(SourceControlCheckout, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 500;
		this.minWidth = 400;
		this.minHeight = 100;
		this.autoLayout = true;
		this.controlBarContent = [_SourceControlCheckout_Button1_c(), _SourceControlCheckout_Spacer1_c(), _SourceControlCheckout_Button2_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_SourceControlCheckout_Array2_c);
		_SourceControlCheckout_StringValidator2_i();
		_SourceControlCheckout_StringValidator1_i();
		_SourceControlCheckout_StringValidator3_i();

		// events
		this.addEventListener('creationComplete', ___SourceControlCheckout_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	@:meta(Bindable())public var isGitAvailable:Bool = false;
	@:meta(Bindable())public var type:String;

	public var editingRepository:RepositoryItemVO;
	public var submitObject:Dynamic;
	public var isTrustServerCertificate:Bool = false;

	@:meta(Bindable())private var isValidURL:Bool = false;
	@:meta(Bindable())private var isPathMapped:Bool = false;

	private var mappedPath:String;
	private var isFolderNameManuallyChanged:Bool = false;
	private var isFolderNameManuallyEmpty:Bool = false;
	private var model:IDEModel = IDEModel.getInstance();

	public function notifySVNCheckoutError():Void {
		Alert.show('Oops! There is something wrong!\nPlease check console for details.', 'Error!');
		btnSubmit.enabled = true;
	}

	private function onCheckoutRequest():Void {
		var tmpArr:Array<Dynamic> = new Array<Dynamic>();
		if (Validator.validateAll(tmpArr).length != 0) {
			return;
		}

		submitObject = {};
		Reflect.setField(submitObject, 'url', txtSource.text);
		Reflect.setField(submitObject, 'target', mappedPath);
		Reflect.setField(submitObject, 'targetFolder', txtFolderName.text);
		Reflect.setField(submitObject, 'repository', editingRepository);

		if (type != VersionControlTypes.SVN) {
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
		} else {
			dispatchEvent(new SVNEvent(SVNEvent.EVENT_CHECKOUT, null));
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
		}
	}

	private function browse():Void {
		model.fileCore.browseForDirectory('Select Parent Directory', onDirectorySelected);
	}

	private function onDirectorySelected(fileObj:Dynamic):Void {
		mappedPath = Std.string((AS3.as(fileObj, File)).nativePath);

		isPathMapped = true;
		updatePossiblePath();
	}

	private function updatePossiblePath():Void {
		validateURLInput();
		if (!isValidURL && isPathMapped) {
			txtTarget.text = mappedPath + model.fileCore.separator + '...';
		} else if (!isValidURL && !isPathMapped) {
			txtTarget.text = '...';
		}
	}

	private function validateURLInput():Void {
		var autoFolderName:String;
		var searchRegExp:as3hx.Compat.Regex;
		var results:Array<Dynamic>;
		if (type == Std.string(VersionControlTypes.GIT)) {
			// expected format is https://github.com/{organization/author}/{project}
			searchRegExp = new as3hx.Compat.Regex('(?:https?|git|ssh)\://.*/.*/([^/]+)(?:\\.git)?', 'i');
			results = searchRegExp.exec(txtSource.text);
			if (results != null) {
				isValidURL = true;
				txtTarget.text = ((isPathMapped)) ? mappedPath : '...';
				autoFolderName = Std.string(results[0].split('/').pop());
				if (!isFolderNameManuallyChanged || isFolderNameManuallyEmpty) {
					txtFolderName.text = autoFolderName;
					isFolderNameManuallyChanged = isFolderNameManuallyEmpty = false;
				}

				return;
			}
		} else {
			searchRegExp = new as3hx.Compat.Regex('.*://.*/.*.$', 'i');
			results = searchRegExp.exec(txtSource.text);
			if (results != null) {
				isGitAvailable = isValidURL = true;
				txtTarget.text = ((isPathMapped)) ? mappedPath : '...';
				txtFolderName.text = ((txtFolderName.text != '')) ? txtFolderName.text : txtSource.text.split('/').pop();

				return;
			}
		}

		if (results == null && !isFolderNameManuallyChanged) {
			txtFolderName.text = '';
		}
		isValidURL = false;
	}

	private function onCreationCompletes():Void {
		if (editingRepository != null) {
			txtSource.text = editingRepository.url;
			updatePossiblePath();
		}

		lblSeparator.text = File.separator;
		txtSource.setFocus();
	}

	private function onFolderNameChanged(event:TextOperationEvent):Void {
		if (StringTools.trim(txtFolderName.text).length == 0) {
			isValidURL = false;
			isFolderNameManuallyEmpty = true;
			isFolderNameManuallyChanged = false;
		} else {
			isFolderNameManuallyEmpty = false;
			isFolderNameManuallyChanged = true;
			updatePossiblePath();
		}
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _SourceControlCheckout_StringValidator2_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'eValidator');
		eValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'eValidator', eValidator);
		return temp;
	}

	private function _SourceControlCheckout_StringValidator1_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'fnValidator');
		fnValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'fnValidator', fnValidator);
		return temp;
	}

	private function _SourceControlCheckout_StringValidator3_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'pValidator');
		pValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'pValidator', pValidator);
		return temp;
	}

	private function _SourceControlCheckout_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Choose Parent Directory';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___SourceControlCheckout_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SourceControlCheckout_Button1_click(event:flash.events.MouseEvent):Void {
		browse();
	}

	private function _SourceControlCheckout_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SourceControlCheckout_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btnSubmit_click);
		temp.id = 'btnSubmit';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnSubmit = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnSubmit', btnSubmit);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnSubmit_click(event:flash.events.MouseEvent):Void {
		onCheckoutRequest();
	}

	private function _SourceControlCheckout_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_SourceControlCheckout_VGroup1_c()];
		return cast temp;
	}

	private function _SourceControlCheckout_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 12;
		temp.paddingTop = 9;
		temp.paddingRight = 12;
		temp.mxmlContent = [_SourceControlCheckout_PromptTextInput1_i(), _SourceControlCheckout_HGroup1_c(), _SourceControlCheckout_Label2_i(), _SourceControlCheckout_HGroup2_c(), _SourceControlCheckout_VGroup2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SourceControlCheckout_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.prompt = 'Repository URL';
		temp.addEventListener('change', __txtSource_change);
		temp.id = 'txtSource';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtSource = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtSource', txtSource);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtSource_change(event:spark.events.TextOperationEvent):Void {
		updatePossiblePath();
	}

	private function _SourceControlCheckout_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.verticalAlign = 'middle';
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_SourceControlCheckout_PromptTextInput2_i(), _SourceControlCheckout_Label1_i(), _SourceControlCheckout_PromptTextInput3_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SourceControlCheckout_PromptTextInput2_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Where to download';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.editable = false;
		temp.tabIndex = 2;
		temp.id = 'txtTarget';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtTarget = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtTarget', txtTarget);
		return temp;
	}

	private function _SourceControlCheckout_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.id = 'lblSeparator';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblSeparator = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblSeparator', lblSeparator);
		return temp;
	}

	private function _SourceControlCheckout_PromptTextInput3_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Target folder name';
		temp.styleName = 'textInput';
		temp.restrict = '0-9A-Za-z_';
		temp.addEventListener('change', __txtFolderName_change);
		temp.id = 'txtFolderName';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtFolderName = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtFolderName', txtFolderName);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtFolderName_change(event:spark.events.TextOperationEvent):Void {
		onFolderNameChanged(event);
	}

	private function _SourceControlCheckout_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'You need Git installed on your system to continue.';
		temp.percentWidth = 100.0;
		temp.setStyle('textAlign', 'center');
		temp.setStyle('color', 16711680);
		temp.id = '_SourceControlCheckout_Label2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SourceControlCheckout_Label2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SourceControlCheckout_Label2', _SourceControlCheckout_Label2);
		return temp;
	}

	private function _SourceControlCheckout_HGroup2_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.includeInLayout = false;
		temp.visible = false;
		temp.mxmlContent = [_SourceControlCheckout_CheckBox1_i(), _SourceControlCheckout_CheckBox2_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SourceControlCheckout_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Need Authentication';
		temp.selected = false;
		temp.id = 'cbLogin';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbLogin = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbLogin', cbLogin);
		return temp;
	}

	private function _SourceControlCheckout_CheckBox2_c():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Trust Server Certificate';
		temp.addEventListener('change', ___SourceControlCheckout_CheckBox2_change);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SourceControlCheckout_CheckBox2_change(event:flash.events.Event):Void {
		isTrustServerCertificate = AS3.as(Reflect.field(event.target, 'selected'), Bool);
	}

	private function _SourceControlCheckout_VGroup2_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_SourceControlCheckout_PromptTextInput4_i(), _SourceControlCheckout_PromptTextInput5_i()];
		temp.id = '_SourceControlCheckout_VGroup2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SourceControlCheckout_VGroup2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SourceControlCheckout_VGroup2', _SourceControlCheckout_VGroup2);
		return temp;
	}

	private function _SourceControlCheckout_PromptTextInput4_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'User Name';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.id = 'txtLogin';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtLogin = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtLogin', txtLogin);
		return temp;
	}

	private function _SourceControlCheckout_PromptTextInput5_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Password';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.addEventListener('change', __txtPassword_change);
		temp.id = 'txtPassword';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtPassword = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtPassword', txtPassword);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtPassword_change(event:spark.events.TextOperationEvent):Void {
		txtPassword.displayAsPassword = true;
	}

	/**
	 * @private
	 **/
	public function ___SourceControlCheckout_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes();
	}

	//  binding mgmt
	private function _SourceControlCheckout_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'fnValidator.source', 'txtFolderName');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'fnValidator.trigger', 'btnSubmit');

		result[2] = new mx.binding.Binding(this,
				null,
				null,
				'eValidator.source', 'txtLogin');

		result[3] = new mx.binding.Binding(this,
				null,
				null,
				'eValidator.trigger', 'btnSubmit');

		result[4] = new mx.binding.Binding(this,
				null,
				null,
				'pValidator.source', 'txtPassword');

		result[5] = new mx.binding.Binding(this,
				null,
				null,
				'pValidator.trigger', 'btnSubmit');

		result[6] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (((type == Std.string(VersionControlTypes.GIT))) ? 'Pull' : 'Checkout');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'btnSubmit.label');

		result[7] = new mx.binding.Binding(this,
				function():Bool {
					return (isGitAvailable && isValidURL && isPathMapped);
				},
				null,
				'btnSubmit.enabled');

		result[8] = new mx.binding.Binding(this,
				function():Bool {
					return (!isGitAvailable && type == Std.string(VersionControlTypes.GIT));
				},
				null,
				'_SourceControlCheckout_Label2.visible');

		result[9] = new mx.binding.Binding(this,
				function():Bool {
					return (!isGitAvailable && type == Std.string(VersionControlTypes.GIT));
				},
				null,
				'_SourceControlCheckout_Label2.includeInLayout');

		result[10] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(cbLogin.selected, Bool) && type == Std.string(VersionControlTypes.SVN));
				},
				null,
				'_SourceControlCheckout_VGroup2.visible');

		result[11] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(cbLogin.selected, Bool) && type == Std.string(VersionControlTypes.SVN));
				},
				null,
				'_SourceControlCheckout_VGroup2.includeInLayout');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(SourceControlCheckout)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}