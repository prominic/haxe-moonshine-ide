/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      GitXCodePermissionPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/GitXCodePermissionPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:59 MSK
 */

package components.popup;

import mx.core.UIComponent;
import mx.events.FlexEvent;
import spark.utils.TextFlowUtil;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.ui.menu.vo.ProjectMenuTypes;

import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.DropShadowFilter;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.HBox;
import mx.controls.HRule;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.graphics.SolidColor;
import mx.styles.*;
import spark.components.BorderContainer;
import spark.components.Button;
import spark.components.Group;
import spark.components.RichEditableText;
import spark.components.VGroup;

class GitXCodePermissionPopup extends spark.components.Group {

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var body:spark.components.BorderContainer;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnAllowAccess:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnCancel:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var buttonBar:mx.containers.HBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var buttonBarLine:mx.controls.HRule;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var retUserMessage:spark.components.RichEditableText;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.autoLayout = true;
		this.horizontalCenter = 0;
		this.verticalCenter = 0;
		this.mxmlContent = [_GitXCodePermissionPopup_BorderContainer1_i()];

		// events
		this.addEventListener('creationComplete', ___GitXCodePermissionPopup_Group1_creationComplete);

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	public var xCodePath:String;
	public var xCodePathAgainst:String;
	public var isDiscarded:Bool = false;
	public var isXCodePath:Bool = false;

	private var model:IDEModel = IDEModel.getInstance();

	private function onJavaPathSetupPopupCreationComplete(event:FlexEvent):Void {
		var closeButtonUIC:UIComponent = new UIComponent();
		closeButtonUIC.width = closeButtonUIC.height = 27;
		closeButtonUIC.right = 0;

		var closeButton:Sprite = new Sprite();
		// Circle
		closeButton.graphics.lineStyle(1, 0xFFFFFF, 0.8);
		closeButton.graphics.beginFill(0x0, 0);
		closeButton.graphics.drawCircle(14, 12, 6);
		closeButton.graphics.endFill();
		// X (\)
		closeButton.graphics.lineStyle(2, 0xFFFFFF, 0.8, true);
		closeButton.graphics.moveTo(12, 10);
		closeButton.graphics.lineTo(16, 14);
		// X (/)
		closeButton.graphics.moveTo(16, 10);
		closeButton.graphics.lineTo(12, 14);
		// Hit area
		closeButton.graphics.lineStyle(0, 0x0, 0);
		closeButton.graphics.beginFill(0x0, 0);
		closeButton.graphics.drawRect(0, 0, 27, 25);
		closeButton.graphics.endFill();

		closeButton.addEventListener(MouseEvent.CLICK, closeButtonClickedRequest, false, 0, true);
		closeButtonUIC.addChild(closeButton);

		addElement(closeButtonUIC);

		var isCommandLineTools:Bool = xCodePath.indexOf('.app') == -1;

		btnCancel.label = 'I Don\'t Want Git or SVN';
		retUserMessage.textFlow = TextFlowUtil.importFromString('<p>In order to use Git and SVN, you must grant permission for Moonshine to access the XCode command line tools.<br/><br/>Click <span fontWeight=\'bold\'>Allow Access</span> to open the folder show below. Then click "Open" to grant access.<br/><br/><span fontWeight=\'bold\'>' + xCodePath + '</span></p>');
	}

	private function closeButtonClickedRequest(event:MouseEvent):Void {
		closeButtonClicked(event, true);
	}

	private function closeButtonClicked(event:MouseEvent, isDiscarded:Bool = false):Void {
		this.isDiscarded = isDiscarded;
		if (event != null) {
			event.target.removeEventListener(MouseEvent.CLICK, closeButtonClicked);
		}
		dispatchEvent(new Event(Event.CLOSE));
	}

	private function onAllowAccess(event:MouseEvent):Void {
		var binLocation:FileLocation = new FileLocation(xCodePath);
		if (AS3.as(binLocation.fileBridge.isDirectory, Bool)) {
			model.fileCore.browseForDirectory('Select Directory', onXCodeDirectorySelected, null, xCodePath);
		} else {
			model.fileCore.browseForOpen('Select XCode File', onXCodeDirectorySelected, null, null, xCodePath);
		}
	}

	private function onXCodeDirectorySelected(dir:Dynamic):Void {
		xCodePath = Std.string((AS3.as(dir, File)).nativePath);
		closeButtonClicked(null);
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _GitXCodePermissionPopup_BorderContainer1_i():spark.components.BorderContainer {
		var temp:spark.components.BorderContainer = new spark.components.BorderContainer();
		temp.width = 450;
		temp.minHeight = 150;
		temp.autoLayout = true;
		temp.alpha = 1;
		temp.backgroundFill = _GitXCodePermissionPopup_SolidColor1_c();
		temp.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_GitXCodePermissionPopup_Array2_c);
		temp.setStyle('cornerRadius', 6);
		temp.setStyle('borderColor', 2960685);
		temp.id = 'body';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		body = temp;
		mx.binding.BindingManager.executeBindings(this, 'body', body);
		return temp;
	}

	private function _GitXCodePermissionPopup_SolidColor1_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 10526880;
		return temp;
	}

	private function _GitXCodePermissionPopup_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_GitXCodePermissionPopup_VGroup1_c()];
		return cast temp;
	}

	private function _GitXCodePermissionPopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.gap = 0;
		temp.mxmlContent = [_GitXCodePermissionPopup_RichEditableText1_i(), _GitXCodePermissionPopup_HRule1_i(), _GitXCodePermissionPopup_HBox1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitXCodePermissionPopup_RichEditableText1_i():spark.components.RichEditableText {
		var temp:spark.components.RichEditableText = new spark.components.RichEditableText();
		temp.percentWidth = 100.0;
		temp.editable = false;
		temp.focusEnabled = false;
		temp.setStyle('paddingLeft', 20);
		temp.setStyle('paddingRight', 20);
		temp.setStyle('paddingTop', 20);
		temp.setStyle('paddingBottom', 20);
		temp.setStyle('fontSize', 13);
		temp.id = 'retUserMessage';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		retUserMessage = temp;
		mx.binding.BindingManager.executeBindings(this, 'retUserMessage', retUserMessage);
		return temp;
	}

	private function _GitXCodePermissionPopup_HRule1_i():mx.controls.HRule {
		var temp:mx.controls.HRule = new mx.controls.HRule();
		temp.percentWidth = 100.0;
		temp.bottom = 41;
		temp.setStyle('strokeWidth', 1);
		temp.setStyle('strokeColor', 3158064);
		temp.id = 'buttonBarLine';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		buttonBarLine = temp;
		mx.binding.BindingManager.executeBindings(this, 'buttonBarLine', buttonBarLine);
		return temp;
	}

	@:access(mx.containers.HBox) private function _GitXCodePermissionPopup_HBox1_i():mx.containers.HBox {
		var temp:mx.containers.HBox = new mx.containers.HBox();
		temp.percentWidth = 100.0;
		temp.height = 41;
		temp.bottom = 0;
		temp.filters = [_GitXCodePermissionPopup_DropShadowFilter1_c()];
		temp.setStyle('backgroundColor', 4473924);
		temp.setStyle('paddingRight', 10);
		temp.setStyle('paddingTop', 0);
		temp.setStyle('horizontalAlign', 'center');
		temp.setStyle('verticalAlign', 'middle');
		temp.id = 'buttonBar';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		temp._documentDescriptor =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.HBox,
					'id': 'buttonBar',
					'propertiesFactory': function():Dynamic {
						return {
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': mx.containers.HBox,
								'propertiesFactory': function():Dynamic {
									return {
										'autoLayout': true,
										'childDescriptors': [
										new mx.core.UIComponentDescriptor({
											'type': spark.components.Button,
											'id': 'btnAllowAccess',
											'events': {
												'click': '__btnAllowAccess_click'
											},
											'propertiesFactory': function():Dynamic {
												return {
													'label': 'Allow Access',
													'styleName': 'darkButton'
												};
											}
										}),
										new mx.core.UIComponentDescriptor({
											'type': spark.components.Button,
											'id': 'btnCancel',
											'events': {
												'click': '__btnCancel_click'
											},
											'propertiesFactory': function():Dynamic {
												return {
													'styleName': 'darkButton'
												};
											}
										})
					]
									};
								}
							})
				]
						};
					}
				});
		temp._documentDescriptor.document = this;
		buttonBar = temp;
		mx.binding.BindingManager.executeBindings(this, 'buttonBar', buttonBar);
		return temp;
	}

	private function _GitXCodePermissionPopup_DropShadowFilter1_c():flash.filters.DropShadowFilter {
		var temp:flash.filters.DropShadowFilter = new flash.filters.DropShadowFilter();
		temp.alpha = 0.5;
		temp.angle = 90;
		temp.blurX = 0;
		temp.blurY = 7;
		temp.strength = 1;
		temp.distance = 1;
		temp.inner = true;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnAllowAccess_click(event:flash.events.MouseEvent):Void {
		onAllowAccess(event);
	}

	/**
	 * @private
	 **/
	public function __btnCancel_click(event:flash.events.MouseEvent):Void {
		closeButtonClicked(event, true);
	}

	/**
	 * @private
	 **/
	public function ___GitXCodePermissionPopup_Group1_creationComplete(event:mx.events.FlexEvent):Void {
		onJavaPathSetupPopupCreationComplete(event);
	}

}