/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      GitAuthenticationPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/GitAuthenticationPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:59 MSK
 */

package components.popup;

import mx.events.CloseEvent;
import mx.validators.Validator;
import actionScripts.valueObjects.VersionControlTypes;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.IEventDispatcher;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.styles.*;
import mx.validators.StringValidator;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.Label;
import spark.components.VGroup;

class GitAuthenticationPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _GitAuthenticationPopup_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnCommit:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbSaveAuth:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var eValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var pValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtPassword:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtUser:actionScripts.plugin.findreplace.view.PromptTextInput;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _GitAuthenticationPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_GitAuthenticationPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(GitAuthenticationPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 500;
		this.minWidth = 400;
		this.minHeight = 100;
		this.autoLayout = true;
		this.controlBarContent = [_GitAuthenticationPopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_GitAuthenticationPopup_Array2_c);
		_GitAuthenticationPopup_StringValidator1_i();
		_GitAuthenticationPopup_StringValidator2_i();

		// events
		this.addEventListener('creationComplete', ___GitAuthenticationPopup_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	public static inline var AUTH_SUBMITTED:String = 'gitAuthenticationCompleted';

	@:meta(Bindable())public var isGitAvailable:Bool = false;
	@:meta(Bindable())public var type:String;
	@:meta(Bindable())public var userName:String;

	public var userObject:Dynamic;

	private function onSubmit():Void {
		var tmpArr:Array<Dynamic> = new Array<Dynamic>();
		if (Validator.validateAll(tmpArr).length == 0) {
			userObject = {
						'userName': txtUser.text,
						'password': txtPassword.text
					};
			Reflect.setField(userObject, 'save', cbSaveAuth.selected);

			dispatchEvent(new Event(AUTH_SUBMITTED));
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
		}
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _GitAuthenticationPopup_StringValidator1_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'eValidator');
		eValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'eValidator', eValidator);
		return temp;
	}

	private function _GitAuthenticationPopup_StringValidator2_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'pValidator');
		pValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'pValidator', pValidator);
		return temp;
	}

	private function _GitAuthenticationPopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Submit';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btnCommit_click);
		temp.id = 'btnCommit';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnCommit = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnCommit', btnCommit);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnCommit_click(event:flash.events.MouseEvent):Void {
		onSubmit();
	}

	private function _GitAuthenticationPopup_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_GitAuthenticationPopup_VGroup1_c()];
		return cast temp;
	}

	private function _GitAuthenticationPopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 12;
		temp.paddingTop = 9;
		temp.paddingRight = 12;
		temp.mxmlContent = [_GitAuthenticationPopup_PromptTextInput1_i(), _GitAuthenticationPopup_PromptTextInput2_i(), _GitAuthenticationPopup_CheckBox1_i(), _GitAuthenticationPopup_Label1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitAuthenticationPopup_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.prompt = 'User Name';
		temp.id = 'txtUser';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtUser = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtUser', txtUser);
		return temp;
	}

	private function _GitAuthenticationPopup_PromptTextInput2_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Password';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.displayAsPassword = true;
		temp.addEventListener('enter', __txtPassword_enter);
		temp.id = 'txtPassword';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtPassword = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtPassword', txtPassword);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtPassword_enter(event:mx.events.FlexEvent):Void {
		onSubmit();
	}

	private function _GitAuthenticationPopup_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Save until Moonshine exits';
		temp.id = 'cbSaveAuth';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbSaveAuth = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbSaveAuth', cbSaveAuth);
		return temp;
	}

	private function _GitAuthenticationPopup_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'You need Git installed on your system to continue.';
		temp.percentWidth = 100.0;
		temp.setStyle('textAlign', 'center');
		temp.setStyle('color', 16711680);
		temp.id = '_GitAuthenticationPopup_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_GitAuthenticationPopup_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_GitAuthenticationPopup_Label1', _GitAuthenticationPopup_Label1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___GitAuthenticationPopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		txtUser.setFocus();
	}

	//  binding mgmt
	private function _GitAuthenticationPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'eValidator.source', 'txtUser');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'eValidator.trigger', 'btnCommit');

		result[2] = new mx.binding.Binding(this,
				null,
				null,
				'pValidator.source', 'txtPassword');

		result[3] = new mx.binding.Binding(this,
				null,
				null,
				'pValidator.trigger', 'btnCommit');

		result[4] = new mx.binding.Binding(this,
				function():Bool {
					return (isGitAvailable || type == Std.string(VersionControlTypes.SVN));
				},
				null,
				'btnCommit.enabled');

		result[5] = new mx.binding.Binding(this,
				null,
				null,
				'txtUser.text', 'userName');

		result[6] = new mx.binding.Binding(this,
				function():Bool {
					return (type == Std.string(VersionControlTypes.GIT) && !isGitAvailable);
				},
				null,
				'_GitAuthenticationPopup_Label1.includeInLayout');

		result[7] = new mx.binding.Binding(this,
				function():Bool {
					return (type == Std.string(VersionControlTypes.GIT) && !isGitAvailable);
				},
				null,
				'_GitAuthenticationPopup_Label1.visible');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(GitAuthenticationPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}