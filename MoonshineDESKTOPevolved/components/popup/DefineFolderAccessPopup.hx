/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      DefineFolderAccessPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/DefineFolderAccessPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:14:00 MSK
 */

package components.popup;

import mx.collections.ArrayCollection;
import mx.controls.Alert;
import mx.core.IVisualElement;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.events.ResizeEvent;
import mx.graphics.SolidColorStroke;
import spark.components.Label;
import spark.primitives.Line;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;
import actionScripts.plugin.settings.vo.ISetting;
import actionScripts.plugin.settings.vo.PluginSetting;
import actionScripts.plugin.settings.vo.StaticLabelSetting;
import actionScripts.plugin.templating.settings.renderer.PathAccessRenderer;
import actionScripts.plugins.as3project.exporter.FlashBuilderExporter;
import actionScripts.plugins.as3project.exporter.FlashDevelopExporter;
import actionScripts.ui.IContentWindow;
import actionScripts.utils.OSXBookmarkerNotifiers;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.FileWrapper;

import actionScripts.ui.divider.BasicHDividedBox;
import actionScripts.ui.renderers.GenericTreeItemRenderer;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Canvas;
import mx.controls.Tree;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.HGroup;
import spark.components.Scroller;
import spark.components.VGroup;

class DefineFolderAccessPopup extends mx.containers.Canvas implements actionScripts.ui.IContentWindow implements mx.binding.IBindingClient {

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var pathContent:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var tree:mx.controls.Tree;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var vgContents1:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var vgContents2:spark.components.VGroup;

	private var _documentDescriptor_:mx.core.UIComponentDescriptor;

	/**
	 * @private
	 **/
	public function new() {
		this._documentDescriptor_ =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.Canvas,
					'propertiesFactory': function():Dynamic {
						return {
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': actionScripts.ui.divider.BasicHDividedBox,
								'stylesFactory': function():Void {
									this.paddingLeft = 12;
									this.paddingTop = 24;
									this.paddingBottom = 24;
									this.paddingRight = 12;
								},
								'propertiesFactory': function():Dynamic {
									return {
										'percentWidth': 100.0,
										'percentHeight': 100.0,
										'childDescriptors': [
										new mx.core.UIComponentDescriptor({
											'type': spark.components.VGroup,
											'id': 'vgContents1',
											'propertiesFactory': function():Dynamic {
												return {
													'percentWidth': 50.0,
													'percentHeight': 100.0,
													'paddingRight': 20,
													'mxmlContent': [this._DefineFolderAccessPopup_Tree1_i(), this._DefineFolderAccessPopup_HGroup1_c()]
												};
											}
										}),
										new mx.core.UIComponentDescriptor({
											'type': spark.components.VGroup,
											'id': 'vgContents2',
											'propertiesFactory': function():Dynamic {
												return {
													'percentWidth': 50.0,
													'percentHeight': 100.0,
													'paddingLeft': 20,
													'mxmlContent': [this._DefineFolderAccessPopup_Scroller1_c()]
												};
											}
										})
					]
									};
								}
							})
				]
						};
					}
				});
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _DefineFolderAccessPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_DefineFolderAccessPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(DefineFolderAccessPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.label = 'Access Manager';
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		// events
		this.addEventListener('creationComplete', ___DefineFolderAccessPopup_Canvas1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	private var _requisitePaths:Array<ISetting>;

	@:meta(Bindable())private var projectFolders:ArrayCollection = new ArrayCollection();
	@:meta(Bindable())private var bigMessage:String = 'The Mac OS App Sandbox prevents Moonshine from accessing files that you have never opened. The files listed below are required for some action to run in Moonshine. To allow access to a directory, click "Add", navigate to the directory and click "Open".\n\nGranting access to a folder also grants access to all subfolders and files. If you add access to a common workspace directory (using the "Add Access" button), you maybe able to resolve multiple dependencies at once.';

	private var model:IDEModel = IDEModel.getInstance();
	private var workspaceWrapper:FileWrapper;

	public var requisitePaths(get, set):Array<ISetting>;
	private function get_requisitePaths():Array<ISetting> {
		return cast _requisitePaths;
	}

	private function set_requisitePaths(value:Array<ISetting>):Array<ISetting> {
		_requisitePaths = cast value;
		updateDependenciesPaths();
		return value;
	}

	private function onCreationCompletes(event:FlexEvent):Void {
		updateUI();
		updateBookmarkedPaths();
		updateDependenciesPaths();
	}

	private function updateUI():Void {
		var ps:PluginSetting = new PluginSetting('Accessible Paths', ConstantsCoreVO.MOONSHINE_IDE_LABEL + ' Project Team', 'Moonshine currently has access to the following directories. You may add more access as desired.', false);
		vgContents1.addElementAt(ps.renderer, 0);

		ps = new PluginSetting('Unaccessible Dependencies', '', bigMessage, false);
		vgContents2.addElementAt(ps.renderer, 0);
	}

	private function updateBookmarkedPaths():Void {
		// # Available bookmarked item list parse
		// ====================================================
		var tmpBookmarkedPaths:Array<Dynamic> = OSXBookmarkerNotifiers.availableBookmarkedPathsArr;

		if (tmpBookmarkedPaths != null && tmpBookmarkedPaths.length >= 1) {
			if (AS3.as(OSXBookmarkerNotifiers.workspaceLocation, Bool) && AS3.as(OSXBookmarkerNotifiers.workspaceLocation.fileBridge.exists, Bool)) {
				var tmpFindIndex:Int = AS3.int(Lambda.indexOf(tmpBookmarkedPaths, OSXBookmarkerNotifiers.workspaceLocation.fileBridge.nativePath));
				if (tmpFindIndex != -1) {
					var tmpWorkspaceLocation:FileLocation = new FileLocation(tmpBookmarkedPaths.splice(tmpFindIndex, 1));
					workspaceWrapper = new FileWrapper(tmpWorkspaceLocation, true, null, false);
					workspaceWrapper.defaultName = 'Workspace';
					workspaceWrapper.children = [];
					projectFolders.addItem(workspaceWrapper);
				}
			}

			for (i in 0...tmpBookmarkedPaths.length) {
				addNewPathToAccessList(new FileLocation(tmpBookmarkedPaths[i]));
			}

			if (projectFolders.length == 0) {
				OSXBookmarkerNotifiers.removeFlashCookies();
			}
		}
	}

	private function updateDependenciesPaths():Void {
		// # Resources that may needs access parse
		// ====================================================
		if (requisitePaths != null && pathContent != null) {
			// continue
			pathContent.removeAllElements();

			// in case of no project opened scenario
			if (requisitePaths.length == 0) {
				var naMessage:Label = new Label();
				naMessage.percentWidth = 100;
				naMessage.maxDisplayedLines = 2;
				naMessage.styleName = 'uiTextSettingsValue';
				naMessage.setStyle('textAlign', 'center');
				naMessage.setStyle('paddingTop', 50);
				naMessage.text = 'No dependency found.';
				pathContent.addElement(naMessage);

				return;
			}

			var line:Line;
			var rdr:IVisualElement;
			line = new Line();
			line.percentWidth = 100;
			line.height = 1;
			line.stroke = new SolidColorStroke(0xdadada);
			pathContent.addElement(line);

			for (setting in requisitePaths) {
				rdr = setting.renderer;
				rdr.addEventListener(PathAccessRenderer.EVENT_REFRESH, handleRefreshSettings, false, 0, true);
				pathContent.addElement(rdr);

				line = new Line();
				line.percentWidth = 100;
				line.height = 1;
				line.stroke = new SolidColorStroke(0xdadada);
				pathContent.addElement(line);
			}
		}
	}

	private function addNewPathToAccessList(value:FileLocation):Void {
		// lets limit the list addition to folder only
		if (AS3.as(value.fileBridge.exists, Bool) && !AS3.as(value.fileBridge.isDirectory, Bool)) {
			return;
		}

		var tmpFW:FileWrapper = new FileWrapper(value, true, null, false);
		tmpFW.defaultName = tmpFW.file.fileBridge.name;
		tmpFW.children = [];
		if (workspaceWrapper != null && (tmpFW.file.fileBridge.nativePath.indexOf(workspaceWrapper.file.fileBridge.nativePath) != -1)) {
			workspaceWrapper.children.push(tmpFW);
		} else {
			projectFolders.addItem(tmpFW);
		}
	}

	private function handleRefreshSettings(event:Event):Void {
		var renderer:PathAccessRenderer = AS3.as(event.target, PathAccessRenderer);

		renderer.removeEventListener(PathAccessRenderer.EVENT_REFRESH, handleRefreshSettings);
		var elementIndex:Int = AS3.int(pathContent.getElementIndex(AS3.as(renderer, IVisualElement)));
		pathContent.removeElementAt(elementIndex);
		pathContent.removeElementAt(elementIndex);// this will remove the line beneath

		// remove from list of items
		var i:Int = 0;

		while (i < requisitePaths.length) {
			if (Std.is(requisitePaths[i], StaticLabelSetting)) {
				requisitePaths.splice(i, 1);
				i--;
			} else if (requisitePaths[i].renderer == event.target) {
				requisitePaths.splice(i, 1);
				i--;
				break;
			}
			i++;
		}

		// adds new path to access list if only folder type
		var tmpNewFL:FileLocation = renderer.setting.originalPath;
		OSXBookmarkerNotifiers.availableBookmarkedPaths += ',' + tmpNewFL.fileBridge.nativePath;
		if (AS3.as(tmpNewFL.fileBridge.isDirectory, Bool)) {
			addNewPathToAccessList(tmpNewFL);
			callLater(tree.invalidateList);
		}

		// update application properties file
		if ((Std.is(renderer.setting.project, AS3ProjectVO)) &&
			AS3.as((AS3.as(renderer.setting.project, AS3ProjectVO)).air, Bool)) {
			if (AS3.as((AS3.as(renderer.setting.project, AS3ProjectVO)).isFlashBuilderProject, Bool)) {
				var settingsFile:File = (AS3.as(renderer.setting.project.folderLocation.fileBridge.getFile, File)).resolvePath('.actionScriptProperties');
				FlashBuilderExporter.export(AS3.as(renderer.setting.project, AS3ProjectVO), settingsFile);
			} else {
				FlashDevelopExporter.export(AS3.as(renderer.setting.project, AS3ProjectVO), renderer.setting.project.projectFile);
			}
		}

		// we need to show a re-build button in the interface if all
		// dependency problems been taken cared
		if (requisitePaths.length == 0) {
			pathContent.removeAllElements();
			pathContent.gap = 10;

			var completionMess:Label = new Label();
			completionMess.percentWidth = 100;
			completionMess.maxDisplayedLines = 2;
			completionMess.styleName = 'uiTextSettingsValue';
			completionMess.setStyle('textAlign', 'center');
			completionMess.setStyle('paddingTop', 50);
			completionMess.text = 'All dependencies have resolved. You can re-build the project now.';

			pathContent.addElement(completionMess);
		}
	}

	private function onAddNewAccess(event:MouseEvent):Void {
		model.fileCore.browseForDirectory('Select directory', openNewAccess, newAccessCancelled);
	}

	private function openNewAccess(fileDir:Dynamic):Void {
		var tmpNewLocation:FileLocation = ((Std.is(fileDir, FileLocation))) ? AS3.as(fileDir, FileLocation) : new FileLocation(Reflect.field(fileDir, 'nativePath'));
		addNewPathToAccessList(tmpNewLocation);

		callLater(tree.invalidateList);
	}

	private function newAccessCancelled():Void {}

	private function getTreeTooltip(item:Dynamic):String {
		if (!AS3.as(FileWrapper(item).isRoot, Bool)) {
			return null;
		}
		return Std.string(FileWrapper(item).file.fileBridge.nativePath);
	}

	private function getTrimmedPath(item:Dynamic):String {
		var thisWidthChar:Int = Math.floor(tree.width / 8);
		var availableWidthByChar:Int = thisWidthChar - 8;

		var value:String = Std.string(FileWrapper(item).file.fileBridge.nativePath);
		if (value.length > availableWidthByChar) {
			var lastPart:String = Std.string(value.substring(value.length - (availableWidthByChar - 4)));
			return '....' + lastPart;
		}

		return value;
	}

	public var longLabel(get, never):String;
	private function get_longLabel():String {
		return Std.string(label);
	}

	public function isChanged():Bool {
		return false;
	}

	public function isEmpty():Bool {
		return false;
	}

	public function save():Void {}

	private function onResizeList(event:ResizeEvent):Void {
		tree.invalidateList();
	}

	private function onRemoveAllAccess(event:MouseEvent):Void {
		function revokeConfirmHandler(event2:CloseEvent):Void {
			if (event2.detail == Alert.YES) {
				/* AS3HX WARNING namespace modifier CONFIG::OSX */{
					model.fileCore.getSSBInterface().disposeKeys();
				}

				// remove local holdings
				OSXBookmarkerNotifiers.availableBookmarkedPaths = '';
				projectFolders.removeAll();
				OSXBookmarkerNotifiers.removeFlashCookies();
			}
		}; /*
		 * @local
		 */
		Alert.show('Revoking all access may cause your projects behave unexpectedly.\nAre you sure you want to revoke?', 'Warning!', Alert.YES | Alert.NO, this, revokeConfirmHandler);
	}

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___DefineFolderAccessPopup_Canvas1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes(event);
	}

	private function _DefineFolderAccessPopup_Tree1_i():mx.controls.Tree {
		var temp:mx.controls.Tree = new mx.controls.Tree();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.rowHeight = 18;
		temp.doubleClickEnabled = true;
		temp.labelField = 'name';
		temp.labelFunction = getTrimmedPath;
		temp.itemRenderer = _DefineFolderAccessPopup_ClassFactory1_c();
		temp.showDataTips = true;
		temp.dataTipFunction = getTreeTooltip;
		temp.setStyle('color', 15658734);
		temp.setStyle('contentBackgroundColor', 0);
		temp.setStyle('rollOverColor', 3750201);
		temp.setStyle('selectionColor', 12674488);
		temp.setStyle('alternatingItemColors', [4473924, 5065804]);
		temp.setStyle('verticalScrollBarStyleName', 'black');
		temp.setStyle('borderVisible', false);
		temp.setStyle('useRollOver', true);
		temp.addEventListener('resize', __tree_resize);
		temp.id = 'tree';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		tree = temp;
		mx.binding.BindingManager.executeBindings(this, 'tree', tree);
		return temp;
	}

	private function _DefineFolderAccessPopup_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = actionScripts.ui.renderers.GenericTreeItemRenderer;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __tree_resize(event:mx.events.ResizeEvent):Void {
		onResizeList(event);
	}

	private function _DefineFolderAccessPopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_DefineFolderAccessPopup_Button1_c(), _DefineFolderAccessPopup_Button2_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineFolderAccessPopup_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Add Access';
		temp.styleName = 'lightButton';
		temp.width = 160;
		temp.addEventListener('click', ___DefineFolderAccessPopup_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___DefineFolderAccessPopup_Button1_click(event:flash.events.MouseEvent):Void {
		onAddNewAccess(event);
	}

	private function _DefineFolderAccessPopup_Button2_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Revoke All Access';
		temp.styleName = 'lightButton';
		temp.addEventListener('click', ___DefineFolderAccessPopup_Button2_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___DefineFolderAccessPopup_Button2_click(event:flash.events.MouseEvent):Void {
		onRemoveAllAccess(event);
	}

	private function _DefineFolderAccessPopup_Scroller1_c():spark.components.Scroller {
		var temp:spark.components.Scroller = new spark.components.Scroller();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.viewport = _DefineFolderAccessPopup_VGroup3_i();
		temp.setStyle('verticalScrollPolicy', 'auto');
		temp.setStyle('horizontalScrollPolicy', 'off');
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineFolderAccessPopup_VGroup3_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.gap = 0;
		temp.horizontalAlign = 'center';
		temp.id = 'pathContent';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		pathContent = temp;
		mx.binding.BindingManager.executeBindings(this, 'pathContent', pathContent);
		return temp;
	}

	//  binding mgmt
	private function _DefineFolderAccessPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Dynamic {
					return (projectFolders);
				},
				null,
				'tree.dataProvider');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(DefineFolderAccessPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}