/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      ManageRepositoriesPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/ManageRepositoriesPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:58 MSK
 */

package components.popup;

import mx.collections.ArrayCollection;
import spark.events.GridEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.plugins.git.GitHubPlugin;
import actionScripts.plugins.svn.SVNPlugin;
import actionScripts.plugins.versionControl.event.VersionControlEvent;
import actionScripts.utils.SharedObjectUtil;
import actionScripts.valueObjects.RepositoryItemVO;
import actionScripts.valueObjects.VersionControlTypes;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.containers.RepositoryBrowser;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.ArrayList;
import mx.collections.IList;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.states.AddItems;
import mx.states.State;
import mx.styles.*;
import spark.components.Button;
import spark.components.DataGrid;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.VGroup;
import spark.components.gridClasses.GridColumn;

import spark.layouts.VerticalLayout;

@:meta(States(name = 'default', name = 'browse'))
class ManageRepositoriesPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	/**
	 * @private
	 **/
	public var _ManageRepositoriesPopup_Button2:spark.components.Button;

	/**
	 * @private
	 **/
	public var _ManageRepositoriesPopup_Button3:spark.components.Button;

	/**
	 * @private
	 **/
	public var _ManageRepositoriesPopup_Button4:spark.components.Button;

	/**
	 * @private
	 **/
	public var _ManageRepositoriesPopup_Button5:spark.components.Button;

	/**
	 * @private
	 **/
	public var _ManageRepositoriesPopup_Button8:spark.components.Button;

	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _ManageRepositoriesPopup_HGroup1:spark.components.HGroup;

	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _ManageRepositoriesPopup_HGroup2:spark.components.HGroup;

	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _ManageRepositoriesPopup_VGroup1:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var dgRepositories:spark.components.DataGrid;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var repoBrowser:components.containers.RepositoryBrowser;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _ManageRepositoriesPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_ManageRepositoriesPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(ManageRepositoriesPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.minHeight = 300;
		this.minWidth = 300;
		this.layout = _ManageRepositoriesPopup_VerticalLayout1_c();
		this.controlBarContent = [];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_ManageRepositoriesPopup_Array5_c);
		this.currentState = 'default';

		// events

		var _ManageRepositoriesPopup_HGroup1_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ManageRepositoriesPopup_HGroup1_i);
		var _ManageRepositoriesPopup_HGroup2_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ManageRepositoriesPopup_HGroup2_i);
		var _ManageRepositoriesPopup_RepositoryBrowser1_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ManageRepositoriesPopup_RepositoryBrowser1_i);
		var _ManageRepositoriesPopup_VGroup1_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ManageRepositoriesPopup_VGroup1_i);

		states = [
				new State({
					'name': 'default',
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _ManageRepositoriesPopup_VGroup1_factory,
								'destination': null,
								'position': 'first'
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _ManageRepositoriesPopup_HGroup1_factory,
								'destination': null,
								'propertyName': 'controlBarContent',
								'position': 'first'
							})
			]
				}),
				new State({
					'name': 'browse',
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _ManageRepositoriesPopup_RepositoryBrowser1_factory,
								'destination': null,
								'position': 'first'
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _ManageRepositoriesPopup_HGroup2_factory,
								'destination': null,
								'propertyName': 'controlBarContent',
								'position': 'first'
							})
			]
				})
		];

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	@:meta(Bindable())public var repositories:ArrayCollection;

	private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();

	private function onItemEdit():Void {
		// let's open item-edit window
		dispatcher.dispatchEvent(new VersionControlEvent(VersionControlEvent.OPEN_ADD_REPOSITORY, dgRepositories.selectedItem));
	}

	private function onNewRepositoryRequest(event:MouseEvent):Void {
		dispatcher.dispatchEvent(new VersionControlEvent(VersionControlEvent.OPEN_ADD_REPOSITORY));
	}

	private function onRepositoryDelete(event:MouseEvent):Void {
		repositories.removeItem(dgRepositories.selectedItem);
		SharedObjectUtil.saveRepositoriesToSO(repositories);
	}

	private function onBrowseRepository(selectedRepository:RepositoryItemVO = null):Void {
		currentState = 'browse';
		this.title = 'Browse';

		repoBrowser.setRepositories((selectedRepository != null) ? cast [selectedRepository] : repositories.source);
	}

	private function onBack(event:MouseEvent):Void {
		repoBrowser.onBackEvent();
		currentState = 'default';
		this.title = 'Manage Repositories';
	}

	private function onCheckoutRequest(event:MouseEvent):Void {
		var repositoryItem:Dynamic = ((currentState == 'default')) ? dgRepositories.selectedItem : repoBrowser.selectedItem;
		if (Reflect.field(repositoryItem, 'type') == VersionControlTypes.GIT) {
			dispatcher.dispatchEvent(new VersionControlEvent(GitHubPlugin.CLONE_REQUEST, repositoryItem));
		} else {
			dispatcher.dispatchEvent(new VersionControlEvent(SVNPlugin.CHECKOUT_REQUEST, repositoryItem));
		}
	}

	private function onItemDoubleClicked(event:GridEvent):Void {
		onBrowseRepository(AS3.as(dgRepositories.selectedItem, RepositoryItemVO));
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _ManageRepositoriesPopup_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.paddingLeft = 12;
		temp.paddingBottom = 6;
		temp.paddingTop = 9;
		temp.horizontalAlign = 'left';
		temp.paddingRight = 12;
		return temp;
	}

	private function _ManageRepositoriesPopup_HGroup1_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_ManageRepositoriesPopup_Button1_c(), _ManageRepositoriesPopup_Button2_i(), _ManageRepositoriesPopup_Button3_i(), _ManageRepositoriesPopup_Button4_i(), _ManageRepositoriesPopup_Button5_i(), _ManageRepositoriesPopup_Spacer1_c(), _ManageRepositoriesPopup_Button6_c()];
		temp.id = '_ManageRepositoriesPopup_HGroup1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ManageRepositoriesPopup_HGroup1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ManageRepositoriesPopup_HGroup1', _ManageRepositoriesPopup_HGroup1);
		return temp;
	}

	private function _ManageRepositoriesPopup_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = '+';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___ManageRepositoriesPopup_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ManageRepositoriesPopup_Button1_click(event:flash.events.MouseEvent):Void {
		onNewRepositoryRequest(event);
	}

	private function _ManageRepositoriesPopup_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = '-';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___ManageRepositoriesPopup_Button2_click);
		temp.id = '_ManageRepositoriesPopup_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ManageRepositoriesPopup_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ManageRepositoriesPopup_Button2', _ManageRepositoriesPopup_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ManageRepositoriesPopup_Button2_click(event:flash.events.MouseEvent):Void {
		onRepositoryDelete(event);
	}

	private function _ManageRepositoriesPopup_Button3_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Edit';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___ManageRepositoriesPopup_Button3_click);
		temp.id = '_ManageRepositoriesPopup_Button3';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ManageRepositoriesPopup_Button3 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ManageRepositoriesPopup_Button3', _ManageRepositoriesPopup_Button3);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ManageRepositoriesPopup_Button3_click(event:flash.events.MouseEvent):Void {
		onItemEdit();
	}

	private function _ManageRepositoriesPopup_Button4_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___ManageRepositoriesPopup_Button4_click);
		temp.id = '_ManageRepositoriesPopup_Button4';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ManageRepositoriesPopup_Button4 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ManageRepositoriesPopup_Button4', _ManageRepositoriesPopup_Button4);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ManageRepositoriesPopup_Button4_click(event:flash.events.MouseEvent):Void {
		onCheckoutRequest(event);
	}

	private function _ManageRepositoriesPopup_Button5_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Browse';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___ManageRepositoriesPopup_Button5_click);
		temp.id = '_ManageRepositoriesPopup_Button5';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ManageRepositoriesPopup_Button5 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ManageRepositoriesPopup_Button5', _ManageRepositoriesPopup_Button5);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ManageRepositoriesPopup_Button5_click(event:flash.events.MouseEvent):Void {
		onBrowseRepository(AS3.as(dgRepositories.selectedItem, RepositoryItemVO));
	}

	private function _ManageRepositoriesPopup_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ManageRepositoriesPopup_Button6_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Browse All';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___ManageRepositoriesPopup_Button6_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ManageRepositoriesPopup_Button6_click(event:flash.events.MouseEvent):Void {
		onBrowseRepository();
	}

	private function _ManageRepositoriesPopup_HGroup2_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_ManageRepositoriesPopup_Button7_c(), _ManageRepositoriesPopup_Spacer2_c(), _ManageRepositoriesPopup_Button8_i()];
		temp.id = '_ManageRepositoriesPopup_HGroup2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ManageRepositoriesPopup_HGroup2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ManageRepositoriesPopup_HGroup2', _ManageRepositoriesPopup_HGroup2);
		return temp;
	}

	private function _ManageRepositoriesPopup_Button7_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Back';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___ManageRepositoriesPopup_Button7_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ManageRepositoriesPopup_Button7_click(event:flash.events.MouseEvent):Void {
		onBack(event);
	}

	private function _ManageRepositoriesPopup_Spacer2_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ManageRepositoriesPopup_Button8_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___ManageRepositoriesPopup_Button8_click);
		temp.id = '_ManageRepositoriesPopup_Button8';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ManageRepositoriesPopup_Button8 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ManageRepositoriesPopup_Button8', _ManageRepositoriesPopup_Button8);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ManageRepositoriesPopup_Button8_click(event:flash.events.MouseEvent):Void {
		onCheckoutRequest(event);
	}

	private function _ManageRepositoriesPopup_Array5_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [];
		return temp;
	}

	private function _ManageRepositoriesPopup_VGroup1_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.gap = 10;
		temp.mxmlContent = [_ManageRepositoriesPopup_Label1_c(), _ManageRepositoriesPopup_DataGrid1_i()];
		temp.id = '_ManageRepositoriesPopup_VGroup1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ManageRepositoriesPopup_VGroup1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ManageRepositoriesPopup_VGroup1', _ManageRepositoriesPopup_VGroup1);
		return temp;
	}

	private function _ManageRepositoriesPopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Add a repository or select one to manage:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ManageRepositoriesPopup_DataGrid1_i():spark.components.DataGrid {
		var temp:spark.components.DataGrid = new spark.components.DataGrid();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.sortableColumns = false;
		temp.variableRowHeight = true;
		temp.doubleClickMode = 'row';
		temp.doubleClickEnabled = true;
		temp.rowHeight = 24;
		temp.columns = _ManageRepositoriesPopup_ArrayList1_c();
		temp.addEventListener('gridDoubleClick', __dgRepositories_gridDoubleClick);
		temp.id = 'dgRepositories';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		dgRepositories = temp;
		mx.binding.BindingManager.executeBindings(this, 'dgRepositories', dgRepositories);
		return temp;
	}

	private function _ManageRepositoriesPopup_ArrayList1_c():mx.collections.ArrayList {
		var temp:mx.collections.ArrayList = new mx.collections.ArrayList();
		temp.source = [_ManageRepositoriesPopup_GridColumn1_c(), _ManageRepositoriesPopup_GridColumn2_c(), _ManageRepositoriesPopup_GridColumn3_c()];
		return temp;
	}

	private function _ManageRepositoriesPopup_GridColumn1_c():spark.components.gridClasses.GridColumn {
		var temp:spark.components.gridClasses.GridColumn = new spark.components.gridClasses.GridColumn();
		temp.dataField = 'url';
		temp.headerText = 'Repository';
		return temp;
	}

	private function _ManageRepositoriesPopup_GridColumn2_c():spark.components.gridClasses.GridColumn {
		var temp:spark.components.gridClasses.GridColumn = new spark.components.gridClasses.GridColumn();
		temp.dataField = 'userName';
		temp.headerText = 'User';
		temp.width = 200;
		return temp;
	}

	private function _ManageRepositoriesPopup_GridColumn3_c():spark.components.gridClasses.GridColumn {
		var temp:spark.components.gridClasses.GridColumn = new spark.components.gridClasses.GridColumn();
		temp.dataField = 'notes';
		temp.headerText = 'Notes';
		return temp;
	}

	/**
	 * @private
	 **/
	public function __dgRepositories_gridDoubleClick(event:spark.events.GridEvent):Void {
		onItemDoubleClicked(event);
	}

	private function _ManageRepositoriesPopup_RepositoryBrowser1_i():components.containers.RepositoryBrowser {
		var temp:components.containers.RepositoryBrowser = new components.containers.RepositoryBrowser();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.id = 'repoBrowser';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		repoBrowser = temp;
		mx.binding.BindingManager.executeBindings(this, 'repoBrowser', repoBrowser);
		return temp;
	}

	//  binding mgmt
	private function _ManageRepositoriesPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(dgRepositories.selectedItem, Bool));
				},
				null,
				'_ManageRepositoriesPopup_Button2.enabled');

		result[1] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(dgRepositories.selectedItem, Bool));
				},
				null,
				'_ManageRepositoriesPopup_Button3.enabled');

		result[2] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (((AS3.as(dgRepositories.selectedItem, Bool) && dgRepositories.selectedItem.type == VersionControlTypes.GIT)) ? 'Clone' : 'Checkout');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_ManageRepositoriesPopup_Button4.label');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(dgRepositories.selectedItem, Bool));
				},
				null,
				'_ManageRepositoriesPopup_Button4.enabled');

		result[4] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(dgRepositories.selectedItem, Bool));
				},
				null,
				'_ManageRepositoriesPopup_Button5.enabled');

		result[5] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (((AS3.as(repoBrowser.selectedItem, Bool) && Reflect.field(repoBrowser.selectedItem, 'type') == VersionControlTypes.GIT)) ? 'Clone' : 'Checkout');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_ManageRepositoriesPopup_Button8.label');

		result[6] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(repoBrowser.selectedItem, Bool) && (Reflect.field(repoBrowser.selectedItem, 'type') == VersionControlTypes.GIT || AS3.as(Reflect.field(repoBrowser.selectedItem, 'children'), Bool)));
				},
				null,
				'_ManageRepositoriesPopup_Button8.enabled');

		result[7] = new mx.binding.Binding(this,
				null,
				null,
				'dgRepositories.dataProvider', 'repositories');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(ManageRepositoriesPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}