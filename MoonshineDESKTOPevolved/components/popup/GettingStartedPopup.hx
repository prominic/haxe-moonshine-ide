/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      GettingStartedPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/GettingStartedPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:59 MSK
 */

package components.popup;

import mx.controls.Alert;
import mx.events.FlexEvent;
import actionScripts.events.GeneralEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.HelperEvent;
import actionScripts.events.StartupHelperEvent;
import actionScripts.interfaces.IHelperMoonshineBridge;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.settings.vo.PluginSetting;
import actionScripts.plugins.git.GitHubPlugin;
import actionScripts.ui.IContentWindow;
import actionScripts.utils.EnvironmentUtils;
import actionScripts.utils.HelperUtils;
import actionScripts.utils.MSDKIdownloadUtil;
import actionScripts.utils.PathSetupHelperUtil;
import actionScripts.valueObjects.ComponentTypes;
import actionScripts.valueObjects.ComponentVO;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.FileWrapper;
import actionScripts.valueObjects.HelperConstants;
import air.update.events.DownloadErrorEvent;

import components.HelperView;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.graphics.SolidColor;
import mx.styles.*;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Image;
import spark.components.Label;
import spark.components.VGroup;
import spark.primitives.Rect;

class GettingStartedPopup extends spark.components.Group implements actionScripts.ui.IContentWindow implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _GettingStartedPopup_Image1:spark.components.Image;

	/**
	 * @private
	 **/
	public var _GettingStartedPopup_Label1:spark.components.Label;

	/**
	 * @private
	 **/
	public var _GettingStartedPopup_Label2:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var body:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbDNS:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var viewHelper:components.HelperView;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _GettingStartedPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_GettingStartedPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(GettingStartedPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.mxmlContent = [_GettingStartedPopup_Rect1_c(), _GettingStartedPopup_VGroup1_i(), _GettingStartedPopup_HGroup1_c()];

		// events
		this.addEventListener('initialize', ___GettingStartedPopup_Group1_initialize);
		this.addEventListener('creationComplete', ___GettingStartedPopup_Group1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	private static inline var LABEL:String = 'Getting Started';

	public var dependencyCheckUtil:IHelperMoonshineBridge;
	public var environmentUtil:EnvironmentUtils;

	@:meta(Bindable())private var sdkInstallerInstallingMess:String;

	private var model:IDEModel = IDEModel.getInstance();
	private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
	private var msdkiDownloadUtil:MSDKIdownloadUtil = MSDKIdownloadUtil.getInstance();
	private var workspaceWrapper:FileWrapper;
	private var progressTimer:Timer;

	//--------------------------------------------------------------------------
	//
	//  INTERFACE API
	//
	//--------------------------------------------------------------------------

	public var longLabel(get, never):String;
	private function get_longLabel():String {
		return LABEL;
	}

	public var label(get, never):String;
	private function get_label():String {
		return LABEL;
	}

	public function isChanged():Bool {
		return false;
	}

	public function isEmpty():Bool {
		return false;
	}

	public function save():Void {}

	//--------------------------------------------------------------------------
	//
	//  PUBLIC API
	//
	//--------------------------------------------------------------------------

	public function onInvokeEvent(componentId:String, path:String = null):Void {
		if (AS3.as(viewHelper.isConfigurationLoaded, Bool)) {
			viewHelper.updateComponentStatusAsDownloaded(componentId, path);
		} else {
			PathSetupHelperUtil.updateFieldPath(componentId, path);
		}
	}

	public function dispose():Void {
		stopMessageAnimateProcess();
		addRemoveInstallerDownloadEvents(false);
	}

	//--------------------------------------------------------------------------
	//
	//  PRIVATE API
	//
	//--------------------------------------------------------------------------

	private function onInitialized(event:FlexEvent):Void {
		viewHelper.dependencyCheckUtil = dependencyCheckUtil;
		viewHelper.environmentUtil = environmentUtil;
	}

	private function onCreationCompletes():Void {
		updateUI();
	}

	private function updateUI():Void {
		cbDNS.selected = ConstantsCoreVO.IS_GETTING_STARTED_DNS;

		var ps:PluginSetting = new PluginSetting(ConstantsCoreVO.MOONSHINE_IDE_LABEL + ' is Installed. What\'s Next?', ConstantsCoreVO.MOONSHINE_IDE_LABEL + ' Project Team', 'Moonshine includes an extensive set of features by default. Some optional features (shown below) require access to third-party software. If you already have the third-party software installed, press the Configure button, otherwise press Download button.', false);
		body.addElementAt(ps.renderer, 0);
	}

	//--------------------------------------------------------------------------
	//
	//  PRIVATE LISTENERS
	//
	//--------------------------------------------------------------------------

	private function runAppStoreHelper(event:HelperEvent):Void {
		if (!AS3.as(ConstantsCoreVO.IS_MACOS, Bool)) {
			if (!msdkiDownloadUtil.is64BitSDKInstallerExists()) {
				addRemoveInstallerDownloadEvents(true);
				startMessageAnimateProcess();
			} else {
				sdkInstallerInstallingMess = 'Moonshine SDK Installer requested. This may take a few seconds.';
			}
		}

		msdkiDownloadUtil.runOrDownloadSDKInstaller();
	}

	private function onOpenSettings(event:HelperEvent):Void {
		var component:ComponentVO = AS3.as(event.value, ComponentVO);
		if ((component.type == ComponentTypes.TYPE_GIT || component.type == ComponentTypes.TYPE_SVN) &&
			AS3.as(ConstantsCoreVO.IS_MACOS, Bool)) {
			var gitComponent:ComponentVO = HelperUtils.getComponentByType(ComponentTypes.TYPE_GIT);
			var svnComponent:ComponentVO = HelperUtils.getComponentByType(ComponentTypes.TYPE_SVN);

			dispatcher.dispatchEvent(new Event(GitHubPlugin.RELAY_SVN_XCODE_REQUEST));
			gitComponent.hasWarning = svnComponent.hasWarning = null;
		} else {
			PathSetupHelperUtil.openSettingsViewFor(Std.string(component.type));
		}
	}

	private function onAnyComponentDownloaded(event:HelperEvent):Void {
		// autoset moonshine internal fields as appropriate
		var component:ComponentVO = AS3.as(event.value, ComponentVO);
		PathSetupHelperUtil.updateFieldPath(Std.string(component.type), Std.string(component.installToPath));
	}

	private function onUnzipCompleted(event:GeneralEvent):Void {
		stopMessageAnimateProcess();
		addRemoveInstallerDownloadEvents(false);
	}

	private function onSDKInstallerDownloadError(event:DownloadErrorEvent):Void {
		addRemoveInstallerDownloadEvents(false);
		Alert.show(event.text, 'Error!');
	}

	private function addRemoveInstallerDownloadEvents(add:Bool):Void {
		if (add) {
			msdkiDownloadUtil.addEventListener(Std.string(GeneralEvent.DONE), onUnzipCompleted, false, 0, true);
			msdkiDownloadUtil.addEventListener(Std.string(DownloadErrorEvent.DOWNLOAD_ERROR), onSDKInstallerDownloadError, false, 0, true);
		} else {
			msdkiDownloadUtil.removeEventListener(Std.string(GeneralEvent.DONE), onUnzipCompleted);
			msdkiDownloadUtil.removeEventListener(Std.string(DownloadErrorEvent.DOWNLOAD_ERROR), onSDKInstallerDownloadError);
		}
	}

	private function stopMessageAnimateProcess():Void {
		if (progressTimer != null) {
			if (AS3.as(progressTimer.running, Bool)) {
				progressTimer.stop();
			}
			progressTimer.removeEventListener(TimerEvent.TIMER, onTimerTick);
		}
		sdkInstallerInstallingMess = null;
		progressTimer = null;
	}

	private function startMessageAnimateProcess():Void {
		stopMessageAnimateProcess();

		sdkInstallerInstallingMess = 'Moonshine SDK Installer is downloading. Please wait.';
		progressTimer = new Timer(1000);
		progressTimer.addEventListener(TimerEvent.TIMER, onTimerTick);
		progressTimer.start();
	}

	private function onTimerTick(event:TimerEvent):Void {
		if (sdkInstallerInstallingMess.lastIndexOf('..') == -1) {
			sdkInstallerInstallingMess += '.';
		} else {
			sdkInstallerInstallingMess = StringTools.replace(sdkInstallerInstallingMess, '..', '.');
		}
	}

	private function onRefreshRequest(event:MouseEvent):Void {
		viewHelper.checkForUpdate();
	}

	private function onDNSchange(event:Event):Void {
		ConstantsCoreVO.IS_GETTING_STARTED_DNS = cbDNS.selected;
		dispatcher.dispatchEvent(new StartupHelperEvent(StartupHelperEvent.EVENT_DNS_GETTING_STARTED));
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _GettingStartedPopup_Rect1_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.fill = _GettingStartedPopup_SolidColor1_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _GettingStartedPopup_SolidColor1_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 16119285;
		return temp;
	}

	private function _GettingStartedPopup_VGroup1_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.paddingLeft = 12;
		temp.paddingTop = 24;
		temp.paddingBottom = 12;
		temp.paddingRight = 12;
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_GettingStartedPopup_Button1_c(), _GettingStartedPopup_Label1_i(), _GettingStartedPopup_HelperView1_i(), _GettingStartedPopup_CheckBox1_i()];
		temp.id = 'body';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		body = temp;
		mx.binding.BindingManager.executeBindings(this, 'body', body);
		return temp;
	}

	private function _GettingStartedPopup_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Download Third-party Software';
		temp.styleName = 'greyButton';
		temp.addEventListener('click', ___GettingStartedPopup_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___GettingStartedPopup_Button1_click(event:flash.events.MouseEvent):Void {
		runAppStoreHelper(null);
	}

	private function _GettingStartedPopup_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'smallText';
		temp.setStyle('paddingBottom', 10);
		temp.id = '_GettingStartedPopup_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_GettingStartedPopup_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_GettingStartedPopup_Label1', _GettingStartedPopup_Label1);
		return temp;
	}

	private function _GettingStartedPopup_HelperView1_i():components.HelperView {
		var temp:components.HelperView = new components.HelperView();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.isRunningInsideMoonshine = true;
		temp.addEventListener('DOWNLOAD_COMPONENT', __viewHelper_DOWNLOAD_COMPONENT);
		temp.addEventListener('OPEN_MOON_SETTINGS', __viewHelper_OPEN_MOON_SETTINGS);
		temp.addEventListener('COMPONENT_DOWNLOADED', __viewHelper_COMPONENT_DOWNLOADED);
		temp.id = 'viewHelper';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		viewHelper = temp;
		mx.binding.BindingManager.executeBindings(this, 'viewHelper', viewHelper);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __viewHelper_DOWNLOAD_COMPONENT(event:actionScripts.events.HelperEvent):Void {
		runAppStoreHelper(event);
	}

	/**
	 * @private
	 **/
	public function __viewHelper_OPEN_MOON_SETTINGS(event:actionScripts.events.HelperEvent):Void {
		onOpenSettings(event);
	}

	/**
	 * @private
	 **/
	public function __viewHelper_COMPONENT_DOWNLOADED(event:actionScripts.events.HelperEvent):Void {
		onAnyComponentDownloaded(event);
	}

	private function _GettingStartedPopup_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Do not show this tab on startup';
		temp.addEventListener('change', __cbDNS_change);
		temp.id = 'cbDNS';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbDNS = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbDNS', cbDNS);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __cbDNS_change(event:flash.events.Event):Void {
		onDNSchange(event);
	}

	private function _GettingStartedPopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.verticalAlign = 'middle';
		temp.horizontalAlign = 'right';
		temp.top = 10;
		temp.right = 10;
		temp.mxmlContent = [_GettingStartedPopup_Label2_i(), _GettingStartedPopup_Image1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GettingStartedPopup_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Updating..';
		temp.styleName = 'uiText';
		temp.setStyle('fontSize', 12);
		temp.id = '_GettingStartedPopup_Label2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_GettingStartedPopup_Label2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_GettingStartedPopup_Label2', _GettingStartedPopup_Label2);
		return temp;
	}

	private function _GettingStartedPopup_Image1_i():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = _embed_mxml__assets_images_icoRefreshGettingStarted_png_1295810882;
		temp.buttonMode = true;
		temp.toolTip = 'Refresh List';
		temp.addEventListener('click', ___GettingStartedPopup_Image1_click);
		temp.id = '_GettingStartedPopup_Image1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_GettingStartedPopup_Image1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_GettingStartedPopup_Image1', _GettingStartedPopup_Image1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___GettingStartedPopup_Image1_click(event:flash.events.MouseEvent):Void {
		onRefreshRequest(event);
	}

	/**
	 * @private
	 **/
	public function ___GettingStartedPopup_Group1_initialize(event:mx.events.FlexEvent):Void {
		onInitialized(event);
	}

	/**
	 * @private
	 **/
	public function ___GettingStartedPopup_Group1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes();
	}

	//  binding mgmt
	private function _GettingStartedPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (sdkInstallerInstallingMess);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_GettingStartedPopup_Label1.text');

		result[1] = new mx.binding.Binding(this,
				function():Bool {
					return (sdkInstallerInstallingMess != null);
				},
				null,
				'_GettingStartedPopup_Label1.includeInLayout');

		result[2] = new mx.binding.Binding(this,
				function():Bool {
					return (sdkInstallerInstallingMess != null);
				},
				null,
				'_GettingStartedPopup_Label1.visible');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(HelperConstants.IS_DETECTION_IN_PROCESS, Bool));
				},
				null,
				'_GettingStartedPopup_Label2.visible');

		result[4] = new mx.binding.Binding(this,
				function():Bool {
					return (!AS3.as(HelperConstants.IS_DETECTION_IN_PROCESS, Bool));
				},
				null,
				'_GettingStartedPopup_Image1.enabled');

		result[5] = new mx.binding.Binding(this,
				function():Float {
					return ((AS3.as(HelperConstants.IS_DETECTION_IN_PROCESS, Bool)) ? .6 : 1);
				},
				null,
				'_GettingStartedPopup_Image1.alpha');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(GettingStartedPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	@:meta(Embed(source = '/assets/images/icoRefreshGettingStarted.png'))
	private var _embed_mxml__assets_images_icoRefreshGettingStarted_png_1295810882:Class<Dynamic>;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}