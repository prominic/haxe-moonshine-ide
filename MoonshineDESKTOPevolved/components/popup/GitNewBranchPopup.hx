/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      GitNewBranchPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/GitNewBranchPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:59 MSK
 */

package components.popup;

import mx.controls.Alert;
import mx.events.CloseEvent;
import mx.validators.Validator;
import actionScripts.events.GeneralEvent;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.IEventDispatcher;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.styles.*;
import mx.validators.StringValidator;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.Label;
import spark.components.VGroup;

class GitNewBranchPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _GitNewBranchPopup_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnCommit:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbPush:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblMess:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var sValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtName:actionScripts.plugin.findreplace.view.PromptTextInput;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _GitNewBranchPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_GitNewBranchPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(GitNewBranchPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 500;
		this.minWidth = 400;
		this.minHeight = 100;
		this.autoLayout = true;
		this.controlBarContent = [_GitNewBranchPopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_GitNewBranchPopup_Array2_c);
		_GitNewBranchPopup_StringValidator1_i();

		// events
		this.addEventListener('creationComplete', ___GitNewBranchPopup_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	public static inline var VALIDATE_NAME:String = 'validateName';

	@:meta(Bindable())public var isGitAvailable:Bool = false;

	public var submitObject:Dynamic;

	public function onNameValidatedByGit(value:String):Void {
		function showError():Void {
			lblMess.text = value;
			lblMess.setStyle('color', 0xff0000);
			lblMess.includeInLayout = lblMess.visible = true;
		};
		function onContinue(event:CloseEvent):Void {
			if (event.detail == Alert.YES) {
				submitObject = {
							'name': txtName.text,
							'pushToRemote': cbPush.selected
						};
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
		};
		value = StringTools.replace(value, '\n', '');
		var match:Array<Dynamic> = as3hx.Compat.match(value, new as3hx.Compat.Regex('fatal: .*', ''));
		if (match != null) {
			showError(value);
			return;
		}
		match = as3hx.Compat.match(value.toLowerCase(), new as3hx.Compat.Regex('was unexpected at this time', ''));
		if (match != null) {
			showError(value);
			return;
		}

		lblMess.includeInLayout = lblMess.visible = false; /*
		 * @local
		 */  /*
		 * @local
		 */
		Alert.show('Branch name validated successfully:\n"' + value + '"\nDo you want to continue?', 'Validation', Alert.YES | Alert.NO, this, onContinue);
	}

	private function onSubmit():Void {
		// was unexpected at this time
		// fatal:

		var tmpArr:Array<Dynamic> = new Array<Dynamic>();
		if (Validator.validateAll(tmpArr).length == 0) {
			lblMess.text = 'Validating..';
			lblMess.setStyle('color', 0xFFBF0F);
			lblMess.includeInLayout = lblMess.visible = true;

			dispatchEvent(new GeneralEvent(VALIDATE_NAME, txtName.text));
		}
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _GitNewBranchPopup_StringValidator1_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'sValidator');
		sValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'sValidator', sValidator);
		return temp;
	}

	private function _GitNewBranchPopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Create Branch';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btnCommit_click);
		temp.id = 'btnCommit';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnCommit = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnCommit', btnCommit);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnCommit_click(event:flash.events.MouseEvent):Void {
		onSubmit();
	}

	private function _GitNewBranchPopup_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_GitNewBranchPopup_VGroup1_c()];
		return cast temp;
	}

	private function _GitNewBranchPopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.mxmlContent = [_GitNewBranchPopup_PromptTextInput1_i(), _GitNewBranchPopup_CheckBox1_i(), _GitNewBranchPopup_Label1_i(), _GitNewBranchPopup_Label2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitNewBranchPopup_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.prompt = 'New Branch Name';
		temp.addEventListener('enter', __txtName_enter);
		temp.id = 'txtName';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtName = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtName', txtName);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtName_enter(event:mx.events.FlexEvent):Void {
		onSubmit();
	}

	private function _GitNewBranchPopup_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Push newly created branch to remote';
		temp.selected = true;
		temp.id = 'cbPush';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbPush = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbPush', cbPush);
		return temp;
	}

	private function _GitNewBranchPopup_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'You need Git installed on your system to continue.';
		temp.percentWidth = 100.0;
		temp.setStyle('textAlign', 'center');
		temp.setStyle('color', 16711680);
		temp.id = '_GitNewBranchPopup_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_GitNewBranchPopup_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_GitNewBranchPopup_Label1', _GitNewBranchPopup_Label1);
		return temp;
	}

	private function _GitNewBranchPopup_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.percentWidth = 100.0;
		temp.maxDisplayedLines = 3;
		temp.includeInLayout = false;
		temp.visible = false;
		temp.id = 'lblMess';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblMess = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblMess', lblMess);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___GitNewBranchPopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		txtName.setFocus();
	}

	//  binding mgmt
	private function _GitNewBranchPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'sValidator.source', 'txtName');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'sValidator.trigger', 'btnCommit');

		result[2] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = 'a-zA-Z0-9`!@#$%()_+=' + ('') + '\';.\\-\\/\\&';
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'txtName.restrict');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (!isGitAvailable);
				},
				null,
				'_GitNewBranchPopup_Label1.visible');

		result[4] = new mx.binding.Binding(this,
				function():Bool {
					return (!isGitAvailable);
				},
				null,
				'_GitNewBranchPopup_Label1.includeInLayout');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(GitNewBranchPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}