/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      GitCommitSelectionPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/popup/GitCommitSelectionPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:59 MSK
 */

package components.popup;

import mx.collections.ArrayCollection;
import mx.controls.Alert;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.validators.Validator;
import actionScripts.plugins.git.model.GitProjectVO;
import actionScripts.valueObjects.GenericSelectableObject;
import actionScripts.valueObjects.VersionControlTypes;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.popup.GitCommitSelectionPopupInnerClass0;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.IEventDispatcher;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.DropShadowFilter;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import flashx.textLayout.elements.BreakElement;
import flashx.textLayout.elements.LinkElement;
import flashx.textLayout.elements.ParagraphElement;
import flashx.textLayout.elements.SpanElement;
import flashx.textLayout.elements.TextFlow;
import flashx.textLayout.events.FlowElementMouseEvent;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.containers.HBox;
import mx.controls.HRule;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.graphics.SolidColor;
import mx.styles.*;
import mx.validators.StringValidator;
import spark.components.BorderContainer;
import spark.components.BusyIndicator;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.List;
import spark.components.RichEditableText;
import spark.components.TextArea;
import spark.components.VGroup;

class GitCommitSelectionPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var biBusy:spark.components.BusyIndicator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var bodyInstruction:spark.components.BorderContainer;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnCommit:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var buttonBar:mx.containers.HBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var buttonBarLine:mx.controls.HRule;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var hgAuthor:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var hgTitle:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblAuthor:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblMessage:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lstFiles:spark.components.List;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var sValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtMessage:spark.components.TextArea;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _GitCommitSelectionPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_GitCommitSelectionPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(GitCommitSelectionPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 600;
		this.height = 400;
		this.minWidth = 300;
		this.minHeight = 200;
		this.controlBarContent = [_GitCommitSelectionPopup_CheckBox1_c(), _GitCommitSelectionPopup_Spacer1_c(), _GitCommitSelectionPopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_GitCommitSelectionPopup_Array2_c);
		_GitCommitSelectionPopup_StringValidator1_i();

		// events
		this.addEventListener('creationComplete', ___GitCommitSelectionPopup_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	public static inline var TYPE_COMMIT:String = 'typeCommit';
	public static inline var TYPE_REVERT:String = 'typeRevert';
	public static inline var GET_AUTHOR:String = 'getGitAuthor';

	@:meta(Bindable())public var filesCount:Int = 0;
	@:meta(Bindable())public var isGitAvailable:Bool = false;
	@:meta(Bindable())public var commitDiffCollection:ArrayCollection;
	@:meta(Bindable())public var windowType:String = Std.string(VersionControlTypes.GIT);

	public var type:String = TYPE_COMMIT;
	public var isSubmit:Bool = false;
	public var commitMessage:String;

	public function onGitAuthorDetection(value:GitProjectVO):Void {
		lblAuthor.text = 'Author: ' + ((value.sessionUserName != null) ? value.sessionUserName : '<Default>') + ' (' + ((value.sessionUserEmail != null) ? value.sessionUserEmail : '<Default>') + ')';
	}

	public var isReadyToUse(never, set):Bool;
	private function set_isReadyToUse(value:Bool):Bool {
		if (value) {
			hgTitle.removeElement(biBusy);
			btnCommit.enabled = true;
		}
		return value;
	}

	private function onCreationCompletes(event:FlexEvent):Void {
		btnCommit.label = ((type == TYPE_COMMIT)) ? 'Commit Selected' : 'Revert Selected';
		if (type == TYPE_REVERT) {
			lstFiles.percentHeight = 100;
			txtMessage.includeInLayout = txtMessage.visible = false;
			lblMessage.includeInLayout = lblMessage.visible = false;
			hgAuthor.includeInLayout = hgAuthor.visible = false;
		}
	}

	private function onSubmit():Void {
		// check if any selection exists
		if (!hasSelectionToChanges()) {
			Alert.show('There is nothing to commit.', 'Note!');
			return;
		}

		if (type == TYPE_COMMIT) {
			var tmpArr:Array<Dynamic> = new Array<Dynamic>();
			if (Validator.validateAll(tmpArr).length != 0) {
				return;
			}
		}

		isSubmit = true;
		commitMessage = Std.string(txtMessage.text);
		dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
	}

	private function getResourceName(item:Dynamic):String {
		return (Std.string((AS3.as(item, GenericSelectableObject)).data.path));
	}

	private function onSelectAllChange(event:Event):Void {
		var isSelected:Bool = AS3.as(Reflect.field(event.target, 'selected'), Bool);
		for (i in commitDiffCollection) {
			Reflect.setField(i, 'isSelected', isSelected);
		}
	}

	private function hasSelectionToChanges():Bool {
		for (i in commitDiffCollection) {
			if (AS3.as(Reflect.field(i, 'isSelected'), Bool)) {
				return true;
			}
		}

		return false;
	}

	private function onAuthorSetMessage(value:Bool):Void {
		bodyInstruction.includeInLayout = bodyInstruction.visible = value;
	}

	private function openSetAuthorInsLink():Void {
		flash.Lib.getURL(new URLRequest('https://help.github.com/articles/setting-your-commit-email-address-in-git/'), 'blank');
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _GitCommitSelectionPopup_StringValidator1_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'sValidator');
		sValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'sValidator', sValidator);
		return temp;
	}

	private function _GitCommitSelectionPopup_CheckBox1_c():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Select/Deselect All';
		temp.setStyle('color', 16777215);
		temp.addEventListener('change', ___GitCommitSelectionPopup_CheckBox1_change);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___GitCommitSelectionPopup_CheckBox1_change(event:flash.events.Event):Void {
		onSelectAllChange(event);
	}

	private function _GitCommitSelectionPopup_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitCommitSelectionPopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Commit Selected';
		temp.styleName = 'darkButton';
		temp.enabled = false;
		temp.addEventListener('click', __btnCommit_click);
		temp.id = 'btnCommit';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnCommit = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnCommit', btnCommit);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnCommit_click(event:flash.events.MouseEvent):Void {
		onSubmit();
	}

	private function _GitCommitSelectionPopup_Array2_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [_GitCommitSelectionPopup_VGroup1_c(), _GitCommitSelectionPopup_BorderContainer1_i()];
		return temp;
	}

	private function _GitCommitSelectionPopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 9;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.mxmlContent = [_GitCommitSelectionPopup_HGroup1_i(), _GitCommitSelectionPopup_List1_i(), _GitCommitSelectionPopup_HGroup2_i(), _GitCommitSelectionPopup_TextArea1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitCommitSelectionPopup_HGroup1_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_GitCommitSelectionPopup_Label1_i(), _GitCommitSelectionPopup_Spacer2_c(), _GitCommitSelectionPopup_BusyIndicator1_i()];
		temp.id = 'hgTitle';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		hgTitle = temp;
		mx.binding.BindingManager.executeBindings(this, 'hgTitle', hgTitle);
		return temp;
	}

	private function _GitCommitSelectionPopup_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Select file(s) to continue:';
		temp.setStyle('paddingBottom', 4);
		temp.id = 'lblMessage';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblMessage = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblMessage', lblMessage);
		return temp;
	}

	private function _GitCommitSelectionPopup_Spacer2_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitCommitSelectionPopup_BusyIndicator1_i():spark.components.BusyIndicator {
		var temp:spark.components.BusyIndicator = new spark.components.BusyIndicator();
		temp.id = 'biBusy';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		biBusy = temp;
		mx.binding.BindingManager.executeBindings(this, 'biBusy', biBusy);
		return temp;
	}

	private function _GitCommitSelectionPopup_List1_i():spark.components.List {
		var temp:spark.components.List = new spark.components.List();
		temp.percentWidth = 100.0;
		temp.percentHeight = 70.0;
		temp.styleName = 'multiLineList';
		temp.requireSelection = true;
		temp.itemRenderer = _GitCommitSelectionPopup_ClassFactory1_c();
		temp.id = 'lstFiles';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lstFiles = temp;
		mx.binding.BindingManager.executeBindings(this, 'lstFiles', lstFiles);
		return temp;
	}

	private function _GitCommitSelectionPopup_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.popup.GitCommitSelectionPopupInnerClass0;
		temp.properties = {
					'outerDocument': this
				};
		return temp;
	}

	private function _GitCommitSelectionPopup_HGroup2_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.paddingTop = 4;
		temp.clipAndEnableScrolling = false;
		temp.mxmlContent = [_GitCommitSelectionPopup_Label2_i(), _GitCommitSelectionPopup_Label3_c()];
		temp.id = 'hgAuthor';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		hgAuthor = temp;
		mx.binding.BindingManager.executeBindings(this, 'hgAuthor', hgAuthor);
		return temp;
	}

	private function _GitCommitSelectionPopup_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.id = 'lblAuthor';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblAuthor = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblAuthor', lblAuthor);
		return temp;
	}

	private function _GitCommitSelectionPopup_Label3_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'How can I change this?';
		temp.buttonMode = true;
		temp.setStyle('color', 8461112);
		temp.addEventListener('creationComplete', ___GitCommitSelectionPopup_Label3_creationComplete);
		temp.addEventListener('click', ___GitCommitSelectionPopup_Label3_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___GitCommitSelectionPopup_Label3_creationComplete(event:mx.events.FlexEvent):Void {
		event.target.setStyle('textDecoration', 'underline');
	}

	/**
	 * @private
	 **/
	public function ___GitCommitSelectionPopup_Label3_click(event:flash.events.MouseEvent):Void {
		onAuthorSetMessage(true);
	}

	private function _GitCommitSelectionPopup_TextArea1_i():spark.components.TextArea {
		var temp:spark.components.TextArea = new spark.components.TextArea();
		temp.percentWidth = 100.0;
		temp.percentHeight = 30.0;
		temp.prompt = 'Commit message..';
		temp.id = 'txtMessage';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtMessage = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtMessage', txtMessage);
		return temp;
	}

	private function _GitCommitSelectionPopup_BorderContainer1_i():spark.components.BorderContainer {
		var temp:spark.components.BorderContainer = new spark.components.BorderContainer();
		temp.width = 500;
		temp.height = 200;
		temp.autoLayout = true;
		temp.horizontalCenter = 0;
		temp.verticalCenter = 0;
		temp.includeInLayout = false;
		temp.visible = false;
		temp.backgroundFill = _GitCommitSelectionPopup_SolidColor1_c();
		temp.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_GitCommitSelectionPopup_Array6_c);
		temp.setStyle('cornerRadius', 6);
		temp.setStyle('borderColor', 2960685);
		temp.id = 'bodyInstruction';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		bodyInstruction = temp;
		mx.binding.BindingManager.executeBindings(this, 'bodyInstruction', bodyInstruction);
		return temp;
	}

	private function _GitCommitSelectionPopup_SolidColor1_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 10526880;
		return temp;
	}

	private function _GitCommitSelectionPopup_Array6_c():Array<Dynamic> {
		var temp:Array<Group> = [_GitCommitSelectionPopup_Group1_c()];
		return cast temp;
	}

	private function _GitCommitSelectionPopup_Group1_c():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.mxmlContent = [_GitCommitSelectionPopup_RichEditableText1_c(), _GitCommitSelectionPopup_HRule1_i(), _GitCommitSelectionPopup_HBox1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitCommitSelectionPopup_RichEditableText1_c():spark.components.RichEditableText {
		var temp:spark.components.RichEditableText = new spark.components.RichEditableText();
		temp.editable = false;
		temp.focusEnabled = false;
		temp.percentWidth = 90.0;
		temp.horizontalCenter = 0;
		temp.verticalCenter = -20;
		temp.textFlow = _GitCommitSelectionPopup_TextFlow1_c();
		temp.setStyle('fontSize', 13);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _GitCommitSelectionPopup_TextFlow1_c():flashx.textLayout.elements.TextFlow {
		var temp:flashx.textLayout.elements.TextFlow = new flashx.textLayout.elements.TextFlow();
		temp.mxmlChildren = ['\n\t\t\t\t\t\t', _GitCommitSelectionPopup_ParagraphElement1_c(), '\n\t\t\t\t\t'];
		temp.initialized(this, null);
		return temp;
	}

	private function _GitCommitSelectionPopup_ParagraphElement1_c():flashx.textLayout.elements.ParagraphElement {
		var temp:flashx.textLayout.elements.ParagraphElement = new flashx.textLayout.elements.ParagraphElement();
		temp.mxmlChildren = ['See ', _GitCommitSelectionPopup_LinkElement1_c(), ' for instructions on changing the user name and email for your commit.', _GitCommitSelectionPopup_BreakElement1_c(), _GitCommitSelectionPopup_BreakElement2_c(), 'NOTE: The macOS version of Moonshine does not have access to the global configuration file for ', _GitCommitSelectionPopup_SpanElement1_c(), '. You will need to define your name and email for each project.'];
		temp.initialized(this, null);
		return temp;
	}

	private function _GitCommitSelectionPopup_LinkElement1_c():flashx.textLayout.elements.LinkElement {
		var temp:flashx.textLayout.elements.LinkElement = new flashx.textLayout.elements.LinkElement();
		temp.mxmlChildren = ['this page'];
		temp.addEventListener('click', ___GitCommitSelectionPopup_LinkElement1_click);
		temp.initialized(this, null);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___GitCommitSelectionPopup_LinkElement1_click(event:flashx.textLayout.events.FlowElementMouseEvent):Void {
		openSetAuthorInsLink();
	}

	private function _GitCommitSelectionPopup_BreakElement1_c():flashx.textLayout.elements.BreakElement {
		var temp:flashx.textLayout.elements.BreakElement = new flashx.textLayout.elements.BreakElement();
		temp.initialized(this, null);
		return temp;
	}

	private function _GitCommitSelectionPopup_BreakElement2_c():flashx.textLayout.elements.BreakElement {
		var temp:flashx.textLayout.elements.BreakElement = new flashx.textLayout.elements.BreakElement();
		temp.initialized(this, null);
		return temp;
	}

	private function _GitCommitSelectionPopup_SpanElement1_c():flashx.textLayout.elements.SpanElement {
		var temp:flashx.textLayout.elements.SpanElement = new flashx.textLayout.elements.SpanElement();
		temp.fontStyle = 'italic';
		temp.mxmlChildren = ['git'];
		temp.initialized(this, null);
		return temp;
	}

	private function _GitCommitSelectionPopup_HRule1_i():mx.controls.HRule {
		var temp:mx.controls.HRule = new mx.controls.HRule();
		temp.percentWidth = 100.0;
		temp.bottom = 41;
		temp.setStyle('strokeWidth', 1);
		temp.setStyle('strokeColor', 3158064);
		temp.id = 'buttonBarLine';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		buttonBarLine = temp;
		mx.binding.BindingManager.executeBindings(this, 'buttonBarLine', buttonBarLine);
		return temp;
	}

	@:access(mx.containers.HBox) private function _GitCommitSelectionPopup_HBox1_i():mx.containers.HBox {
		var temp:mx.containers.HBox = new mx.containers.HBox();
		temp.percentWidth = 100.0;
		temp.height = 41;
		temp.bottom = 0;
		temp.filters = [_GitCommitSelectionPopup_DropShadowFilter1_c()];
		temp.setStyle('backgroundColor', 4473924);
		temp.setStyle('paddingRight', 10);
		temp.setStyle('paddingTop', 0);
		temp.setStyle('horizontalAlign', 'center');
		temp.setStyle('verticalAlign', 'middle');
		temp.id = 'buttonBar';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		temp._documentDescriptor =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.HBox,
					'id': 'buttonBar',
					'propertiesFactory': function():Dynamic {
						return {
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': mx.containers.HBox,
								'propertiesFactory': function():Dynamic {
									return {
										'autoLayout': true,
										'childDescriptors': [
										new mx.core.UIComponentDescriptor({
											'type': spark.components.Button,
											'events': {
												'click': '___GitCommitSelectionPopup_Button2_click'
											},
											'propertiesFactory': function():Dynamic {
												return {
													'label': 'OK',
													'styleName': 'darkButton'
												};
											}
										})
					]
									};
								}
							})
				]
						};
					}
				});
		temp._documentDescriptor.document = this;
		buttonBar = temp;
		mx.binding.BindingManager.executeBindings(this, 'buttonBar', buttonBar);
		return temp;
	}

	private function _GitCommitSelectionPopup_DropShadowFilter1_c():flash.filters.DropShadowFilter {
		var temp:flash.filters.DropShadowFilter = new flash.filters.DropShadowFilter();
		temp.alpha = 0.5;
		temp.angle = 90;
		temp.blurX = 0;
		temp.blurY = 7;
		temp.strength = 1;
		temp.distance = 1;
		temp.inner = true;
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___GitCommitSelectionPopup_Button2_click(event:flash.events.MouseEvent):Void {
		onAuthorSetMessage(false);
	}

	/**
	 * @private
	 **/
	public function ___GitCommitSelectionPopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes(event);
	}

	//  binding mgmt
	private function _GitCommitSelectionPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'sValidator.source', 'txtMessage');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'sValidator.trigger', 'btnCommit');

		result[2] = new mx.binding.Binding(this,
				null,
				null,
				'lstFiles.dataProvider', 'commitDiffCollection');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (windowType == Std.string(VersionControlTypes.GIT));
				},
				null,
				'hgAuthor.includeInLayout');

		result[4] = new mx.binding.Binding(this,
				function():Bool {
					return (windowType == Std.string(VersionControlTypes.GIT));
				},
				null,
				'hgAuthor.visible');

		result[5] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = 'a-zA-Z0-9`!@#$%()_ +=' + ('') + '\';,.?\\-\\/\\\\\\?\\"';
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'txtMessage.restrict');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(GitCommitSelectionPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}