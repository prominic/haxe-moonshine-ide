/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.skins
 *  Class:      MoonshineApplicationSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/skins/MoonshineApplicationSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:14:11 MSK
 */

package components.skins;

import components.views.other.MoonshineStatusBar;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.graphics.GradientEntry;
import mx.graphics.LinearGradient;
import mx.graphics.LinearGradientStroke;
import mx.graphics.SolidColor;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.Group;
import spark.layouts.VerticalLayout;
import spark.primitives.Rect;
import spark.skins.SparkSkin;

/**
* @copy spark.skins.spark.ApplicationSkin#hostComponent
*/
@:meta(HostComponent(name = 'Object'))
@:meta(States(name = 'normal', name = 'disabled', name = 'normalAndInactive', name = 'disabledAndInactive'))
class MoonshineApplicationSkin extends spark.skins.SparkSkin implements mx.core.IStateClient2 {

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var backgroundFill:mx.graphics.SolidColor;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var backgroundRect:spark.primitives.Rect;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var contentGroup:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var statusBar:spark.components.Group;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.mxmlContent = [_MoonshineApplicationSkin_Rect1_i(), _MoonshineApplicationSkin_Group1_c()];
		this.currentState = 'normal';

		// events

		states = [
				new State({
					'name': 'normal',
					'overrides': []
				}),
				new State({
					'name': 'disabled',
					'stateGroups': ['disabledGroup'],
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				}),
				new State({
					'name': 'normalAndInactive',
					'stateGroups': ['inactiveGroup'],
					'overrides': []
				}),
				new State({
					'name': 'disabledAndInactive',
					'stateGroups': ['inactiveGroup', 'disabledGroup'],
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				})
		];

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	/*  Define the skin elements that should not be colorized.
	*  For WindowedApplication, border and status bar background are colorized,
	*  but the content area and status text are not.
	*  Exclude the titleBar and scroller because they are SparkSkins and we
	*  don't want to colorize them twice.
	*
	* @langversion 3.0
	* @playerversion Flash 10
	* @playerversion AIR 1.5
	* @productversion Flex 4
	*/
	private static var exclusions(default, never):Array<Dynamic> = cast ['backgroundRect', 'contentGroup', 'statusText'];

	/**
	 * @private
	 */
	override private function get_colorizeExclusions():Array<Dynamic> {
		return exclusions;
	}

	/**
	 * @private
	 */
	override private function initializationComplete():Void {
		useChromeColor = true;
		super.initializationComplete();
	}

	/**
	 *  @private
	 */
	override private function updateDisplayList(unscaledWidth:Float, unscaledHeight:Float):Void {
		backgroundFill.color = getStyle('backgroundColor');
		backgroundFill.alpha = getStyle('backgroundAlpha');
		super.updateDisplayList(unscaledWidth, unscaledHeight);
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _MoonshineApplicationSkin_Rect1_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.fill = _MoonshineApplicationSkin_SolidColor1_i();
		temp.initialized(this, 'backgroundRect');
		backgroundRect = temp;
		mx.binding.BindingManager.executeBindings(this, 'backgroundRect', backgroundRect);
		return temp;
	}

	private function _MoonshineApplicationSkin_SolidColor1_i():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		backgroundFill = temp;
		mx.binding.BindingManager.executeBindings(this, 'backgroundFill', backgroundFill);
		return temp;
	}

	private function _MoonshineApplicationSkin_Group1_c():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.minHeight = 24;
		temp.minWidth = 0;
		temp.layout = _MoonshineApplicationSkin_VerticalLayout1_c();
		temp.mxmlContent = [_MoonshineApplicationSkin_Group2_i(), _MoonshineApplicationSkin_Group3_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _MoonshineApplicationSkin_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.gap = 0;
		return temp;
	}

	private function _MoonshineApplicationSkin_Group2_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.minHeight = 0;
		temp.minWidth = 0;
		temp.id = 'contentGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		contentGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'contentGroup', contentGroup);
		return temp;
	}

	private function _MoonshineApplicationSkin_Group3_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.minHeight = 24;
		temp.mxmlContent = [_MoonshineApplicationSkin_Rect2_c(), _MoonshineApplicationSkin_Rect3_c(), _MoonshineApplicationSkin_MoonshineStatusBar1_c()];
		temp.id = 'statusBar';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		statusBar = temp;
		mx.binding.BindingManager.executeBindings(this, 'statusBar', statusBar);
		return temp;
	}

	private function _MoonshineApplicationSkin_Rect2_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.fill = _MoonshineApplicationSkin_LinearGradient1_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _MoonshineApplicationSkin_LinearGradient1_c():mx.graphics.LinearGradient {
		var temp:mx.graphics.LinearGradient = new mx.graphics.LinearGradient();
		temp.rotation = 90;
		temp.entries = [_MoonshineApplicationSkin_GradientEntry1_c(), _MoonshineApplicationSkin_GradientEntry2_c()];
		return temp;
	}

	private function _MoonshineApplicationSkin_GradientEntry1_c():mx.graphics.GradientEntry {
		var temp:mx.graphics.GradientEntry = new mx.graphics.GradientEntry();
		temp.color = 14869218;
		return temp;
	}

	private function _MoonshineApplicationSkin_GradientEntry2_c():mx.graphics.GradientEntry {
		var temp:mx.graphics.GradientEntry = new mx.graphics.GradientEntry();
		temp.color = 14277081;
		return temp;
	}

	private function _MoonshineApplicationSkin_Rect3_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 1;
		temp.right = 1;
		temp.top = 1;
		temp.bottom = 0;
		temp.stroke = _MoonshineApplicationSkin_LinearGradientStroke1_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _MoonshineApplicationSkin_LinearGradientStroke1_c():mx.graphics.LinearGradientStroke {
		var temp:mx.graphics.LinearGradientStroke = new mx.graphics.LinearGradientStroke();
		temp.rotation = 90;
		temp.weight = 1;
		temp.entries = [_MoonshineApplicationSkin_GradientEntry3_c(), _MoonshineApplicationSkin_GradientEntry4_c()];
		return temp;
	}

	private function _MoonshineApplicationSkin_GradientEntry3_c():mx.graphics.GradientEntry {
		var temp:mx.graphics.GradientEntry = new mx.graphics.GradientEntry();
		temp.color = 15395562;
		return temp;
	}

	private function _MoonshineApplicationSkin_GradientEntry4_c():mx.graphics.GradientEntry {
		var temp:mx.graphics.GradientEntry = new mx.graphics.GradientEntry();
		temp.color = 12500670;
		return temp;
	}

	private function _MoonshineApplicationSkin_MoonshineStatusBar1_c():components.views.other.MoonshineStatusBar {
		var temp:components.views.other.MoonshineStatusBar = new components.views.other.MoonshineStatusBar();
		temp.top = 0;
		temp.bottom = 2;
		temp.left = 10;
		temp.right = 10;
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

}