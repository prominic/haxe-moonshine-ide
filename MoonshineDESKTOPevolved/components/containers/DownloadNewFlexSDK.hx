/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.containers
 *  Class:      DownloadNewFlexSDK
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/containers/DownloadNewFlexSDK.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:14:00 MSK
 */

package components.containers;

import mx.controls.Alert;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.ui.tabview.CloseTabEvent;
import actionScripts.utils.NoSDKNotifier;
import actionScripts.utils.SDKUtils;
import actionScripts.valueObjects.SDKReferenceVO;

import actionScripts.ui.IContentWindow;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Canvas;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.styles.*;

class DownloadNewFlexSDK extends mx.containers.Canvas implements actionScripts.ui.IContentWindow {

	private var _documentDescriptor_:mx.core.UIComponentDescriptor =
		new mx.core.UIComponentDescriptor({
			'type': mx.containers.Canvas
		});

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.label = 'Download a New SDK';
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		// events
		this.addEventListener('creationComplete', ___DownloadNewFlexSDK_Canvas1_creationComplete);

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 14408667;
				};
		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	public var selectedSDKDir:File;
	public var requestedSDKDownloadVersion:String;

	private var installerView:InstallApacheFlex;

	public var longLabel(get, never):String;
	private function get_longLabel():String {
		return Std.string(label);
	}

	public function isChanged():Bool {
		return false;
	}

	public function isEmpty():Bool {
		return false;
	}

	public function save():Void {}

	/**
	 * On creation completes
	 */
	private function initThis():Void {
		var sdksFolder:File;

		installerView = new InstallApacheFlex();
		installerView.width = 800;
		installerView.height = 700;
		installerView.horizontalCenter = installerView.verticalCenter = 0;
		installerView.addEventListener('INSTALL_FINISH', onSDKSelected, false, 0, true);
		installerView.addEventListener('INSTALL_CANCEL', onSDKInstallCancelled, false, 0, true);
		addElement(installerView);

		addEventListener(CloseTabEvent.EVENT_CLOSE_TAB, onThisClosing, false, 0, true);
	}

	private function removeListeners():Void {
		installerView.removeEventListener('INSTALL_FINISH', onSDKSelected);
		installerView.removeEventListener('INSTALL_CANCEL', onSDKInstallCancelled);
	}

	/**
	 * On SDK downloaded and selected by the user
	 */
	private function onSDKSelected(event:Event):Void {
		selectedSDKDir = AS3.as(event.target, InstallApacheFlex).getFlexPath();
		removeListeners();
		doSave(null);
	}

	/**
	 * On SDK installation cancelled
	 */
	private function onSDKInstallCancelled(event:Event):Void {
		removeListeners();
		IDEModel.getInstance().noSDKNotifier.dispatchEvent(new Event(NoSDKNotifier.SDK_SAVE_CANCELLED));
		removeElement(installerView);
		installerView = null;
		GlobalEventDispatcher.getInstance().dispatchEvent(
				new CloseTabEvent(CloseTabEvent.EVENT_CLOSE_TAB, this)
		);
	}

	private function doSave(event:Event):Void {
		// check if valid SDK directory
		var sdkDescription:SDKReferenceVO = SDKUtils.getSDKReference(new FileLocation(selectedSDKDir.nativePath));
		if (sdkDescription == null) {
			Alert.show('Not a valid SDK directory or not able to read from the source.', 'Error!');
			return;
		}

		// check if already added in saved SDKs list
		var projectRefTemp:SDKReferenceVO = SDKUtils.isSDKAlreadySaved(sdkDescription);

		if (projectRefTemp == null) {
			projectRefTemp = SDKUtils.getSDKFromSavedList(sdkDescription.name);
		}// in case of pre-existing SDK item
		IDEModel.getInstance().userSavedTempSDKPath = projectRefTemp.path;
		//GlobalEventDispatcher.getInstance().dispatchEvent(new SettingsEvent(SettingsEvent.EVENT_OPEN_SETTINGS, "actionScripts.plugins.as3project.mxmlc::MXMLCPlugin"));

		// close will close the tab
		GlobalEventDispatcher.getInstance().dispatchEvent(
				new CloseTabEvent(CloseTabEvent.EVENT_CLOSE_TAB, this)
		);
	}

	private function onThisClosing(event:Event):Void {
		removeEventListener(CloseTabEvent.EVENT_CLOSE_TAB, onThisClosing);
		if (installerView != null) {
			removeListeners();
		}
	}

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___DownloadNewFlexSDK_Canvas1_creationComplete(event:mx.events.FlexEvent):Void {
		initThis();
	}

}