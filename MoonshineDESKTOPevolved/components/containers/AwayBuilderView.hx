/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.containers
 *  Class:      AwayBuilderView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/containers/AwayBuilderView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:57 MSK
 */

package components.containers;

import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.ProjectEvent;
import actionScripts.factory.NativeMenuItemLocation;
import actionScripts.locator.IDEModel;
import actionScripts.ui.IContentWindow;
import actionScripts.ui.menu.MenuBar;
import actionScripts.ui.menu.interfaces.ICustomMenu;
import actionScripts.ui.menu.vo.CustomMenu;
import actionScripts.ui.menu.vo.CustomMenuItem;
import actionScripts.ui.menu.vo.MenuItem;
import actionScripts.ui.tabview.CloseTabEvent;
import awaybuilder.controller.events.SaveDocumentEvent;
import awaybuilder.controller.events.SceneReadyEvent;

import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.styles.*;
import spark.components.Group;

class AwayBuilderView extends spark.components.Group implements actionScripts.ui.IContentWindow {

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		// events
		this.addEventListener('creationComplete', ___AwayBuilderView_Group1_creationComplete);

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	public var currentFile:File;

	private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
	private var model:IDEModel = IDEModel.getInstance();
	private var abLib:AwayBuilderLibMain;

	private var _isChanged:Bool = false;

	/**
	 * Interface methods
	 */
	public var longLabel(get, never):String;
	private function get_longLabel():String {
		return 'Away Builder';
	}

	public var label(get, never):String;
	private function get_label():String {
		return (_isChanged) ? '*Away Builder' : 'Away Builder';
	}

	public function isChanged():Bool {
		return _isChanged;
	}

	public function isEmpty():Bool {
		return false;
	}

	public function save():Void {
		abLib.save();
	}

	/**
	 * On creation completes
	 */
	public function initThis():Void {
		dispatcher.addEventListener(ProjectEvent.REMOVE_PROJECT, handleRemoveProject, false, 0, true);

		//dispatcher.addEventListener(CloseTabEvent.EVENT_CLOSE_TAB, onThisClosing, false, 0, true);
		model.mainView.bodyPanel.setStyle('backgroundAlpha', 0);
		model.mainView.mainPanel.setStyle('backgroundAlpha', 0);
		model.mainView.mainContent.setStyle('backgroundAlpha', 0);

		var tmp:SplashScreenLib = SplashScreenLib.instance;
		tmp.attachSplashScreenTo(new Rectangle(stage.nativeWindow.x, stage.nativeWindow.y, stage.nativeWindow.width, stage.nativeWindow.height));

		var timeoutValue:Int = as3hx.Compat.setTimeout(function():Void {
					abLib = new AwayBuilderLibMain();
					abLib.percentWidth = abLib.percentHeight = 100;
					abLib.addEventListener(SceneReadyEvent.READY, onAwayBuilderReady, false, 0, true);
					abLib.addEventListener(Event.CHANGE, onAwayBuilderChanged, false, 0, true);
					abLib.addEventListener(SaveDocumentEvent.SAVE_DOCUMENT_SUCCESS, onAwayBuilderSaved, false, 0, true);
					addElement(abLib);

					var currentMenu:Dynamic = applyNewNativeMenu(abLib.menuProvider);

					var menuBar:MenuBar = new MenuBar();
					menuBar.menu = AS3.as(currentMenu, ICustomMenu);
					menuBar.percentWidth = 100;
					abLib.menu = menuBar;
					abLib.eventDispatcher = GlobalEventDispatcher.getInstance();

					as3hx.Compat.clearTimeout(timeoutValue);
				}, 1000);
	}

	public function loadAwayBuilderFile():Void {
		if (currentFile != null) {
			abLib.openFileByURL(currentFile.url, currentFile.name);
		}
	}

	private function onAwayBuilderChanged(event:Event):Void {
		_isChanged = true;
		dispatchEvent(new Event('labelChanged'));
	}

	private function onAwayBuilderSaved(event:Event):Void {
		_isChanged = false;
		dispatchEvent(new Event('labelChanged'));
	}

	private function applyNewNativeMenu(menuItems:Array<Dynamic>):Dynamic {
		var mainMenu:Dynamic = new CustomMenu();
		addMenus(menuItems, mainMenu);

		return mainMenu;
	}

	private function onAwayBuilderReady(event:Event):Void {
		abLib.removeEventListener(SceneReadyEvent.READY, onAwayBuilderReady);
		loadAwayBuilderFile();

		this.dispatchEvent(new Event(Event.COMPLETE));
	}

	private function onThisClosing(event:CloseTabEvent):Void {
		if (event.tab == this) {
			// time to remove all footprints
			abLib.removeEventListener(SceneReadyEvent.READY, onAwayBuilderReady);
			abLib.removeEventListener(Event.CHANGE, onAwayBuilderChanged);
			abLib.removeEventListener(SaveDocumentEvent.SAVE_DOCUMENT_SUCCESS, onAwayBuilderSaved);
			dispatcher.removeEventListener(CloseTabEvent.EVENT_CLOSE_TAB, onThisClosing);
			abLib.dispatchEvent(new Event(AwayBuilderLibMain.DISPOSE));
			abLib.eventDispatcher = null;
			removeElement(abLib);
			abLib = null;
			//model.mainView.bodyPanel.setStyle('backgroundAlpha', 1);
			//model.mainView.mainPanel.setStyle('backgroundAlpha', 1);
			//model.mainView.mainContent.setStyle('backgroundAlpha', 1);
		}
	}

	private function addMenus(items:Array<Dynamic>, parentMenu:Dynamic):Void {
		for (i in 0...items.length) {
			var item:Dynamic = items[i];
			if (AS3.as(item, Bool) && AS3.as(Reflect.field(item, 'children'), Bool)) {
				var newMenu:Dynamic;
				newMenu = new CustomMenu();
				if (!AS3.as(newMenu, Bool)) {
					continue;
				}
				addMenus(Reflect.field(item, 'children'), newMenu);
				parentMenu.addSubmenu(newMenu, Reflect.field(item, 'label'));
			} else if (AS3.as(item, Bool)) {
				var menuItem:Dynamic = createNewMenuItem(((Reflect.field(item, 'type') != 'separator')) ? item : new MenuItem(null));
				if (AS3.as(menuItem, Bool)) {
					parentMenu.addItem(((Std.is(menuItem, NativeMenuItemLocation))) ? NativeMenuItemLocation(menuItem).item.getNativeMenuItem : menuItem);
				}
			}
		}
	}

	private function createNewMenuItem(item:Dynamic):Dynamic {
		var menuItem:CustomMenuItem;

		menuItem = new CustomMenuItem(Reflect.field(item, 'label'), Reflect.field(item, 'isSeparator'));
		if (AS3.as(Reflect.field(item, 'label'), Bool)) {
			menuItem.data = {
						'eventData': item,
						'event': 'awayBuilderMenuEvent'
					};
		}

		return menuItem;
	}

	private function handleRemoveProject(event:ProjectEvent):Void {
		// in case of close project lets init editor with blank document
		abLib.openNewDocument(false);
		onAwayBuilderSaved(null);
	}

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___AwayBuilderView_Group1_creationComplete(event:mx.events.FlexEvent):Void {
		initThis();
	}

}