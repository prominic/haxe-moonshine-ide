/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.containers
 *  Class:      TourDeHTMLLinkDisplay
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/containers/TourDeHTMLLinkDisplay.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:59 MSK
 */

package components.containers;

import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.graphics.SolidColor;
import mx.styles.*;
import spark.components.Button;
import spark.components.Group;
import spark.components.Label;
import spark.components.VGroup;
import spark.primitives.Rect;

class TourDeHTMLLinkDisplay extends spark.components.Group {

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.mxmlContent = [_TourDeHTMLLinkDisplay_Rect1_c(), _TourDeHTMLLinkDisplay_VGroup1_c()];

		// events

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	public var htmlSource:String;

	private function onOpenLink(event:MouseEvent):Void {
		if (htmlSource != null && (StringTools.trim(htmlSource).length > 0)) {
			flash.Lib.getURL(new URLRequest(htmlSource));
		}
	}

	//  supporting function definitions for properties, events, styles, effects
	private function _TourDeHTMLLinkDisplay_Rect1_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.top = 0;
		temp.left = 0;
		temp.right = 0;
		temp.bottom = 0;
		temp.fill = _TourDeHTMLLinkDisplay_SolidColor1_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _TourDeHTMLLinkDisplay_SolidColor1_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 16777215;
		return temp;
	}

	private function _TourDeHTMLLinkDisplay_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.autoLayout = true;
		temp.horizontalAlign = 'center';
		temp.horizontalCenter = 0;
		temp.verticalCenter = 0;
		temp.mxmlContent = [_TourDeHTMLLinkDisplay_Label1_c(), _TourDeHTMLLinkDisplay_Button1_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _TourDeHTMLLinkDisplay_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'This example needs to open in browser.';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _TourDeHTMLLinkDisplay_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Open in browser';
		temp.addEventListener('click', ___TourDeHTMLLinkDisplay_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___TourDeHTMLLinkDisplay_Button1_click(event:flash.events.MouseEvent):Void {
		onOpenLink(event);
	}

}