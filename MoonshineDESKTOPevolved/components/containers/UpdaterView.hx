/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.containers
 *  Class:      UpdaterView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineDESKTOPevolved/src/components/containers/UpdaterView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:13:57 MSK
 */

package components.containers;

import actionScripts.extResources.riaspace.nativeApplicationUpdater.NativeApplicationUpdater;

import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.ProgressBar;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.graphics.SolidColor;
import mx.styles.*;
import spark.components.BorderContainer;
import spark.components.Button;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Image;
import spark.components.Label;
import spark.components.VGroup;
import spark.layouts.VerticalLayout;
import spark.primitives.Rect;

@:meta(Event(name = 'UPDATEYES'))
@:meta(Event(name = 'UPDATENO'))
@:meta(Event(name = 'UPDATECANCEL'))
class UpdaterView extends spark.components.Group implements mx.binding.IBindingClient {

	/**
	 * @private
	 **/
	public var _UpdaterView_Button1:spark.components.Button;

	/**
	 * @private
	 **/
	public var _UpdaterView_Button2:spark.components.Button;

	/**
	 * @private
	 **/
	public var _UpdaterView_Label2:spark.components.Label;

	/**
	 * @private
	 **/
	public var _UpdaterView_VGroup2:spark.components.VGroup;

	/**
	 * @private
	 **/
	public var _UpdaterView_VGroup3:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var bodyContainer:spark.components.BorderContainer;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var prgBar:mx.controls.ProgressBar;

	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _UpdaterView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_containers_UpdaterViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(UpdaterView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.mxmlContent = [_UpdaterView_Rect1_c(), _UpdaterView_BorderContainer1_i()];

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//--------------------------------------------------------------------------
	//
	//  PUBLIC VARIABLES
	//
	//--------------------------------------------------------------------------

	@:meta(Bindable())public var downlaoding:Bool = false;
	@:meta(Bindable())public var updater:NativeApplicationUpdater;
	@:meta(Bindable())public var isAppStoreVersion:Bool = false;

	//  supporting function definitions for properties, events, styles, effects
	private function _UpdaterView_Rect1_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.fill = _UpdaterView_SolidColor1_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _UpdaterView_SolidColor1_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 0;
		temp.alpha = 0.3;
		return temp;
	}

	private function _UpdaterView_BorderContainer1_i():spark.components.BorderContainer {
		var temp:spark.components.BorderContainer = new spark.components.BorderContainer();
		temp.percentWidth = 80.0;
		temp.percentHeight = 80.0;
		temp.verticalCenter = 0;
		temp.horizontalCenter = 0;
		temp.layout = _UpdaterView_VerticalLayout1_c();
		temp.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_UpdaterView_Array2_c);
		temp.setStyle('borderVisible', false);
		temp.setStyle('backgroundColor', 14803425);
		temp.id = 'bodyContainer';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		bodyContainer = temp;
		mx.binding.BindingManager.executeBindings(this, 'bodyContainer', bodyContainer);
		return temp;
	}

	private function _UpdaterView_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.verticalAlign = 'middle';
		return temp;
	}

	private function _UpdaterView_Array2_c():Array<Dynamic> {
		var temp:Array<HGroup> = [_UpdaterView_HGroup1_c()];
		return cast temp;
	}

	private function _UpdaterView_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.horizontalAlign = 'center';
		temp.verticalAlign = 'middle';
		temp.gap = 10;
		temp.mxmlContent = [_UpdaterView_Image1_c(), _UpdaterView_VGroup1_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _UpdaterView_Image1_c():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = '/elements/images/imgInstall.png';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _UpdaterView_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.gap = 10;
		temp.mxmlContent = [_UpdaterView_Label1_c(), _UpdaterView_Label2_i(), _UpdaterView_VGroup2_i(), _UpdaterView_VGroup3_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _UpdaterView_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Updates:';
		temp.styleName = 'pathInputs';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _UpdaterView_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'smallText';
		temp.id = '_UpdaterView_Label2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_UpdaterView_Label2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_UpdaterView_Label2', _UpdaterView_Label2);
		return temp;
	}

	private function _UpdaterView_VGroup2_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_UpdaterView_Label3_c(), _UpdaterView_ProgressBar1_i(), _UpdaterView_HGroup2_c()];
		temp.id = '_UpdaterView_VGroup2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_UpdaterView_VGroup2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_UpdaterView_VGroup2', _UpdaterView_VGroup2);
		return temp;
	}

	private function _UpdaterView_Label3_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Do you want to download it and install?';
		temp.styleName = 'smallText';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _UpdaterView_ProgressBar1_i():mx.controls.ProgressBar {
		var temp:mx.controls.ProgressBar = new mx.controls.ProgressBar();
		temp.id = 'prgBar';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		prgBar = temp;
		mx.binding.BindingManager.executeBindings(this, 'prgBar', prgBar);
		return temp;
	}

	private function _UpdaterView_HGroup2_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_UpdaterView_Button1_i(), _UpdaterView_Button2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _UpdaterView_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'YES';
		temp.width = 60;
		temp.emphasized = true;
		temp.addEventListener('click', ___UpdaterView_Button1_click);
		temp.id = '_UpdaterView_Button1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_UpdaterView_Button1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_UpdaterView_Button1', _UpdaterView_Button1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___UpdaterView_Button1_click(event:flash.events.MouseEvent):Void {
		dispatchEvent(new Event('UPDATEYES'));
	}

	private function _UpdaterView_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.width = 60;
		temp.addEventListener('click', ___UpdaterView_Button2_click);
		temp.id = '_UpdaterView_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_UpdaterView_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_UpdaterView_Button2', _UpdaterView_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___UpdaterView_Button2_click(event:flash.events.MouseEvent):Void {
		((downlaoding)) ? dispatchEvent(new Event('UPDATECANCEL')) : dispatchEvent(new Event('UPDATENO'));
	}

	private function _UpdaterView_VGroup3_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_UpdaterView_Label4_c()];
		temp.id = '_UpdaterView_VGroup3';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_UpdaterView_VGroup3 = temp;
		mx.binding.BindingManager.executeBindings(this, '_UpdaterView_VGroup3', _UpdaterView_VGroup3);
		return temp;
	}

	private function _UpdaterView_Label4_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = '-- Message to be updated --';
		temp.styleName = 'smallText';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	//  binding mgmt
	private function _UpdaterView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = 'New version (' + (updater.updateVersion) + ') is available.';
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_UpdaterView_Label2.text');

		result[1] = new mx.binding.Binding(this,
				function():Bool {
					return (!isAppStoreVersion);
				},
				null,
				'_UpdaterView_VGroup2.includeInLayout');

		result[2] = new mx.binding.Binding(this,
				function():Bool {
					return (!isAppStoreVersion);
				},
				null,
				'_UpdaterView_VGroup2.visible');

		result[3] = new mx.binding.Binding(this,
				null,
				null,
				'prgBar.source', 'updater');

		result[4] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (((downlaoding)) ? 'Downloading %3%' : '');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'prgBar.label');

		result[5] = new mx.binding.Binding(this,
				function():Float {
					return (((downlaoding)) ? 1 : .3);
				},
				null,
				'prgBar.alpha');

		result[6] = new mx.binding.Binding(this,
				function():Bool {
					return (!downlaoding);
				},
				null,
				'_UpdaterView_Button1.enabled');

		result[7] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (((!downlaoding)) ? 'NO' : 'CANCEL');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_UpdaterView_Button2.label');

		result[8] = new mx.binding.Binding(this,
				null,
				null,
				'_UpdaterView_VGroup3.includeInLayout', 'isAppStoreVersion');

		result[9] = new mx.binding.Binding(this,
				null,
				null,
				'_UpdaterView_VGroup3.visible', 'isAppStoreVersion');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(UpdaterView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}