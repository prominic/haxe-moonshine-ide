////////////////////////////////////////////////////////////////////////////////
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//
// No warranty of merchantability or fitness of any kind.
// Use this software at your own risk.
//
////////////////////////////////////////////////////////////////////////////////
package actionScripts.plugin.actionscript.as3project.vo;

import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.utils.SDKUtils;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.FileWrapper;

class MXMLCConfigVO extends FileWrapper {

	public function new(file:FileLocation = null) {
		super(file);
	}

	public function write(pvo:AS3ProjectVO):Void {
		if (pvo.targets.length == 0 && !pvo.isLibraryProject) {
			// No targets found for config construction.
			return;
		}

		if (pvo.isLibraryProject) {
			writeLibraryConfig(pvo);
		} else {
			writeApplicationConfig(pvo);
		}
	}

	private function writeApplicationConfig(pvo:AS3ProjectVO):Void {
		if (pvo.isVisualEditorProject) {
			return;
		}

		var oldIC:Bool = FastXML.node.ignoreComments != null;
		FastXML.node.ignoreComments = false;

		var data:FastXML = FastXML.parse('<flex-config />');

		FastXML.node.ignoreComments = oldIC;

		// re-verify SWF version - crucial part
		if (pvo.buildOptions.customSDK == null && IDEModel.getInstance().defaultSDK != null) {
			pvo.swfOutput.swfVersion = SDKUtils.getSdkSwfMajorVersion();
			pvo.swfOutput.swfMinorVersion = SDKUtils.getSdkSwfMinorVersion();
		} else if (pvo.buildOptions.customSDK != null) {
			pvo.swfOutput.swfVersion = SDKUtils.getSdkSwfMajorVersion(pvo.buildOptions.customSDKPath);
			pvo.swfOutput.swfMinorVersion = SDKUtils.getSdkSwfMinorVersion(pvo.buildOptions.customSDKPath);
		}

		data.node.appendChild(
				FastXML.parse('<target-player>{pvo.swfOutput.swfVersion}.{pvo.swfOutput.swfMinorVersion}.0</target-player>')
		);

		data.node.appendChild(
				FastXML.parse('<compiler />')
		);

		// TODO add locales

		// TODO built-in compiler constants like CONFIG::debug, CONFIG::release and CONFIG::timeStamp
		var compilerConstants:Array<String> = [];
		if (pvo.buildOptions.compilerConstants != null && pvo.buildOptions.compilerConstants != '') {
			compilerConstants = pvo.buildOptions.compilerConstants.split('\n');
		}

		for (constant in compilerConstants) {
			var constantSp:Array<String> = constant.split(',');
			data.nodes.compiler.descendants('appendChild')(FastXML.parse('<define><name>{constantSp[0]}</name><value>{constantSp[1]}</value></define>'));
		}

		if (pvo.classpaths.length > 0) {
			data.nodes.compiler.descendants('appendChild')(exportPaths(pvo.classpaths, FastXML.parse('<source-path append="true"/>'), FastXML.parse('<path-element/>')));
		}
		if (pvo.libraries.length > 0) {
			data.nodes.compiler.descendants('appendChild')(exportPaths(pvo.libraries, FastXML.parse('<library-path append="true"/>'), FastXML.parse('<path-element/>')));
		}
		// TODO possibly have to iterate through all the swc files in the dir and add their paths manually?
		if (pvo.includeLibraries.length > 0) {
			data.nodes.compiler.descendants('appendChild')(exportPaths(pvo.includeLibraries, FastXML.parse('<include-libraries append="true"/>'), FastXML.parse('<library/>')));
		}
		if (pvo.externalLibraries.length > 0) {
			data.nodes.compiler.descendants('appendChild')(exportPaths(pvo.externalLibraries, FastXML.parse('<external-library-path append="true"/>'), FastXML.parse('<path-element/>')));
		}
		// TODO pvo.runtimeSharedLibraries

		data.node.appendChild(exportPaths(pvo.targets, FastXML.parse('<file-specs/>'), FastXML.parse('<path-element/>')));

		// SWF
		data.node.appendChild(FastXML.parse('<default-background-color>#{pvo.swfOutput.backgroundColorHex}</default-background-color>'));
		data.node.appendChild(FastXML.parse('<default-frame-rate>{pvo.swfOutput.frameRate}</default-frame-rate>'));
		data.node.appendChild(FastXML.parse('<default-size><width>{pvo.swfOutput.width}</width><height>{pvo.swfOutput.height}</height></default-size>'));

		if (AS3.as(ConstantsCoreVO.IS_AIR, Bool)) {
			var dataStr:String =
			'<?xml version="1.0" encoding="utf-8"?>\n' +
			'<!--This Adobe Flex compiler configuration file was generated by a tool.-->\n' +
			'<!--Any modifications you make may be lost.-->\n' +
			data.node.toXMLString();
			if (file == null) {
				var dir:FileLocation = pvo.folderLocation.resolvePath('obj/');
				if (!AS3.as(dir.fileBridge.exists, Bool)) {
					dir.fileBridge.createDirectory();
				}

				file = dir.resolvePath(pvo.projectName + 'Config.xml');
			}

			// Write file
			file.fileBridge.save(dataStr);
		}
	}

	private function writeLibraryConfig(pvo:AS3ProjectVO):Void {
		var oldIC:Bool = FastXML.node.ignoreComments != null;
		FastXML.node.ignoreComments = false;

		var data:FastXML = FastXML.parse('<flex-config xmlns="http://www.adobe.com/2006/flex-config"/>');
		FastXML.node.ignoreComments = oldIC;

		// re-verify SWF version - crucial part
		var sdkPath:String;
		if (pvo.buildOptions.customSDK == null && IDEModel.getInstance().defaultSDK != null) {
			pvo.swfOutput.swfVersion = SDKUtils.getSdkSwfMajorVersion();
			sdkPath = Std.string(IDEModel.getInstance().defaultSDK.fileBridge.nativePath);
		} else if (pvo.buildOptions.customSDK != null) {
			pvo.swfOutput.swfVersion = SDKUtils.getSdkSwfMajorVersion(pvo.buildOptions.customSDKPath);
			sdkPath = pvo.buildOptions.customSDKPath;
		}

		data.node.appendChild(
				FastXML.parse('<compiler />')
		);

		data.nodes.compiler.descendants('appendChild')(
				FastXML.parse('<warn-no-constructor>false</warn-no-constructor>')
		);
		data.nodes.compiler.descendants('appendChild')(
				FastXML.parse('<fonts><managers><manager-class>flash.fonts.JREFontManager</manager-class><manager-class>flash.fonts.BatikFontManager</manager-class><manager-class>flash.fonts.AFEFontManager</manager-class><manager-class>flash.fonts.CFFFontManager</manager-class></managers></fonts>')
		);
		data.nodes.compiler.descendants('appendChild')(exportPaths([pvo.sourceFolder], FastXML.parse('<source-path/>'), FastXML.parse('<path-element/>')));
		data.nodes.compiler.descendants('appendChild')(
				FastXML.parse('<debug>true</debug>')
		);
		data.nodes.compiler.descendants('appendChild')(
				FastXML.parse('<locale><locale-element>en_US</locale-element></locale>')
		);

		generateLibraryConfigByProjectType(pvo, data, sdkPath, pvo.swfOutput.swfVersion);

		var lib:FileLocation;

		for (lib in pvo.externalLibraries) {
			data.nodes.compiler.get('external-library-path').descendants('appendChild')(
					FastXML.parse('<path-element>{lib.fileBridge.nativePath}</path-element>')
			);
		}

		for (lib in pvo.libraries) {
			data.nodes.compiler.get('library-path').descendants('appendChild')(
					FastXML.parse('<path-element>{lib.fileBridge.nativePath}</path-element>')
			);
		}

		data.node.appendChild(
				FastXML.parse('<target-player>{pvo.swfOutput.swfVersion}</target-player>')
		);
		data.node.appendChild(
				FastXML.parse('<output>{pvo.swfOutput.path.fileBridge.nativePath}</output>')
		);
		data.node.appendChild(
				FastXML.parse('<static-link-runtime-shared-libraries>false</static-link-runtime-shared-libraries>')
		);
		if (pvo.classpaths.length > 0) {
			data.node.appendChild(exportPaths(pvo.classpaths, FastXML.parse('<include-sources/>'), FastXML.parse('<path-element/>')));
		}

		if (AS3.as(ConstantsCoreVO.IS_AIR, Bool)) {
			var dataStr:String =
			'<?xml version="1.0" encoding="utf-8"?>\n' +
			'<!--This Adobe Flex compiler configuration file was generated by a tool.-->\n' +
			'<!--Any modifications you make may be lost.-->\n' +
			data.node.toXMLString();
			if (file == null) {
				var dir:FileLocation = pvo.folderLocation.resolvePath('obj/');
				if (!AS3.as(dir.fileBridge.exists, Bool)) {
					dir.fileBridge.createDirectory();
				}

				file = dir.resolvePath(pvo.projectName + 'Config.xml');
			}

			// Write file
			file.fileBridge.save(dataStr);
		}
	}

	private function exportPaths(v:Array<FileLocation>, container:FastXML, element:FastXML):FastXML {
		if (AS3.as(ConstantsCoreVO.IS_AIR, Bool)) {
			for (f in v) {
				var e:FastXML = element.copy();
				var nativePath:String = Std.string(f.fileBridge.nativePath);
				if (f.fileBridge.nativePath.charAt(0) == '/') {
					var pattern:as3hx.Compat.Regex = new as3hx.Compat.Regex(new as3hx.Compat.Regex('(\\\\)', 'g'));
					nativePath = Std.string(f.fileBridge.nativePath.replace(pattern, '/'));
				}
				e.node.appendChild(nativePath);
				container.node.appendChild(e);
			}
		}

		return container;
	}

	private function generateLibraryConfigByProjectType(pvo:AS3ProjectVO, data:FastXML, sdkPath:String, targetPlayer:Int):Void {
		if (pvo.isActionScriptOnly && pvo.air && pvo.isMobile) {
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<mobile>true</mobile>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<preloader>spark.preloaders.SplashScreen</preloader>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<accessible>false</accessible>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<theme><filename>{sdkPath}/frameworks/themes/Mobile/mobile.swc</filename></theme>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<external-library-path><path-element>{sdkPath}/frameworks/libs/air/airglobal.swc</path-element><path-element>{sdkPath}/frameworks/libs/core.swc</path-element><path-element>{sdkPath}/frameworks/libs/osmf.swc</path-element><path-element>{sdkPath}/frameworks/libs/textLayout.swc</path-element><path-element>{sdkPath}/frameworks/libs/authoringsupport.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/servicemonitor.swc</path-element></external-library-path>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<library-path><path-element>{sdkPath}/frameworks/locale/&#123;locale&#125;</path-element></library-path>')
			);
		} else if (pvo.air && pvo.isMobile) {
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<mobile>true</mobile>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<preloader>spark.preloaders.SplashScreen</preloader>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<accessible>false</accessible>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<namespaces><namespace><uri>http://ns.adobe.com/mxml/2009</uri><manifest>{sdkPath}/frameworks/mxml-2009-manifest.xml</manifest></namespace><namespace><uri>library://ns.adobe.com/flex/spark</uri><manifest>{sdkPath}/frameworks/spark-manifest.xml</manifest></namespace></namespaces>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<theme><filename>{sdkPath}/frameworks/themes/Mobile/mobile.swc</filename></theme>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<external-library-path><path-element>{sdkPath}/frameworks/libs/air/airglobal.swc</path-element><path-element>{sdkPath}/frameworks/libs/rpc.swc</path-element><path-element>{sdkPath}/frameworks/libs/osmf.swc</path-element><path-element>{sdkPath}/frameworks/libs/spark.swc</path-element><path-element>{sdkPath}/frameworks/libs/apache.swc</path-element><path-element>{sdkPath}/frameworks/libs/charts.swc</path-element><path-element>{sdkPath}/frameworks/libs/flatspark.swc</path-element><path-element>{sdkPath}/frameworks/libs/framework.swc</path-element><path-element>{sdkPath}/frameworks/libs/textLayout.swc</path-element><path-element>{sdkPath}/frameworks/libs/experimental.swc</path-element><path-element>{sdkPath}/frameworks/libs/authoringsupport.swc</path-element><path-element>{sdkPath}/frameworks/libs/flash-integration.swc</path-element><path-element>{sdkPath}/frameworks/libs/experimental_mobile.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/servicemonitor.swc</path-element><path-element>{sdkPath}/frameworks/libs/mobile/mobilecomponents.swc</path-element></external-library-path>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<library-path><path-element>{sdkPath}/frameworks/locale/&#123;locale&#125;</path-element><path-element>{sdkPath}/frameworks/themes/Mobile/mobile.swc</path-element></library-path>')
			);
		} else if (pvo.isActionScriptOnly && pvo.air && !pvo.isMobile) {
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<accessible>true</accessible>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<external-library-path><path-element>{sdkPath}/frameworks/libs/air/airglobal.swc</path-element><path-element>{sdkPath}/frameworks/libs/core.swc</path-element><path-element>{sdkPath}/frameworks/libs/osmf.swc</path-element><path-element>{sdkPath}/frameworks/libs/textLayout.swc</path-element><path-element>{sdkPath}/frameworks/libs/authoringsupport.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/aircore.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/gamepad.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/crosspromotion.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/servicemonitor.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/applicationupdater.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/applicationupdater_ui.swc</path-element></external-library-path>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<library-path><path-element>{sdkPath}/frameworks/locale/&#123;locale&#125;</path-element></library-path>')
			);
		} else if (pvo.air && !pvo.isMobile) {
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<accessible>true</accessible>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<namespaces><namespace><uri>http://ns.adobe.com/mxml/2009</uri><manifest>{sdkPath}/frameworks/mxml-2009-manifest.xml</manifest></namespace><namespace><uri>library://ns.adobe.com/flex/spark</uri><manifest>{sdkPath}/frameworks/spark-manifest.xml</manifest></namespace><namespace><uri>library://ns.adobe.com/flex/mx</uri><manifest>{sdkPath}/frameworks/mx-manifest.xml</manifest></namespace><namespace><uri>http://www.adobe.com/2006/mxml</uri><manifest>{sdkPath}/frameworks/mxml-manifest.xml</manifest></namespace></namespaces>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<external-library-path><path-element>{sdkPath}/frameworks/libs/air/airglobal.swc</path-element><path-element>{sdkPath}/frameworks/libs/rpc.swc</path-element><path-element>{sdkPath}/frameworks/libs/osmf.swc</path-element><path-element>{sdkPath}/frameworks/libs/spark.swc</path-element><path-element>{sdkPath}/frameworks/libs/apache.swc</path-element><path-element>{sdkPath}/frameworks/libs/charts.swc</path-element><path-element>{sdkPath}/frameworks/libs/flatspark.swc</path-element><path-element>{sdkPath}/frameworks/libs/framework.swc</path-element><path-element>{sdkPath}/frameworks/libs/spark_dmv.swc</path-element><path-element>{sdkPath}/frameworks/libs/sparkskins.swc</path-element><path-element>{sdkPath}/frameworks/libs/textLayout.swc</path-element><path-element>{sdkPath}/frameworks/libs/experimental.swc</path-element><path-element>{sdkPath}/frameworks/libs/advancedgrids.swc</path-element><path-element>{sdkPath}/frameworks/libs/authoringsupport.swc</path-element><path-element>{sdkPath}/frameworks/libs/flash-integration.swc</path-element><path-element>{sdkPath}/frameworks/libs/mx/mx.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/aircore.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/gamepad.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/airspark.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/airframework.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/crosspromotion.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/servicemonitor.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/applicationupdater.swc</path-element><path-element>{sdkPath}/frameworks/libs/air/applicationupdater_ui.swc</path-element></external-library-path>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<library-path><path-element>{sdkPath}/frameworks/locale/&#123;locale&#125;</path-element></library-path>')
			);
		} else if (pvo.isActionScriptOnly && !pvo.air) {
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<accessible>true</accessible>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<external-library-path><path-element>{sdkPath}/frameworks/libs/player/{targetPlayer}.0/playerglobal.swc</path-element><path-element>{sdkPath}/frameworks/libs/core.swc</path-element><path-element>{sdkPath}/frameworks/libs/osmf.swc</path-element><path-element>{sdkPath}/frameworks/libs/textLayout.swc</path-element><path-element>{sdkPath}/frameworks/libs/authoringsupport.swc</path-element></external-library-path>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<library-path><path-element>{sdkPath}/frameworks/locale/&#123;locale&#125;</path-element></library-path>')
			);
		} else if (!pvo.air) {
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<accessible>true</accessible>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<namespaces><namespace><uri>http://ns.adobe.com/mxml/2009</uri><manifest>{sdkPath}/frameworks/mxml-2009-manifest.xml</manifest></namespace><namespace><uri>library://ns.adobe.com/flex/spark</uri><manifest>{sdkPath}/frameworks/spark-manifest.xml</manifest></namespace><namespace><uri>library://ns.adobe.com/flex/mx</uri><manifest>{sdkPath}/frameworks/mx-manifest.xml</manifest></namespace><namespace><uri>http://www.adobe.com/2006/mxml</uri><manifest>{sdkPath}/frameworks/mxml-manifest.xml</manifest></namespace></namespaces>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<theme><filename>{sdkPath}/frameworks/themes/Spark/spark.css</filename></theme>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<external-library-path><path-element>{sdkPath}/frameworks/libs/player/{targetPlayer}.0/playerglobal.swc</path-element><path-element>{sdkPath}/frameworks/libs/rpc.swc</path-element><path-element>{sdkPath}/frameworks/libs/osmf.swc</path-element><path-element>{sdkPath}/frameworks/libs/spark.swc</path-element><path-element>{sdkPath}/frameworks/libs/apache.swc</path-element><path-element>{sdkPath}/frameworks/libs/charts.swc</path-element><path-element>{sdkPath}/frameworks/libs/flatspark.swc</path-element><path-element>{sdkPath}/frameworks/libs/framework.swc</path-element><path-element>{sdkPath}/frameworks/libs/spark_dmv.swc</path-element><path-element>{sdkPath}/frameworks/libs/sparkskins.swc</path-element><path-element>{sdkPath}/frameworks/libs/textLayout.swc</path-element><path-element>{sdkPath}/frameworks/libs/experimental.swc</path-element><path-element>{sdkPath}/frameworks/libs/advancedgrids.swc</path-element><path-element>{sdkPath}/frameworks/libs/authoringsupport.swc</path-element><path-element>{sdkPath}/frameworks/libs/flash-integration.swc</path-element><path-element>{sdkPath}/frameworks/libs/mx/mx.swc</path-element></external-library-path>')
			);
			data.nodes.compiler.descendants('appendChild')(
					FastXML.parse('<library-path><path-element>{sdkPath}/frameworks/locale/&#123;locale&#125;</path-element></library-path>')
			);
		}
	}

}