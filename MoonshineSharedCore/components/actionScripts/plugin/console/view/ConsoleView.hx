/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.console.view
 *  Class:      ConsoleView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/console/view/ConsoleView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package actionScripts.plugin.console.view;

import flash.text.engine.ElementFormat;
import flash.text.engine.FontDescription;
import flash.text.engine.FontLookup;
import mx.events.FlexEvent;
import mx.managers.CursorManager;
import mx.managers.CursorManagerPriority;
import spark.components.RichEditableText;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.console.ConsoleCommandEvent;
import actionScripts.plugin.console.ConsoleStyle;

import actionScripts.interfaces.IViewWithTitle;
import actionScripts.plugin.console.view.CommandLineEditor;
import actionScripts.plugin.console.view.ConsoleViewTextArea;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filters.*;
import flash.filters.DropShadowFilter;
import flash.filters.GlowFilter;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Canvas;
import mx.containers.HBox;
import mx.containers.VBox;
import mx.controls.HRule;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;

import mx.styles.*;
import spark.components.Label;

//  begin class def
class ConsoleView extends mx.containers.Canvas implements actionScripts.interfaces.IViewWithTitle {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var commandLine:actionScripts.plugin.console.view.CommandLineEditor;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var commandPrefix:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var glowOverlay:mx.containers.Canvas;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var history:actionScripts.plugin.console.view.ConsoleViewTextArea;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var historyContainer:mx.containers.VBox;

	//  type-import dummies

	//  Container document descriptor
	private var _documentDescriptor_:mx.core.UIComponentDescriptor;

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		this._documentDescriptor_ =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.Canvas,
					'propertiesFactory': function():Dynamic {
						return {
							'height': 25,
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': mx.containers.VBox,
								'id': 'historyContainer',
								'stylesFactory': function():Void {
									this.backgroundAlpha = 0.9;
									this.backgroundColor = 3618615;
								},
								'propertiesFactory': function():Dynamic {
									return {
										'percentWidth': 100.0,
										'childDescriptors': [
										new mx.core.UIComponentDescriptor({
											'type': actionScripts.plugin.console.view.ConsoleViewTextArea,
											'id': 'history',
											'stylesFactory': function():Void {
												this.horizontalScrollPolicy = 'auto';
												this.verticalScrollPolicy = 'auto';
												this.lineBreak = 'toFit';
												this.color = 16777215;
												this.fontSize = 12;
												this.focusedTextSelectionColor = 6776679;
											},
											'propertiesFactory': function():Dynamic {
												return {
													'editable': false,
													'selectable': true,
													'percentHeight': 80.0,
													'percentWidth': 100.0,
													'styleName': 'consoleFixedWidthTexts'
												};
											}
										}),
										new mx.core.UIComponentDescriptor({
											'type': mx.containers.Canvas,
											'propertiesFactory': function():Dynamic {
												return {
													'percentWidth': 100.0,
													'percentHeight': 20.0,
													'childDescriptors': [
													new mx.core.UIComponentDescriptor({
														'type': mx.controls.HRule,
														'stylesFactory': function():Void {
															this.strokeColor = 3421236;
														},
														'propertiesFactory': function():Dynamic {
															return {
																'percentWidth': 100.0,
																'height': 1
															};
														}
													}),
													new mx.core.UIComponentDescriptor({
														'type': mx.containers.Canvas,
														'id': 'glowOverlay',
														'stylesFactory': function():Void {
															this.backgroundColor = 16777215;
															this.backgroundAlpha = 0.1;
														},
														'propertiesFactory': function():Dynamic {
															return {
																'percentWidth': 100.0,
																'percentHeight': 100.0,
																'bottom': 0,
																'includeInLayout': false,
																'mouseChildren': false,
																'mouseEnabled': false,
																'mouseFocusEnabled': false
															};
														}
													}),
													new mx.core.UIComponentDescriptor({
														'type': mx.containers.HBox,
														'stylesFactory': function():Void {
															this.paddingTop = 3;
															this.horizontalGap = 0;
															this.backgroundAlpha = 1;
															this.backgroundColor = 3618615;
														},
														'propertiesFactory': function():Dynamic {
															return {
																'percentWidth': 100.0,
																'percentHeight': 100.0,
																'bottom': 0,
																'filters': [this._ConsoleView_DropShadowFilter1_c(), this._ConsoleView_GlowFilter1_c()],
																'childDescriptors': [
																new mx.core.UIComponentDescriptor({
																	'type': spark.components.Label,
																	'id': 'commandPrefix',
																	'stylesFactory': function():Void {
																		this.paddingTop = 3;
																		this.paddingRight = 2;
																		this.fontFamily = 'DejaVuSansCond';
																		this.fontSize = 12;
																		this.fontLookup = 'embeddedCFF';
																		this.color = 14540253;
																	},
																	'propertiesFactory': function():Dynamic {
																		return {
																			'text': ' >'
																		};
																	}
																}),
																new mx.core.UIComponentDescriptor({
																	'type': actionScripts.plugin.console.view.CommandLineEditor,
																	'id': 'commandLine',
																	'stylesFactory': function():Void {
																		this.backgroundColor = 3618615;
																		this.selectedLineColor = 3618615;
																		this.backgroundAlpha = 0;
																	},
																	'propertiesFactory': function():Dynamic {
																		return {
																			'percentWidth': 100.0,
																			'percentHeight': 100.0,
																			'showLineNumbers': false,
																			'showScrollBars': false,
																			'dataProvider': ''
																		};
																	}
																})
								]
															};
														}
													})
							]
												};
											}
										})
					]
									};
								}
							})
				]
						};
					}
				});
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.height = 25;
		this.minHeight = 25;
		this.percentHeight = 100;
		this.clipContent = false;
		this.label = 'Console';

		// events
		this.addEventListener('updateComplete', ___ConsoleView_Canvas1_updateComplete);
		this.addEventListener('creationComplete', ___ConsoleView_Canvas1_creationComplete);

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 3618615;
					this.backgroundAlpha = 1;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	//  scripts
	//  <Script>, line 33 - 195

	private var _consolePopOver:Bool = false;
	@:meta(Bindable())
	private var historyContainerHeight:Int = 0;
	private var cm:ContextMenu;
	private var model:IDEModel = IDEModel.getInstance();

	public var title(get, never):String;
	private function get_title():String {
		return Std.string(this.label);
	}

	public var consolePopOver(get, set):Bool;
	private function get_consolePopOver():Bool {
		return _consolePopOver;
	}

	private function set_consolePopOver(value:Bool):Bool {
		_consolePopOver = value;

		if (historyContainer == null) {
			return value;
		}

		//divider.y = -1;

		if (value) {
			height = minHeight;
			historyContainer.setStyle('top', null);
			historyContainer.setStyle('bottom', null);
			//historyContainer.y = divider.y;
		} else {
			historyContainer.setStyle('top', 0);
			historyContainer.setStyle('bottom', 25);
		}

		return value;
	}

	private function init():Void {
		var fontDescription:FontDescription = new FontDescription('DejaVuSansCond',
		'normal',
		'normal',
		FontLookup.EMBEDDED_CFF);
		var formats:Dynamic = {};
		var fontSize:Int = 12;
		Reflect.setField(formats, Std.string(0), new ElementFormat(fontDescription, fontSize, 0xdddddd));
		Reflect.setField(formats, Std.string(1), new ElementFormat(fontDescription, fontSize, 0xdddddd));
		Reflect.setField(formats, 'selectionColor', 0x676767);

		Reflect.setField(formats, Std.string(ConsoleStyle.WEAK), new ElementFormat(fontDescription, fontSize, 0x8c8c8c));
		Reflect.setField(formats, Std.string(ConsoleStyle.NOTICE), new ElementFormat(fontDescription, fontSize, 0x4C9BE0));
		Reflect.setField(formats, Std.string(ConsoleStyle.WARNING), new ElementFormat(fontDescription, fontSize, 0xffea00));
		Reflect.setField(formats, Std.string(ConsoleStyle.ERROR), new ElementFormat(fontDescription, fontSize, 0xff4848));

		commandLine.setParserAndStyles(null, formats);
		//history.setParserAndStyles(null, formats);
		consolePopOver = _consolePopOver;
		cm = new ContextMenu();
		var clear:ContextMenuItem = new ContextMenuItem('Clear', false, true, true);
		clear.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, clearHandler);
		cm.customItems.push(clear);
		cm.clipboardMenu = true;
		history.contextMenu = cm;
		(AS3.as(history.textDisplay, RichEditableText)).contextMenu = cm;

		var about:ContextMenuItem = new ContextMenuItem('About', false, true, true);
		about.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, aboutHandler);
		cm.customItems.push(about);

		var hide:ContextMenuItem = new ContextMenuItem('Hide', false, true, true);
		hide.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, hideHandler);
		cm.customItems.push(hide);

		var exit:ContextMenuItem = new ContextMenuItem('Exit', false, true, true);
		exit.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, exitHandler);
		cm.customItems.push(exit);

		var help:ContextMenuItem = new ContextMenuItem('Help', false, true, true);
		help.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, helpHandler);
		cm.customItems.push(help);

	}

	private var cursorID:Int = AS3.int(CursorManager.NO_CURSOR);

	@:meta(Embed(source = 'Assets.swf', symbol = 'mx.skins.cursor.VBoxDivider'))
	private var cursor:Class<Dynamic>;

	private function mouseOverDivider():Void {
		cursorID = AS3.int(cursorManager.setCursor(cursor, CursorManagerPriority.HIGH, 0, 0));
	}

	private function mouseOutDivider():Void {
		if (cursorID != CursorManager.NO_CURSOR) {
			cursorManager.removeCursor(cursorID);
			cursorID = AS3.int(CursorManager.NO_CURSOR);
		}
	}

	private function mouseUpDivider(event:Event = null):Void {
		parent.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveDivider);
		stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpDivider);
	}

	private function mouseMoveDivider(event:MouseEvent):Void {
		historyContainerHeight = AS3.int(parent.height - parent.mouseY - minHeight);
	}

	private function clearHandler(e:Event):Void {
		commandLine.dispatchEvent(new ConsoleCommandEvent('clear', null));
	}

	private function aboutHandler(e:Event):Void {
		commandLine.dispatchEvent(new ConsoleCommandEvent('about', null));
	}

	private function hideHandler(e:Event):Void {
		commandLine.dispatchEvent(new ConsoleCommandEvent('hide', null));
	}

	private function exitHandler(e:Event):Void {
		commandLine.dispatchEvent(new ConsoleCommandEvent('exit', null));
	}

	private function helpHandler(e:Event):Void {
		commandLine.dispatchEvent(new ConsoleCommandEvent('help', null));
	}

	private function consoleView_updateCompleteHandler(event:FlexEvent):Void {
		// TODO Auto-generated method stub
		if (!_consolePopOver) {
			historyContainerHeight = AS3.int(this.height);
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___ConsoleView_Canvas1_updateComplete(event:mx.events.FlexEvent):Void {
		consoleView_updateCompleteHandler(event);
	}

	/**
	 * @private
	 **/
	public function ___ConsoleView_Canvas1_creationComplete(event:mx.events.FlexEvent):Void {
		init();
	}

	private function _ConsoleView_DropShadowFilter1_c():flash.filters.DropShadowFilter {
		var temp:flash.filters.DropShadowFilter = new flash.filters.DropShadowFilter();
		temp.color = 0;
		temp.alpha = 0.2;
		temp.angle = 90;
		temp.blurX = 24;
		temp.blurY = 24;
		temp.distance = 12;
		temp.inner = true;
		return temp;
	}

	private function _ConsoleView_GlowFilter1_c():flash.filters.GlowFilter {
		var temp:flash.filters.GlowFilter = new flash.filters.GlowFilter();
		temp.color = 16777215;
		temp.alpha = 0.05;
		temp.blurX = 24;
		temp.blurY = 24;
		temp.inner = true;
		return temp;
	}

}

//  end package def