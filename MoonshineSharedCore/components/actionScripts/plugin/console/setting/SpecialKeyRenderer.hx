/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.console.setting
 *  Class:      SpecialKeyRenderer
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/console/setting/SpecialKeyRenderer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.plugin.console.setting;

import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.ShortcutEvent;
import actionScripts.valueObjects.Settings;
import mx.controls.Alert;
import mx.events.FlexEvent;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.HGroup;
import spark.components.Label;

//  begin class def
class SpecialKeyRenderer extends spark.components.HGroup implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _SpecialKeyRenderer_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var instructionBox:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var instructionText:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var keyButton:spark.components.Button;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _SpecialKeyRenderer_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_console_setting_SpecialKeyRendererWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(SpecialKeyRenderer, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.visible = true;
		this.percentWidth = 100.0;
		this.verticalAlign = 'middle';
		this.paddingLeft = 15;
		this.paddingTop = 15;
		this.paddingRight = 15;
		this.paddingBottom = 15;
		this.mxmlContent = [_SpecialKeyRenderer_Label1_i(), _SpecialKeyRenderer_Spacer1_c(), _SpecialKeyRenderer_HGroup2_i()];

		// events
		this.addEventListener('creationComplete', ___SpecialKeyRenderer_HGroup1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 37 - 153

	private var highlighter:UIHighlighter;

	@:meta(Bindable())
	public var setting:SpecialKeySetting;

	private function onCreationCompletes(event:FlexEvent):Void {
		//setting.getKeyAsChar();
		keyButton.label = setting.setLabel(setting.stringValue);

	}

	private function addListener():Void {
		keyButton.label = '';

		instructionText.visible = true;
		if (highlighter != null) {
			return;
		}
		setting.alt = false;
		setting.cmd = false;
		setting.ctrl = false;

		stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);

		highlighter = new UIHighlighter();
		highlighter.comp = instructionBox;
		highlighter.show();
		highlighter.addEventListener(MouseEvent.MOUSE_DOWN, closeHighlighter);
		GlobalEventDispatcher.getInstance().addEventListener(ShortcutEvent.SHORTCUT_PRE_FIRED, handleShortcutPreFired);

	}

	private function handleShortcutPreFired(evt:ShortcutEvent):Void {
		if (highlighter != null) {
			setting.alt = false;
			setting.cmd = false;
			setting.ctrl = false;
		}
	}

	private function closeHighlighter(event:Event = null):Void {
		highlighter.remove();
		highlighter = null;

		instructionText.visible = false;

		stage.removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);

		keyButton.label = setting.getKeyAsChar();
		setting.stringValue = setting.keyValue;
	}

	private function handleKeyDown(event:KeyboardEvent):Void {
		//Alert.show("1");
		if (event.charCode != 0) {
			//	Alert.show("2");
			setting.eventPropName = 'charCode';
			setting.eventValue = AS3.int(event.charCode);
			closeHighlighter();
		} else if (event.keyCode != 0) {
			//	Alert.show("3");
			if (event.keyCode == Keyboard.COMMAND) {
				// for cmd key
				{
					setting.eventPropName = 'keyCode';
					setting.eventValue = AS3.int(event.keyCode);
					setting.cmd = true;
				}
			} else if (event.keyCode == Keyboard.CONTROL) {
				// for Ctrl key
				{
					setting.eventPropName = 'keyCode';
					setting.eventValue = AS3.int(event.keyCode);
					setting.ctrl = true;
				}
			} else if (AS3.as(event.altKey, Bool)) {
				//For alt key
				{
					setting.eventPropName = 'keyCode';
					setting.eventValue = AS3.int(event.keyCode);
					setting.alt = true;
				}
			} else if (!setting.alt && !setting.ctrl && !setting.cmd) {
				//For function key
				{
					setting.eventPropName = 'keyCode';
					setting.eventValue = AS3.int(event.keyCode);
					setting.alt = false;
					setting.ctrl = false;
					setting.cmd = false;
					closeHighlighter();
				}
			} else {
				setting.eventPropName = 'charCode';
				setting.eventValue = 27;
				setting.alt = false;
				setting.ctrl = false;
				setting.cmd = false;
				closeHighlighter();
			}

		} else {
			trace('4');
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _SpecialKeyRenderer_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsLabel';
		temp.setStyle('paddingTop', 1);
		temp.id = '_SpecialKeyRenderer_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SpecialKeyRenderer_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SpecialKeyRenderer_Label1', _SpecialKeyRenderer_Label1);
		return temp;
	}

	private function _SpecialKeyRenderer_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SpecialKeyRenderer_HGroup2_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_SpecialKeyRenderer_Label2_i(), _SpecialKeyRenderer_Button1_i()];
		temp.setStyle('contentBackgroundAlpha', 1);
		temp.setStyle('contentBackgroundColor', 16645629);
		temp.id = 'instructionBox';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		instructionBox = temp;
		mx.binding.BindingManager.executeBindings(this, 'instructionBox', instructionBox);
		return temp;
	}

	private function _SpecialKeyRenderer_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsValue';
		temp.visible = false;
		temp.text = 'Press new key';
		temp.setStyle('paddingTop', 1);
		temp.setStyle('paddingLeft', 15);
		temp.setStyle('paddingRight', 15);
		temp.id = 'instructionText';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		instructionText = temp;
		mx.binding.BindingManager.executeBindings(this, 'instructionText', instructionText);
		return temp;
	}

	private function _SpecialKeyRenderer_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.addEventListener('click', __keyButton_click);
		temp.id = 'keyButton';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		keyButton = temp;
		mx.binding.BindingManager.executeBindings(this, 'keyButton', keyButton);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __keyButton_click(event:flash.events.MouseEvent):Void {
		addListener();
	}

	/**
	 * @private
	 **/
	public function ___SpecialKeyRenderer_HGroup1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes(event);
	}

	//  binding mgmt
	private function _SpecialKeyRenderer_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (setting.label);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_SpecialKeyRenderer_Label1.text');

		result[1] = new mx.binding.Binding(this,
				function():Class<Dynamic> {
					return (KeySelectSkin);
				},
				function(_sourceFunctionReturnValue:Class<Dynamic>):Void {
					keyButton.setStyle('skinClass', _sourceFunctionReturnValue);
				},
				'keyButton.skinClass');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(SpecialKeyRenderer)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def