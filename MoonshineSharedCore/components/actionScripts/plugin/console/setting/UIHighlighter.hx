/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.console.setting
 *  Class:      UIHighlighter
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/console/setting/UIHighlighter.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.plugin.console.setting;

import mx.core.FlexGlobals;
import mx.core.UIComponent;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filters.*;
import flash.filters.GlowFilter;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Canvas;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;
import mx.events.FlexEvent;
import mx.styles.*;

//  begin class def
class UIHighlighter extends mx.containers.Canvas {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var masker:mx.containers.Canvas;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var maskerMask:mx.containers.Canvas;

	//  type-import dummies

	//  Container document descriptor
	private var _documentDescriptor_:mx.core.UIComponentDescriptor;

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		this._documentDescriptor_ =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.Canvas,
					'propertiesFactory': function():Dynamic {
						return {
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': mx.containers.Canvas,
								'id': 'masker',
								'stylesFactory': function():Void {
									this.backgroundAlpha = 1;
									this.backgroundColor = 16711680;
								},
								'propertiesFactory': function():Dynamic {
									return {
										'percentWidth': 100.0,
										'percentHeight': 100.0,
										'blendMode': 'layer',
										'childDescriptors': [
										new mx.core.UIComponentDescriptor({
											'type': mx.containers.Canvas,
											'id': 'maskerMask',
											'stylesFactory': function():Void {
												this.backgroundAlpha = 1;
											},
											'propertiesFactory': function():Dynamic {
												return {
													'blendMode': 'erase',
													'filters': [this._UIHighlighter_GlowFilter1_c(), this._UIHighlighter_GlowFilter2_c()]
												};
											}
										})
					]
									};
								}
							})
				]
						};
					}
				});
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		// events
		this.addEventListener('creationComplete', ___UIHighlighter_Canvas1_creationComplete);

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundAlpha = 0.2;
					this.backgroundColor = 0;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	//  scripts
	//  <Script>, line 29 - 81

	public var comp:UIComponent;
	public var considerAlphaWhoWasOnceAsHandsomeAsYou:Bool = true;

	public function show():Void {
		FlexGlobals.topLevelApplication.addElement(this);
	}

	public function remove():Void {
		FlexGlobals.topLevelApplication.removeElement(this);
		comp = null;
	}

	private function init():Void {
		this.cacheAsBitmap = true;
		masker.cacheAsBitmap = true;

		var upperLeft:Point = comp.parent.localToGlobal(new Point(comp.x, comp.y));
		var lowerRight:Point = comp.parent.localToGlobal(new Point(comp.x + comp.width, comp.y + comp.height));

		maskerMask.x = upperLeft.x;
		maskerMask.y = upperLeft.y;
		maskerMask.width = lowerRight.x - upperLeft.x;
		maskerMask.height = lowerRight.y - upperLeft.y;

		maskerMask.graphics.clear();

		if (considerAlphaWhoWasOnceAsHandsomeAsYou) {
			var bmp:BitmapData = new BitmapData(comp.width, comp.height, true, 0x00000000);
			bmp.draw(comp);

			maskerMask.graphics.beginBitmapFill(bmp);
			maskerMask.graphics.drawRect(0, 0, bmp.width, bmp.height);
			maskerMask.graphics.endFill();
		} else {
			maskerMask.graphics.beginFill(0x0, 1);
			maskerMask.graphics.drawRect(0, 0, comp.width, comp.height);
			maskerMask.graphics.endFill();
		}
		this.mask = masker;
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___UIHighlighter_Canvas1_creationComplete(event:mx.events.FlexEvent):Void {
		init();
	}

	private function _UIHighlighter_GlowFilter1_c():flash.filters.GlowFilter {
		var temp:flash.filters.GlowFilter = new flash.filters.GlowFilter();
		temp.alpha = 1;
		temp.blurX = 8;
		temp.blurY = 8;
		temp.color = 0;
		temp.quality = 2;
		return temp;
	}

	private function _UIHighlighter_GlowFilter2_c():flash.filters.GlowFilter {
		var temp:flash.filters.GlowFilter = new flash.filters.GlowFilter();
		temp.alpha = 1;
		temp.blurX = 24;
		temp.blurY = 24;
		temp.color = 0;
		temp.quality = 2;
		return temp;
	}

}

//  end package def