/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.findreplace.view
 *  Class:      PromptTextInputSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/findreplace/view/PromptTextInputSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package actionScripts.plugin.findreplace.view;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.graphics.SolidColor;
import mx.graphics.SolidColorStroke;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.RichEditableText;
import spark.components.RichText;
import spark.components.supportClasses.Skin;
import spark.primitives.Rect;

@:meta(HostComponent(name = 'actionScripts.plugin.findreplace.view.PromptTextInput'))
@:meta(States(name = 'normal', name = 'normalWithPrompt', name = 'disabled', name = 'disabledWithPrompt'))
//  begin class def
class PromptTextInputSkin extends spark.components.supportClasses.Skin implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var background:spark.primitives.Rect;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var bgFill:mx.graphics.SolidColor;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var borderStroke:mx.graphics.SolidColorStroke;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var promptView:spark.components.RichText;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var textDisplay:spark.components.RichEditableText;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _PromptTextInputSkin_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_findreplace_view_PromptTextInputSkinWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(PromptTextInputSkin, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.blendMode = 'normal';
		this.mxmlContent = [_PromptTextInputSkin_Rect1_i(), _PromptTextInputSkin_RichEditableText1_i(), _PromptTextInputSkin_RichText1_i()];
		this.currentState = 'normal';

		// events

		states = [
				new State({
					'name': 'normal',
					'overrides': []
				}),
				new State({
					'name': 'normalWithPrompt',
					'overrides': []
				}),
				new State({
					'name': 'disabled',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				}),
				new State({
					'name': 'disabledWithPrompt',
					'overrides': []
				})
		];

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 34 - 36

	override private function get_focusSkinExclusions():Array<Dynamic> {
		return cast [textDisplay];
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _PromptTextInputSkin_Rect1_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.height = 18;
		temp.stroke = _PromptTextInputSkin_SolidColorStroke1_i();
		temp.fill = _PromptTextInputSkin_SolidColor1_i();
		temp.initialized(this, 'background');
		background = temp;
		mx.binding.BindingManager.executeBindings(this, 'background', background);
		return temp;
	}

	private function _PromptTextInputSkin_SolidColorStroke1_i():mx.graphics.SolidColorStroke {
		var temp:mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
		temp.color = 6710886;
		temp.weight = 1;
		borderStroke = temp;
		mx.binding.BindingManager.executeBindings(this, 'borderStroke', borderStroke);
		return temp;
	}

	private function _PromptTextInputSkin_SolidColor1_i():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 4605510;
		bgFill = temp;
		mx.binding.BindingManager.executeBindings(this, 'bgFill', bgFill);
		return temp;
	}

	private function _PromptTextInputSkin_RichEditableText1_i():spark.components.RichEditableText {
		var temp:spark.components.RichEditableText = new spark.components.RichEditableText();
		temp.lineBreak = 'explicit';
		temp.selectable = true;
		temp.widthInChars = 10;
		temp.left = 6;
		temp.right = 4;
		temp.top = 7;
		temp.bottom = 6;
		temp.setStyle('textAlign', 'left');
		temp.setStyle('verticalAlign', 'middle');
		temp.id = 'textDisplay';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		textDisplay = temp;
		mx.binding.BindingManager.executeBindings(this, 'textDisplay', textDisplay);
		return temp;
	}

	private function _PromptTextInputSkin_RichText1_i():spark.components.RichText {
		var temp:spark.components.RichText = new spark.components.RichText();
		temp.mouseEnabled = false;
		temp.mouseChildren = false;
		temp.left = 6;
		temp.right = 4;
		temp.top = 0;
		temp.bottom = 0;
		temp.setStyle('verticalAlign', 'middle');
		temp.setStyle('fontStyle', 'italic');
		temp.id = 'promptView';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		promptView = temp;
		mx.binding.BindingManager.executeBindings(this, 'promptView', promptView);
		return temp;
	}

	//  binding mgmt
	private function _PromptTextInputSkin_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Int {
					return AS3.int(getStyle('promptColor'));
				},
				function(_sourceFunctionReturnValue:Int):Void {
					promptView.setStyle('color', _sourceFunctionReturnValue);
				},
				'promptView.color');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(PromptTextInputSkin)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def