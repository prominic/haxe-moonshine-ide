/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.findreplace.view
 *  Class:      SearchView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/findreplace/view/SearchView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.plugin.findreplace.view;

import actionScripts.plugin.findreplace.FindReplacePlugin;
import elements.skins.DarkButtonSkin;
import mx.events.FlexEvent;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.plugin.findreplace.view.StatusTextInput;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexDisplayObject;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.states.AddItems;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.HGroup;
import spark.components.RadioButton;
import spark.components.RadioButtonGroup;
import spark.components.VGroup;

@:meta(States(name = 'findAndReplace', name = 'findOnly'))
//  begin class def
class SearchView extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _SearchView_Button1:spark.components.Button;

	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _SearchView_Button2:spark.components.Button;

	/**
	 * @private
	 **/
	public var _SearchView_RadioButton1:spark.components.RadioButton;

	/**
	 * @private
	 **/
	public var _SearchView_RadioButton2:spark.components.RadioButton;

	@:meta(Inspectable())
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _SearchView_VGroup1:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var findButton:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var findInput:actionScripts.plugin.findreplace.view.StatusTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var optionEscapeChars:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var optionMatchCase:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var optionRegExp:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var rbDirection:spark.components.RadioButtonGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var replaceInput:actionScripts.plugin.findreplace.view.PromptTextInput;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _SearchView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_findreplace_view_SearchViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(SearchView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 500;
		this.autoLayout = true;
		this.minWidth = 500;
		this.currentState = 'findAndReplace';
		this.controlBarContent = [_SearchView_Spacer1_c(), _SearchView_Button3_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_SearchView_Array3_c);
		_SearchView_RadioButtonGroup1_i();

		// events
		this.addEventListener('creationComplete', ___SearchView_ResizableTitleWindow1_creationComplete);

		var _SearchView_Button1_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_SearchView_Button1_i);
		var _SearchView_Button2_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_SearchView_Button2_i);
		var _SearchView_PromptTextInput1_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_SearchView_PromptTextInput1_i);

		states = [
				new State({
					'name': 'findAndReplace',
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _SearchView_PromptTextInput1_factory,
								'destination': '_SearchView_VGroup1',
								'propertyName': 'mxmlContent',
								'position': 'after',
								'relativeTo': ['findInput']
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _SearchView_Button2_factory,
								'destination': null,
								'propertyName': 'controlBarContent',
								'position': 'first'
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _SearchView_Button1_factory,
								'destination': null,
								'propertyName': 'controlBarContent',
								'position': 'first'
							}),
					new mx.states.SetProperty().initializeFromObject({
								'name': 'title',
								'value': 'Find/Replace'
							})
			]
				}),
				new State({
					'name': 'findOnly',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'title',
								'value': 'Find'
							})
			]
				})
		];

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 37 - 80

	@:meta(Bindable())public var initialSearchString:String = '';

	private function find():Void {
		if (rbDirection.selectedIndex == 0) {
			dispatchEvent(new Event(FindReplacePlugin.EVENT_FIND_NEXT));
		} else {
			dispatchEvent(new Event(FindReplacePlugin.EVENT_FIND_PREV));
		}
	}

	private function replaceOne(isFindNext:Bool = false):Void {
		dispatchEvent(new Event(FindReplacePlugin.EVENT_REPLACE_ONE));
		if (isFindNext) {
			find();
		}
	}

	private function replaceAll():Void {
		dispatchEvent(new Event(FindReplacePlugin.EVENT_REPLACE_ALL));
	}

	private function focusInput():Void {
		findInput.setFocus();
		findInput.selectRange(findInput.text.length, findInput.text.length);
	}

	private function onSearchViewCreationComplete(event:FlexEvent):Void {
		findButton.setStyle('skinClass', DarkButtonSkin);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _SearchView_RadioButtonGroup1_i():spark.components.RadioButtonGroup {
		var temp:spark.components.RadioButtonGroup = new spark.components.RadioButtonGroup();
		temp.initialized(this, 'rbDirection');
		rbDirection = temp;
		mx.binding.BindingManager.executeBindings(this, 'rbDirection', rbDirection);
		return temp;
	}

	private function _SearchView_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Replace/Find';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___SearchView_Button1_click);
		temp.id = '_SearchView_Button1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SearchView_Button1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SearchView_Button1', _SearchView_Button1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SearchView_Button1_click(event:flash.events.MouseEvent):Void {
		replaceOne(true);
	}

	private function _SearchView_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Replace All';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___SearchView_Button2_click);
		temp.id = '_SearchView_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SearchView_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SearchView_Button2', _SearchView_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SearchView_Button2_click(event:flash.events.MouseEvent):Void {
		replaceAll();
	}

	private function _SearchView_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchView_Button3_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Find';
		temp.setStyle('fontFamily', 'DejaVuSans');
		temp.setStyle('fontSize', 12);
		temp.addEventListener('click', __findButton_click);
		temp.id = 'findButton';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		findButton = temp;
		mx.binding.BindingManager.executeBindings(this, 'findButton', findButton);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __findButton_click(event:flash.events.MouseEvent):Void {
		find();
	}

	private function _SearchView_Array3_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_SearchView_VGroup1_i()];
		return cast temp;
	}

	private function _SearchView_VGroup1_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 12;
		temp.paddingTop = 9;
		temp.paddingRight = 12;
		temp.mxmlContent = [_SearchView_StatusTextInput1_i(), _SearchView_HGroup1_c(), _SearchView_HGroup2_c()];
		temp.id = '_SearchView_VGroup1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SearchView_VGroup1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SearchView_VGroup1', _SearchView_VGroup1);
		return temp;
	}

	private function _SearchView_StatusTextInput1_i():actionScripts.plugin.findreplace.view.StatusTextInput {
		var temp:actionScripts.plugin.findreplace.view.StatusTextInput = new actionScripts.plugin.findreplace.view.StatusTextInput();
		temp.prompt = 'Find';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInputStatus';
		temp.tabIndex = 1;
		temp.addEventListener('creationComplete', __findInput_creationComplete);
		temp.id = 'findInput';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		findInput = temp;
		mx.binding.BindingManager.executeBindings(this, 'findInput', findInput);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __findInput_creationComplete(event:mx.events.FlexEvent):Void {
		focusInput();
	}

	private function _SearchView_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Replace';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.tabIndex = 2;
		temp.addEventListener('enter', __replaceInput_enter);
		temp.id = 'replaceInput';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		replaceInput = temp;
		mx.binding.BindingManager.executeBindings(this, 'replaceInput', replaceInput);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __replaceInput_enter(event:mx.events.FlexEvent):Void {
		replaceOne(true);
	}

	private function _SearchView_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.gap = 4;
		temp.mxmlContent = [_SearchView_CheckBox1_i(), _SearchView_CheckBox2_i(), _SearchView_CheckBox3_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchView_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Match case';
		temp.id = 'optionMatchCase';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		optionMatchCase = temp;
		mx.binding.BindingManager.executeBindings(this, 'optionMatchCase', optionMatchCase);
		return temp;
	}

	private function _SearchView_CheckBox2_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'RegExp';
		temp.id = 'optionRegExp';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		optionRegExp = temp;
		mx.binding.BindingManager.executeBindings(this, 'optionRegExp', optionRegExp);
		return temp;
	}

	private function _SearchView_CheckBox3_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Escape chars';
		temp.id = 'optionEscapeChars';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		optionEscapeChars = temp;
		mx.binding.BindingManager.executeBindings(this, 'optionEscapeChars', optionEscapeChars);
		return temp;
	}

	private function _SearchView_HGroup2_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.gap = 4;
		temp.mxmlContent = [_SearchView_RadioButton1_i(), _SearchView_RadioButton2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchView_RadioButton1_i():spark.components.RadioButton {
		var temp:spark.components.RadioButton = new spark.components.RadioButton();
		temp.label = 'Forward';
		temp.selected = true;
		temp.id = '_SearchView_RadioButton1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SearchView_RadioButton1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SearchView_RadioButton1', _SearchView_RadioButton1);
		return temp;
	}

	private function _SearchView_RadioButton2_i():spark.components.RadioButton {
		var temp:spark.components.RadioButton = new spark.components.RadioButton();
		temp.label = 'Backward';
		temp.id = '_SearchView_RadioButton2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SearchView_RadioButton2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SearchView_RadioButton2', _SearchView_RadioButton2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SearchView_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onSearchViewCreationComplete(event);
	}

	//  binding mgmt
	private function _SearchView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'this.defaultButton', 'findButton');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'findInput.text', 'initialSearchString');

		result[2] = new mx.binding.Binding(this,
				null,
				null,
				'_SearchView_RadioButton1.group', 'rbDirection');

		result[3] = new mx.binding.Binding(this,
				null,
				null,
				'_SearchView_RadioButton2.group', 'rbDirection');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(SearchView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def