/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.run.view
 *  Class:      DeviceConfiguration
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/run/view/DeviceConfiguration.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:50 MSK
 */

package actionScripts.plugin.run.view;

import mx.collections.ArrayCollection;
import mx.core.FlexGlobals;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.managers.PopUpManager;
import actionScripts.events.GeneralEvent;
import actionScripts.events.ProjectEvent;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.MobileDeviceVO;
import components.popup.DeviceDefinePopup;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.ArrayList;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.DataGrid;
import spark.components.gridClasses.GridColumn;

//  begin class def
class DeviceConfiguration extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _DeviceConfiguration_Button2:spark.components.Button;

	/**
	 * @private
	 **/
	public var _DeviceConfiguration_Button3:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var dgDevices:spark.components.DataGrid;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _DeviceConfiguration_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_run_view_DeviceConfigurationWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(DeviceConfiguration, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 600;
		this.height = 240;
		this.minWidth = 300;
		this.minHeight = 150;
		this.title = 'Device Configurations';
		this.controlBarContent = [_DeviceConfiguration_Button1_c(), _DeviceConfiguration_Button2_i(), _DeviceConfiguration_Button3_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_DeviceConfiguration_Array2_c);

		// events
		this.addEventListener('initialize', ___DeviceConfiguration_ResizableTitleWindow1_initialize);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 10 - 84

	@:meta(Bindable())public var devices:ArrayCollection;

	private var deviceDefinePop:DeviceDefinePopup;

	private function onDeviceAddition(event:MouseEvent, isNew:Bool):Void {
		if (deviceDefinePop == null) {
			deviceDefinePop = AS3.as(PopUpManager.createPopUp(AS3.as(FlexGlobals.topLevelApplication, DisplayObject), DeviceDefinePopup, true), DeviceDefinePopup);
			deviceDefinePop.addEventListener(CloseEvent.CLOSE, onDefinePopupClosed);
			deviceDefinePop.addEventListener(GeneralEvent.DONE, onDeviceUpdated);
			if (!isNew) {
				deviceDefinePop.editedDevice = AS3.as(dgDevices.selectedItem, MobileDeviceVO);
			}
			PopUpManager.centerPopUp(deviceDefinePop);
		} else {
			PopUpManager.bringToFront(deviceDefinePop);
		}
	}

	private function onDeviceDeletion(event:MouseEvent):Void {
		if (dgDevices.selectedItem.type == MobileDeviceVO.AND) {
			ConstantsCoreVO.TEMPLATES_ANDROID_DEVICES.removeItem(dgDevices.selectedItem);
		} else {
			ConstantsCoreVO.TEMPLATES_IOS_DEVICES.removeItem(dgDevices.selectedItem);
		}
		devices.removeItem(dgDevices.selectedItem);
		dispatchEvent(new Event(Event.CHANGE));
	}

	private function onDefinePopupClosed(event:CloseEvent):Void {
		deviceDefinePop.removeEventListener(CloseEvent.CLOSE, onDefinePopupClosed);
		deviceDefinePop.removeEventListener(ProjectEvent.FLEX_SDK_UDPATED, onDeviceUpdated);
		deviceDefinePop = null;

		System.gc();
	}

	private function onDeviceUpdated(event:GeneralEvent):Void {
		onDefinePopupClosed(null);

		if (devices.getItemIndex(event.value) == -1) {
			devices.addItem(event.value);
			if (Reflect.field(event.value, 'type') == MobileDeviceVO.AND) {
				ConstantsCoreVO.TEMPLATES_ANDROID_DEVICES.addItem(event.value);
			} else {
				ConstantsCoreVO.TEMPLATES_IOS_DEVICES.addItem(event.value);
			}
		} else {
			devices.refresh();
		}

		dispatchEvent(new Event(Event.CHANGE));
	}

	private function onInitialized(event:FlexEvent):Void {
		devices = new ArrayCollection();
		devices.addAll(ConstantsCoreVO.TEMPLATES_ANDROID_DEVICES);
		devices.addAll(ConstantsCoreVO.TEMPLATES_IOS_DEVICES);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _DeviceConfiguration_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = '+';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___DeviceConfiguration_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___DeviceConfiguration_Button1_click(event:flash.events.MouseEvent):Void {
		onDeviceAddition(event, true);
	}

	private function _DeviceConfiguration_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = '-';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___DeviceConfiguration_Button2_click);
		temp.id = '_DeviceConfiguration_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_DeviceConfiguration_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_DeviceConfiguration_Button2', _DeviceConfiguration_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___DeviceConfiguration_Button2_click(event:flash.events.MouseEvent):Void {
		onDeviceDeletion(event);
	}

	private function _DeviceConfiguration_Button3_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Edit';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___DeviceConfiguration_Button3_click);
		temp.id = '_DeviceConfiguration_Button3';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_DeviceConfiguration_Button3 = temp;
		mx.binding.BindingManager.executeBindings(this, '_DeviceConfiguration_Button3', _DeviceConfiguration_Button3);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___DeviceConfiguration_Button3_click(event:flash.events.MouseEvent):Void {
		onDeviceAddition(event, false);
	}

	private function _DeviceConfiguration_Array2_c():Array<Dynamic> {
		var temp:Array<DataGrid> = [_DeviceConfiguration_DataGrid1_i()];
		return cast temp;
	}

	private function _DeviceConfiguration_DataGrid1_i():spark.components.DataGrid {
		var temp:spark.components.DataGrid = new spark.components.DataGrid();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.sortableColumns = false;
		temp.rowHeight = 28;
		temp.doubleClickEnabled = true;
		temp.columns = _DeviceConfiguration_ArrayList1_c();
		temp.setStyle('borderVisible', false);
		temp.setStyle('contentBackgroundColor', 14737632);
		temp.setStyle('selectionColor', 16185078);
		temp.setStyle('horizontalScrollPolicy', 'off');
		temp.addEventListener('doubleClick', __dgDevices_doubleClick);
		temp.id = 'dgDevices';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		dgDevices = temp;
		mx.binding.BindingManager.executeBindings(this, 'dgDevices', dgDevices);
		return temp;
	}

	private function _DeviceConfiguration_ArrayList1_c():mx.collections.ArrayList {
		var temp:mx.collections.ArrayList = new mx.collections.ArrayList();
		temp.source = [_DeviceConfiguration_GridColumn1_c(), _DeviceConfiguration_GridColumn2_c(), _DeviceConfiguration_GridColumn3_c(), _DeviceConfiguration_GridColumn4_c()];
		return temp;
	}

	private function _DeviceConfiguration_GridColumn1_c():spark.components.gridClasses.GridColumn {
		var temp:spark.components.gridClasses.GridColumn = new spark.components.gridClasses.GridColumn();
		temp.headerText = 'Name';
		temp.dataField = 'name';
		temp.width = 200;
		temp.minWidth = 200;
		return temp;
	}

	private function _DeviceConfiguration_GridColumn2_c():spark.components.gridClasses.GridColumn {
		var temp:spark.components.gridClasses.GridColumn = new spark.components.gridClasses.GridColumn();
		temp.headerText = 'Key';
		temp.dataField = 'key';
		temp.width = 200;
		return temp;
	}

	private function _DeviceConfiguration_GridColumn3_c():spark.components.gridClasses.GridColumn {
		var temp:spark.components.gridClasses.GridColumn = new spark.components.gridClasses.GridColumn();
		temp.headerText = 'Scale DPI';
		temp.dataField = 'dpi';
		temp.width = 100;
		return temp;
	}

	private function _DeviceConfiguration_GridColumn4_c():spark.components.gridClasses.GridColumn {
		var temp:spark.components.gridClasses.GridColumn = new spark.components.gridClasses.GridColumn();
		temp.headerText = '';
		temp.dataField = 'type';
		temp.minWidth = 100;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __dgDevices_doubleClick(event:flash.events.MouseEvent):Void {
		onDeviceAddition(event, false);
	}

	/**
	 * @private
	 **/
	public function ___DeviceConfiguration_ResizableTitleWindow1_initialize(event:mx.events.FlexEvent):Void {
		onInitialized(event);
	}

	//  binding mgmt
	private function _DeviceConfiguration_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(dgDevices.selectedItem, Bool) && !AS3.as(dgDevices.selectedItem.isDefault, Bool));
				},
				null,
				'_DeviceConfiguration_Button2.enabled');

		result[1] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(dgDevices.selectedItem, Bool));
				},
				null,
				'_DeviceConfiguration_Button3.enabled');

		result[2] = new mx.binding.Binding(this,
				null,
				null,
				'dgDevices.dataProvider', 'devices');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(DeviceConfiguration)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def