/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.actionscript.as3project.settings
 *  Class:      PathRenderer
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/actionscript/as3project/settings/PathRenderer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package actionScripts.plugin.actionscript.as3project.settings;

import mx.events.FlexEvent;
import spark.events.TextOperationEvent;
import actionScripts.factory.FileLocation;
import actionScripts.utils.OSXBookmarkerNotifiers;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.HGroup;
import spark.components.Image;
import spark.components.TextInput;
import spark.components.supportClasses.ItemRenderer;

//  begin class def
class PathRenderer extends spark.components.supportClasses.ItemRenderer implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _PathRenderer_Button1:spark.components.Button;

	/**
	 * @private
	 **/
	public var _PathRenderer_Button2:spark.components.Button;

	/**
	 * @private
	 **/
	public var _PathRenderer_Button3:spark.components.Button;

	/**
	 * @private
	 **/
	public var _PathRenderer_Image2:spark.components.Image;

	/**
	 * @private
	 **/
	public var _PathRenderer_Image3:spark.components.Image;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var icoMainSourceFolder:spark.components.Image;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var path:spark.components.TextInput;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _PathRenderer_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_actionscript_as3project_settings_PathRendererWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(PathRenderer, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.autoDrawBackground = false;
		this.mxmlContent = [_PathRenderer_HGroup1_c()];

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 29 - 95

	public static inline var EVENT_BROWSE_FILE:String = 'browseFile';
	public static inline var EVENT_BROWSE_DIR:String = 'browseDir';
	public static inline var EVENT_REMOVE_ITEM:String = 'removeItem';
	public static inline var EVENT_MANUAL_UPDATE:String = 'manualUpdate';

	@:meta(Bindable())public var allowFiles:Bool = false;
	@:meta(Bindable())public var allowFolders:Bool = false;
	@:meta(Bindable())public var showRemove:Bool = true;

	public var fileMustExist:Bool = false;

	@:meta(Bindable())private var isFileExists:Bool = false;

	override private function set_data(value:Dynamic):Dynamic {
		if (AS3.as(value, Bool)) {
			super.data = value;
			path.buttonMode = false;
			path.editable = path.mouseChildren = (((Reflect.field(value, 'label') == PathListSettingRenderer.NOT_SET_PATH_MESSAGE)) ? false : true);
			icoMainSourceFolder.includeInLayout = icoMainSourceFolder.visible = Reflect.field(value, 'isMainSourceFolder');
			onCreationCompletes(null);
		}
		return value;
	}

	private function onPathManualChange(event:TextOperationEvent):Void {
		if (AS3.as(data, Bool)) {
			dispatchEvent(new Event(EVENT_MANUAL_UPDATE, true));
		}
	}

	private function onCreationCompletes(event:FlexEvent):Void {
		var tmpLocalCheckPath:String;
		if (AS3.as(data, Bool) && Reflect.field(data, 'label') == PathListSettingRenderer.NOT_SET_PATH_MESSAGE) {
			isFileExists = false;
		} else if (AS3.as(data, Bool) && (Reflect.field(Reflect.field(Reflect.field(data, 'file'), 'fileBridge'), 'nativePath').indexOf('{locale}') != -1)) {
			tmpLocalCheckPath = OSXBookmarkerNotifiers.isValidLocalePath(AS3.as(Reflect.field(data, 'file'), FileLocation));
			if (tmpLocalCheckPath != null) {
				isFileExists = AS3.as((new FileLocation(tmpLocalCheckPath)).fileBridge.exists, Bool);
			}
		} else if (AS3.as(data, Bool) && AS3.as(Reflect.field(Reflect.field(Reflect.field(data, 'file'), 'fileBridge'), 'exists'), Bool)) {
			isFileExists = true;
		} else {
			isFileExists = false;
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _PathRenderer_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.paddingLeft = 15;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_PathRenderer_Image1_i(), _PathRenderer_TextInput1_i(), _PathRenderer_Spacer1_c(), _PathRenderer_Button1_i(), _PathRenderer_Button2_i(), _PathRenderer_Button3_i(), _PathRenderer_Image2_i(), _PathRenderer_Image3_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _PathRenderer_Image1_i():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = _embed_mxml__elements_images_icoSource_png_261931945;
		temp.includeInLayout = false;
		temp.visible = false;
		temp.id = 'icoMainSourceFolder';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		icoMainSourceFolder = temp;
		mx.binding.BindingManager.executeBindings(this, 'icoMainSourceFolder', icoMainSourceFolder);
		return temp;
	}

	private function _PathRenderer_TextInput1_i():spark.components.TextInput {
		var temp:spark.components.TextInput = new spark.components.TextInput();
		temp.percentWidth = 100.0;
		temp.styleName = 'uiTextSettingsValue';
		temp.percentHeight = 100.0;
		temp.buttonMode = true;
		temp.editable = false;
		temp.mouseChildren = false;
		temp.setStyle('borderVisible', false);
		temp.setStyle('contentBackgroundAlpha', 0);
		temp.setStyle('focusAlpha', 0);
		temp.addEventListener('change', __path_change);
		temp.id = 'path';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		path = temp;
		mx.binding.BindingManager.executeBindings(this, 'path', path);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __path_change(event:spark.events.TextOperationEvent):Void {
		onPathManualChange(event);
	}

	private function _PathRenderer_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.width = 10;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _PathRenderer_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Browse file';
		temp.styleName = 'lightButton';
		temp.addEventListener('click', ___PathRenderer_Button1_click);
		temp.id = '_PathRenderer_Button1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_PathRenderer_Button1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_PathRenderer_Button1', _PathRenderer_Button1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___PathRenderer_Button1_click(event:flash.events.MouseEvent):Void {
		dispatchEvent(new Event(EVENT_BROWSE_FILE, true));
	}

	private function _PathRenderer_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Browse dir';
		temp.styleName = 'lightButton';
		temp.addEventListener('click', ___PathRenderer_Button2_click);
		temp.id = '_PathRenderer_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_PathRenderer_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_PathRenderer_Button2', _PathRenderer_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___PathRenderer_Button2_click(event:flash.events.MouseEvent):Void {
		dispatchEvent(new Event(EVENT_BROWSE_DIR, true));
	}

	private function _PathRenderer_Button3_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.width = 20;
		temp.label = '–';
		temp.styleName = 'lightButtonTight';
		temp.addEventListener('click', ___PathRenderer_Button3_click);
		temp.id = '_PathRenderer_Button3';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_PathRenderer_Button3 = temp;
		mx.binding.BindingManager.executeBindings(this, '_PathRenderer_Button3', _PathRenderer_Button3);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___PathRenderer_Button3_click(event:flash.events.MouseEvent):Void {
		dispatchEvent(new Event(EVENT_REMOVE_ITEM, true));
	}

	private function _PathRenderer_Image2_i():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = _embed_mxml__elements_images_tick_circle_frame_png_968862167;
		temp.id = '_PathRenderer_Image2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_PathRenderer_Image2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_PathRenderer_Image2', _PathRenderer_Image2);
		return temp;
	}

	private function _PathRenderer_Image3_i():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = _embed_mxml__elements_images_cross_circle_frame_png_2038997967;
		temp.id = '_PathRenderer_Image3';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_PathRenderer_Image3 = temp;
		mx.binding.BindingManager.executeBindings(this, '_PathRenderer_Image3', _PathRenderer_Image3);
		return temp;
	}

	//  binding mgmt
	private function _PathRenderer_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = ((AS3.as(data, Bool)) ? Reflect.field(data, 'label') : 'Click to add');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'path.text');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'_PathRenderer_Button1.visible', 'allowFiles');

		result[2] = new mx.binding.Binding(this,
				null,
				null,
				'_PathRenderer_Button1.includeInLayout', 'allowFiles');

		result[3] = new mx.binding.Binding(this,
				null,
				null,
				'_PathRenderer_Button2.visible', 'allowFolders');

		result[4] = new mx.binding.Binding(this,
				null,
				null,
				'_PathRenderer_Button2.includeInLayout', 'allowFolders');

		result[5] = new mx.binding.Binding(this,
				null,
				null,
				'_PathRenderer_Button3.visible', 'showRemove');

		result[6] = new mx.binding.Binding(this,
				function():Bool {
					return (isFileExists);
				},
				null,
				'_PathRenderer_Image2.visible');

		result[7] = new mx.binding.Binding(this,
				function():Bool {
					return (isFileExists);
				},
				null,
				'_PathRenderer_Image2.includeInLayout');

		result[8] = new mx.binding.Binding(this,
				function():Bool {
					return (!isFileExists && AS3.as(data, Bool));
				},
				null,
				'_PathRenderer_Image3.visible');

		result[9] = new mx.binding.Binding(this,
				function():Bool {
					return (!isFileExists && AS3.as(data, Bool));
				},
				null,
				'_PathRenderer_Image3.includeInLayout');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(PathRenderer)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	@:meta(Embed(source = '/elements/images/tick_circle_frame.png'))
	private var _embed_mxml__elements_images_tick_circle_frame_png_968862167:Class<Dynamic>;

	@:meta(Embed(source = '/elements/images/icoSource.png'))
	private var _embed_mxml__elements_images_icoSource_png_261931945:Class<Dynamic>;

	@:meta(Embed(source = '/elements/images/cross_circle_frame.png'))
	private var _embed_mxml__elements_images_cross_circle_frame_png_2038997967:Class<Dynamic>;

	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def