/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.actionscript.as3project.settings
 *  Class:      NewLibraryProjectSettingRenderer
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/actionscript/as3project/settings/NewLibraryProjectSettingRenderer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.plugin.actionscript.as3project.settings;

import mx.collections.ArrayCollection;
import mx.events.FlexEvent;
import spark.components.RadioButton;
import spark.events.IndexChangeEvent;
import actionScripts.plugin.actionscript.as3project.vo.LibrarySettingsVO;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.graphics.SolidColorStroke;
import mx.styles.*;
import spark.components.CheckBox;
import spark.components.DataGroup;
import spark.components.DropDownList;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.RadioButtonGroup;
import spark.components.VGroup;

import spark.layouts.VerticalLayout;
import spark.primitives.Rect;

//  begin class def
class NewLibraryProjectSettingRenderer extends spark.components.VGroup implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbAIR:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cmbOption:spark.components.DropDownList;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var dgOutput:spark.components.DataGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lbl:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var radioButtonGroup:spark.components.RadioButtonGroup;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _NewLibraryProjectSettingRenderer_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_actionscript_as3project_settings_NewLibraryProjectSettingRendererWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(NewLibraryProjectSettingRenderer, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.gap = 0;
		this.paddingTop = 15;
		this.paddingBottom = 5;
		this.mxmlContent = [_NewLibraryProjectSettingRenderer_VGroup2_c(), _NewLibraryProjectSettingRenderer_Rect1_c(), _NewLibraryProjectSettingRenderer_HGroup1_c(), _NewLibraryProjectSettingRenderer_Rect2_c(), _NewLibraryProjectSettingRenderer_HGroup2_c()];
		_NewLibraryProjectSettingRenderer_RadioButtonGroup1_i();

		// events
		this.addEventListener('initialize', ___NewLibraryProjectSettingRenderer_VGroup1_initialize);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 31 - 104

	@:meta(Bindable())public var setting:NewLibraryProjectSetting;

	@:meta(Bindable())private var types:ArrayCollection;
	@:meta(Bindable())private var configOptions:ArrayCollection;

	private var _librarySettingObject:LibrarySettingsVO = new LibrarySettingsVO();

	public var librarySettingObject(get, never):LibrarySettingsVO;
	private function get_librarySettingObject():LibrarySettingsVO {
		_librarySettingObject.type = Std.string(cmbOption.selectedItem);
		_librarySettingObject.output = Std.string(radioButtonGroup.selectedValue);
		_librarySettingObject.includeAIR = AS3.as(cbAIR.selected, Bool);

		return _librarySettingObject;
	}

	private function onInitialization(event:FlexEvent):Void {
		types = new ArrayCollection([LibrarySettingsVO.FLEX_LIBRARY, LibrarySettingsVO.ACTIONSCRIPT_LIBRARY, LibrarySettingsVO.MOBILE_LIBRARY]);
		configOptions = new ArrayCollection([{
					'label': LibrarySettingsVO.GENERIC,
					'selected': true
				}, {
					'label': LibrarySettingsVO.MOBILE,
					'selected': false
				}]);
	}

	private function itemRendererFunction_handler(item:Dynamic):ClassFactory {
		var props:Dynamic = {
			'label': Reflect.field(item, 'label'),
			'value': Reflect.field(item, 'label'),
			'selected': Reflect.field(item, 'selected'),
			'group': radioButtonGroup
		};

		var factory:ClassFactory = new ClassFactory(RadioButton);
		factory.properties = props;
		return factory;
	}

	private function onTypeChange(event:IndexChangeEvent):Void {
		if (cmbOption.selectedIndex == 2) {
			radioButtonGroup.selectedIndex = 1;
			dgOutput.enabled = false;
			cbAIR.selected = true;
			cbAIR.enabled = false;
		} else {
			dgOutput.enabled = true;
			cbAIR.enabled = true;
		}
	}

	private function onOutputChange(event:Event):Void {
		if (radioButtonGroup.selectedIndex == 1) {
			cbAIR.selected = true;
			cbAIR.enabled = false;
		} else {
			cbAIR.enabled = true;
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _NewLibraryProjectSettingRenderer_RadioButtonGroup1_i():spark.components.RadioButtonGroup {
		var temp:spark.components.RadioButtonGroup = new spark.components.RadioButtonGroup();
		temp.addEventListener('change', __radioButtonGroup_change);
		temp.initialized(this, 'radioButtonGroup');
		radioButtonGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'radioButtonGroup', radioButtonGroup);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __radioButtonGroup_change(event:flash.events.Event):Void {
		onOutputChange(event);
	}

	private function _NewLibraryProjectSettingRenderer_VGroup2_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.paddingLeft = 15;
		temp.paddingBottom = 15;
		temp.paddingRight = 15;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_NewLibraryProjectSettingRenderer_Label1_i(), _NewLibraryProjectSettingRenderer_DropDownList1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsLabel';
		temp.text = 'Select Library Type';
		temp.id = 'lbl';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lbl = temp;
		mx.binding.BindingManager.executeBindings(this, 'lbl', lbl);
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_DropDownList1_i():spark.components.DropDownList {
		var temp:spark.components.DropDownList = new spark.components.DropDownList();
		temp.percentWidth = 100.0;
		temp.height = 24;
		temp.requireSelection = true;
		temp.setStyle('contentBackgroundColor', 16777215);
		temp.addEventListener('change', __cmbOption_change);
		temp.id = 'cmbOption';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cmbOption = temp;
		mx.binding.BindingManager.executeBindings(this, 'cmbOption', cmbOption);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __cmbOption_change(event:spark.events.IndexChangeEvent):Void {
		onTypeChange(event);
	}

	private function _NewLibraryProjectSettingRenderer_Rect1_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.percentWidth = 100.0;
		temp.alpha = 1;
		temp.stroke = _NewLibraryProjectSettingRenderer_SolidColorStroke1_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_SolidColorStroke1_c():mx.graphics.SolidColorStroke {
		var temp:mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
		temp.weight = 1;
		temp.color = 14342874;
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.paddingLeft = 15;
		temp.paddingTop = 15;
		temp.paddingBottom = 15;
		temp.paddingRight = 15;
		temp.mxmlContent = [_NewLibraryProjectSettingRenderer_Label2_c(), _NewLibraryProjectSettingRenderer_Spacer1_c(), _NewLibraryProjectSettingRenderer_DataGroup1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_Label2_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Output Configuration';
		temp.styleName = 'uiTextSettingsLabel';
		temp.setStyle('paddingTop', 4);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_DataGroup1_i():spark.components.DataGroup {
		var temp:spark.components.DataGroup = new spark.components.DataGroup();
		temp.styleName = 'uiTextSettingsValue';
		temp.itemRendererFunction = itemRendererFunction_handler;
		temp.layout = _NewLibraryProjectSettingRenderer_VerticalLayout1_c();
		temp.id = 'dgOutput';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		dgOutput = temp;
		mx.binding.BindingManager.executeBindings(this, 'dgOutput', dgOutput);
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_Rect2_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.percentWidth = 100.0;
		temp.alpha = 1;
		temp.stroke = _NewLibraryProjectSettingRenderer_SolidColorStroke2_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_SolidColorStroke2_c():mx.graphics.SolidColorStroke {
		var temp:mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
		temp.weight = 1;
		temp.color = 14342874;
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_HGroup2_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.paddingLeft = 15;
		temp.paddingTop = 15;
		temp.paddingBottom = 10;
		temp.paddingRight = 15;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_NewLibraryProjectSettingRenderer_Label3_c(), _NewLibraryProjectSettingRenderer_Spacer2_c(), _NewLibraryProjectSettingRenderer_CheckBox1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_Label3_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Include Adobe AIR Libraries';
		temp.styleName = 'uiTextSettingsLabel';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_Spacer2_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewLibraryProjectSettingRenderer_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.id = 'cbAIR';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbAIR = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbAIR', cbAIR);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___NewLibraryProjectSettingRenderer_VGroup1_initialize(event:mx.events.FlexEvent):Void {
		onInitialization(event);
	}

	//  binding mgmt
	private function _NewLibraryProjectSettingRenderer_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():mx.collections.IList {
					return (types);
				},
				null,
				'cmbOption.dataProvider');

		result[1] = new mx.binding.Binding(this,
				function():mx.collections.IList {
					return (configOptions);
				},
				null,
				'dgOutput.dataProvider');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(NewLibraryProjectSettingRenderer)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def