/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.settings
 *  Class:      SettingsView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/settings/SettingsView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package actionScripts.plugin.settings;

import mx.collections.ArrayCollection;
import mx.core.IVisualElement;
import mx.events.FlexEvent;
import mx.graphics.SolidColorStroke;
import spark.components.Button;
import spark.components.Label;
import spark.components.List;
import spark.primitives.Line;
import actionScripts.events.GeneralEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.settings.vo.ISetting;
import actionScripts.plugin.settings.vo.PluginSettingsWrapper;
import actionScripts.plugin.settings.vo.SettingsWrapper;
import actionScripts.valueObjects.ProjectVO;
import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;

import Array<spark.effects.animation.MotionPath>;
import spark.effects.animation.MotionPath;
import actionScripts.ui.IContentWindow;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;

import mx.styles.*;
import spark.components.BorderContainer;
import spark.components.Scroller;
import spark.components.VGroup;
import spark.effects.Animate;
import spark.effects.animation.SimpleMotionPath;
import spark.layouts.HorizontalLayout;

//  begin class def
class SettingsView extends spark.components.BorderContainer implements actionScripts.ui.IContentWindow implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var anim:spark.effects.Animate;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var buttonBar:spark.components.BorderContainer;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var buttonBarLine:spark.primitives.Line;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var leftPanel:spark.components.Scroller;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var listView:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var pth:spark.effects.animation.SimpleMotionPath;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var settingsContent:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var settingsContentScroller:spark.components.Scroller;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _SettingsView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_settings_SettingsViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(SettingsView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.layout = _SettingsView_HorizontalLayout1_c();
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_SettingsView_Array1_c);
		_SettingsView_Animate1_i();

		// events
		this.addEventListener('creationComplete', ___SettingsView_BorderContainer1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 4473924;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 32 - 478

	public static inline var EVENT_SAVE:String = 'saveSettingsEvent';
	public static inline var EVENT_CLOSE:String = 'closeSettingsEvent';

	private var categories:haxe.ds.ObjectMap<Dynamic, Dynamic> = new haxe.ds.ObjectMap<Dynamic, Dynamic>();
	private var forceClose:Bool = false;

	public var buttons:Array<Dynamic> = [];
	public var isNewProjectSettings:Bool = false;

	public var showDefaultButtons:Bool = true;
	public var defaultSaveLabel:String = 'Save';
	public var defaultCancelLabel:String = 'Cancel';
	public var defaultCloseLabel:String = 'Close';
	public var currentRequestedSelectedItem:IHasSettings;
	public var isSaved:Bool = false;
	public var exportProject:ProjectVO;

	private var currentSelectedItem:IHasSettings;
	private var _label:String = 'Settings';

	public var label(get, set):String;
	private function set_label(value:String):String {
		_label = value;
		return value;
	}

	private function get_label():String {
		return _label;
	}

	public var longLabel(get, never):String;
	private function get_longLabel():String {
		return 'Settings';
	}

	public function isChanged():Bool {
		// Allow tab to be closed without asking to save
		if (forceClose) {
			return false;
		}

		var setting:IHasSettings;
		for (categoryItems in categories) {
			for (setting in as3hx.Compat.each(categoryItems)) {
				if (setting.hasChanged()) {
					return true;
				}
			}
		}

		return false;
	}

	public function isEmpty():Bool {
		return false;
	}

	public function save():Void {
		function goSave():Void {
			isSaved = true;
			dispatchEvent(new Event(EVENT_SAVE));
			close(true);
		};
		// Iterate all settings we have & commit changed ones.
		var settings:Array<SettingsWrapper> = cast getSettingsForAllCategories();
		for (setting in settings) {
			if (setting.hasChanged()) {
				setting.commitChanges();
			}
		}

		// when calls by default sdk save settings
		if (!AS3.as(associatedData, Bool)) {
			goSave();
			return;
		}

		// Moon-106 fix:
		// @ modified devsena
		// to determine if this a new project creation call and to check if
		// same named folder or same named project is not exists to given path
		// @ note
		// a project's folder name can differ to it's named .as3proj file,
		// also a Flash Builder project not suppose to have any .as3proj file as well;
		// in that case project name contains in it's .project file
		//
		// Since in either Flash Builder or Moonshine project type, Moonshine always saves
		// it's saved data to .as3proj file only, we should check the .as3proj file existence first
		var project:ProjectVO = AS3.as(associatedData, ProjectVO);
		var projectPath:String = project.folderLocation.fileBridge.nativePath + project.folderLocation.fileBridge.separator + project.name;
		if (Std.is(project, AS3ProjectVO)) {
			var as3Project:AS3ProjectVO = AS3ProjectVO(project);
			projectPath += (as3Project.isVisualEditorProject) ? '.veditorproj' : '.as3proj';
		}
		var projectFile:FileLocation = new FileLocation(projectPath); /*
		 *@private
		 */
		if (AS3.as(projectFile.fileBridge.exists, Bool)) {
			goSave();
		} else if (!isNewProjectSettings) {
			projectFile = new FileLocation(project.folderLocation.fileBridge.nativePath + project.folderLocation.fileBridge.separator + '.project');
			if (AS3.as(projectFile.fileBridge.exists, Bool)) {
				goSave();
			}
		} else {
			goSave();
		}
	}

	public var associatedData:Dynamic;

	private var _dataProvider:Dynamic;

	@:meta(Bindable())
	public var dataProvider(get, set):Dynamic;
	private function get_dataProvider():Dynamic {
		return _dataProvider;
	}

	private function set_dataProvider(v:Dynamic):Dynamic {
		_dataProvider = v;
		return v;
	}

	@:meta(Bindable())
	private var _Width:Int = 250;

	public var Width(never, set):Int;
	private function set_Width(v:Int):Int {
		_Width = v;
		return v;
	}

	public function getSettingsForAllCategories():Array<SettingsWrapper> {
		var settings:Array<Dynamic> = [];

		for (cat in categories.keys()) {
			settings = settings.concat(categories.get(cat));
		}

		return settings;
	}

	public function addCategory(name:String):Void {
		categories.set(name, []);
	}

	public function getSettings(forCategory:String):Array<Dynamic> {
		return ((categories.get(forCategory) != null)) ? categories.get(forCategory) : [];
	}

	public function addSetting(settingsObject:IHasSettings, forCategory:String):Void {
		categories.get(forCategory).push(settingsObject);
	}

	public function close(force:Bool = false):Void {
		if (force) {
			forceClose = true;
		}

		if (isNewProjectSettings) {
			GlobalEventDispatcher.getInstance().removeEventListener(GeneralEvent.SCROLL_TO_TOP, onNewProjectScrollChange);
		}
		dispatchEvent(new Event(EVENT_CLOSE));
	}

	public function forceSelectItem(byQualifiedClassName:String):Void {
		var list:List;
		for (i in ...listView.numElements) {
			if (Std.is(listView.getElementAt(i), List)) {
				list = AS3.as(listView.getElementAt(i), List);
				break;
			}
		}

		if (list != null && list.dataProvider.length > 0) {
			for (j in as3hx.Compat.each(list.dataProvider)) {
				if (Reflect.field(j, 'qualifiedClassName') == byQualifiedClassName) {
					list.selectedItem = j;
					currentSelectedItem = AS3.as(j, IHasSettings);
					buildSettings(currentSelectedItem.getSettingsList());
					if (IDEModel.getInstance().userSavedTempSDKPath != null && byQualifiedClassName == 'actionScripts.plugins.as3project.mxmlc::MXMLCPlugin') {
						callLater(forceUpdateMXMLCompilerPlugin);
					}
					break;
				}
			}
		}
	}

	private function forceUpdateMXMLCompilerPlugin():Void {
		var settings:Array<SettingsWrapper> = cast getSettingsForAllCategories();
		for (setting in settings) {
			if (setting.qualifiedClassName == 'actionScripts.plugins.as3project.mxmlc::MXMLCPlugin') {
				var mxmlcSettings:Array<ISetting> = cast setting.getSettingsList();
				for (mxmlcSetting in mxmlcSettings) {
					if (mxmlcSetting.name == 'defaultFlexSDK') {
						mxmlcSetting.stringValue = IDEModel.getInstance().userSavedTempSDKPath;
						return;
					}
				}
			}
		}
	}

	private function onSettingsViewCreationComplete(event:FlexEvent):Void {
		var first:IHasSettings;

		for (category in categories.keys()) {
			var label:Label = new Label();
			label.percentWidth = 100;
			label.text = category;
			label.styleName = 'uiText';
			label.setStyle('paddingLeft', 15);
			label.setStyle('paddingTop', 20);
			label.setStyle('paddingBottom', 1);
			label.setStyle('fontSize', 13);
			label.setStyle('color', 0xdb5fce);
			label.setStyle('backgroundColor', 0x444444);

			listView.addElement(label);

			var list:List = new List();
			list.width = 251;
			list.x = -1;
			list.setStyle('paddingTop', -5);
			list.setStyle('contentBackgroundColor', 0x444444);
			list.setStyle('borderVisible', false);
			list.setStyle('rollOverColor', 0x555555);
			list.setStyle('gap', 0);
			list.labelField = 'name';
			list.requireSelection = true;
			list.focusEnabled = false;
			list.itemRenderer = new ClassFactory(SettingsCategoryItemRenderer);

			list.dataProvider = new ArrayCollection(categories.get(category));
			listView.addElement(list);
			list.addEventListener(Event.CHANGE, handleItemClick);

			if (first == null && list.dataProvider.length > 0) {
				if (currentRequestedSelectedItem != null) {
					first = AS3.as(list.dataProvider.getItemAt(list.dataProvider.getItemIndex(currentRequestedSelectedItem)), IHasSettings);
					list.selectedItem = first;
				} else {
					first = Reflect.getProperty(list.dataProvider, Std.string(0));
					list.selectedItem = first;
				}
			}
		}

		// Get list for first settings item
		if (first != null) {
			currentSelectedItem = first;
			buildSettings(first.getSettingsList());
		}
		//Moon-105 update handled here
		if (currentSelectedItem != null && currentSelectedItem.name == 'Templating Plugin') {
			updateButtons(true, false, false);
		} else {
			updateButtons(false, true, true);
		}

		if (isNewProjectSettings) {
			GlobalEventDispatcher.getInstance().addEventListener(GeneralEvent.SCROLL_TO_TOP, onNewProjectScrollChange, false, 0, true);
		}
	}

	private function handleItemClick(event:Event):Void {
		var list:List = AS3.as(event.target, List);
		var setting:IHasSettings = list.selectedItem;
		if (setting != null) {
			buildSettings(setting.getSettingsList());
			currentSelectedItem = setting;

			//Moon-105 update handled here
			if (currentSelectedItem.name == 'Templating Plugin') {
				updateButtons(true, false, false);
			} else {
				updateButtons(false, true, true);
			}
		}
	}

	private function onNewProjectScrollChange(event:GeneralEvent):Void {
		if (anim != null && AS3.as(anim.isPlaying, Bool)) {
			anim.stop();
		}
		if (settingsContent.layout.verticalScrollPosition > 140) {
			pth.valueTo = 140;
			anim.play([settingsContent.layout]);
		}
	}

	private function buildSettings(settingsList:Array<ISetting>):Void {
		settingsContent.removeAllElements();

		var line:Line;
		var rdr:IVisualElement;
		for (setting in settingsList) {
			rdr = setting.renderer;
			rdr.addEventListener('refresh', handleRefreshSettings, false, 0, true);

			settingsContent.addElement(rdr);

			line = new Line();
			line.percentWidth = 100;
			line.height = 1;
			line.stroke = new SolidColorStroke(0xdadada);
			settingsContent.addElement(line);
		}

		settingsContent.validateNow();
		settingsContentScroller.viewport.verticalScrollPosition += 1;
	}

	private function handleRefreshSettings(event:Event):Void {
		if (currentSelectedItem != null) {
			buildSettings(currentSelectedItem.getSettingsList());
		}
	}

	private function updateButtons(isClose:Bool, isSave:Bool, isCancel:Bool):Void {
		var buttonBarElement:IVisualElement = buttonBar.getElementAt(2);
		buttonBarElement.visible = buttonBarElement.includeInLayout = isClose;

		buttonBarElement = buttonBar.getElementAt(1);
		buttonBarElement.visible = buttonBarElement.includeInLayout = isCancel;

		buttonBarElement = buttonBar.getElementAt(0);
		buttonBarElement.visible = buttonBarElement.includeInLayout = isSave;
	}

	private function addButtons():Void {
		if (!showDefaultButtons && buttons.length == 0) {
			buttonBar.visible = buttonBar.includeInLayout = false;
			buttonBarLine.visible = buttonBarLine.includeInLayout = false;
			settingsContentScroller.bottom = 0;
		} else if (showDefaultButtons && buttons.length == 0) {
			var save:Button = new Button();
			save.label = defaultSaveLabel;
			save.addEventListener(MouseEvent.CLICK, handleSaveClicked);
			save.styleName = 'darkButton';
			buttonBar.addElement(save);

			var cancel:Button = new Button();
			cancel.label = defaultCancelLabel;
			cancel.addEventListener(MouseEvent.CLICK, handleCancelClicked);
			cancel.styleName = 'darkButton';
			buttonBar.addElement(cancel);

			//Moon-105 update handled here
			var close:Button = new Button();
			close.label = defaultCloseLabel;
			close.addEventListener(MouseEvent.CLICK, handleCancelClicked);
			close.styleName = 'darkButton';
			buttonBar.addElement(close);

		}

	}

	private function handleSaveClicked(event:MouseEvent):Void {
		IDEModel.getInstance().userSavedTempSDKPath = null;
		save();
	}

	private function handleCancelClicked(event:MouseEvent):Void {
		IDEModel.getInstance().userSavedTempSDKPath = null;
		close(true);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _SettingsView_Animate1_i():spark.effects.Animate {
		var temp:spark.effects.Animate = new spark.effects.Animate();
		temp.duration = 500;
		temp.motionPaths = [_SettingsView_SimpleMotionPath1_i()];
		anim = temp;
		mx.binding.BindingManager.executeBindings(this, 'anim', anim);
		return temp;
	}

	private function _SettingsView_SimpleMotionPath1_i():spark.effects.animation.SimpleMotionPath {
		var temp:spark.effects.animation.SimpleMotionPath = new spark.effects.animation.SimpleMotionPath();
		temp.property = 'verticalScrollPosition';
		pth = temp;
		mx.binding.BindingManager.executeBindings(this, 'pth', pth);
		return temp;
	}

	private function _SettingsView_HorizontalLayout1_c():spark.layouts.HorizontalLayout {
		var temp:spark.layouts.HorizontalLayout = new spark.layouts.HorizontalLayout();
		temp.gap = 0;
		return temp;
	}

	private function _SettingsView_Array1_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [_SettingsView_Scroller1_i(), _SettingsView_BorderContainer2_c()];
		return temp;
	}

	private function _SettingsView_Scroller1_i():spark.components.Scroller {
		var temp:spark.components.Scroller = new spark.components.Scroller();
		temp.percentHeight = 100.0;
		temp.viewport = _SettingsView_VGroup1_i();
		temp.setStyle('horizontalScrollPolicy', 'off');
		temp.setStyle('contentBackgroundColor', 4473924);
		temp.id = 'leftPanel';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		leftPanel = temp;
		mx.binding.BindingManager.executeBindings(this, 'leftPanel', leftPanel);
		return temp;
	}

	private function _SettingsView_VGroup1_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.gap = 0;
		temp.focusEnabled = false;
		temp.id = 'listView';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		listView = temp;
		mx.binding.BindingManager.executeBindings(this, 'listView', listView);
		return temp;
	}

	private function _SettingsView_BorderContainer2_c():spark.components.BorderContainer {
		var temp:spark.components.BorderContainer = new spark.components.BorderContainer();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_SettingsView_Array2_c);
		temp.setStyle('backgroundColor', 16777215);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SettingsView_Array2_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [_SettingsView_Scroller2_i(), _SettingsView_Line1_i(), _SettingsView_BorderContainer3_i()];
		return temp;
	}

	private function _SettingsView_Scroller2_i():spark.components.Scroller {
		var temp:spark.components.Scroller = new spark.components.Scroller();
		temp.percentWidth = 100.0;
		temp.minWidth = 450;
		temp.bottom = 41;
		temp.top = 0;
		temp.percentHeight = 100.0;
		temp.viewport = _SettingsView_VGroup2_i();
		temp.setStyle('horizontalScrollPolicy', 'off');
		temp.setStyle('contentBackgroundColor', 4473924);
		temp.id = 'settingsContentScroller';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		settingsContentScroller = temp;
		mx.binding.BindingManager.executeBindings(this, 'settingsContentScroller', settingsContentScroller);
		return temp;
	}

	private function _SettingsView_VGroup2_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.verticalAlign = 'top';
		temp.paddingLeft = 20;
		temp.paddingRight = 20;
		temp.paddingTop = 20;
		temp.id = 'settingsContent';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		settingsContent = temp;
		mx.binding.BindingManager.executeBindings(this, 'settingsContent', settingsContent);
		return temp;
	}

	private function _SettingsView_Line1_i():spark.primitives.Line {
		var temp:spark.primitives.Line = new spark.primitives.Line();
		temp.percentWidth = 100.0;
		temp.bottom = 41;
		temp.stroke = _SettingsView_SolidColorStroke1_c();
		temp.initialized(this, 'buttonBarLine');
		buttonBarLine = temp;
		mx.binding.BindingManager.executeBindings(this, 'buttonBarLine', buttonBarLine);
		return temp;
	}

	private function _SettingsView_SolidColorStroke1_c():mx.graphics.SolidColorStroke {
		var temp:mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
		temp.color = 3158064;
		temp.weight = 1;
		return temp;
	}

	private function _SettingsView_BorderContainer3_i():spark.components.BorderContainer {
		var temp:spark.components.BorderContainer = new spark.components.BorderContainer();
		temp.percentWidth = 100.0;
		temp.height = 41;
		temp.bottom = 0;
		temp.layout = _SettingsView_HorizontalLayout2_c();
		temp.setStyle('backgroundColor', 4473924);
		temp.addEventListener('creationComplete', __buttonBar_creationComplete);
		temp.id = 'buttonBar';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		buttonBar = temp;
		mx.binding.BindingManager.executeBindings(this, 'buttonBar', buttonBar);
		return temp;
	}

	private function _SettingsView_HorizontalLayout2_c():spark.layouts.HorizontalLayout {
		var temp:spark.layouts.HorizontalLayout = new spark.layouts.HorizontalLayout();
		temp.paddingRight = 10;
		temp.paddingTop = 0;
		temp.horizontalAlign = 'right';
		temp.verticalAlign = 'middle';
		return temp;
	}

	/**
	 * @private
	 **/
	public function __buttonBar_creationComplete(event:mx.events.FlexEvent):Void {
		addButtons();
	}

	/**
	 * @private
	 **/
	public function ___SettingsView_BorderContainer1_creationComplete(event:mx.events.FlexEvent):Void {
		onSettingsViewCreationComplete(event);
	}

	//  binding mgmt
	private function _SettingsView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Float {
					return (_Width);
				},
				null,
				'leftPanel.width');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(SettingsView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def