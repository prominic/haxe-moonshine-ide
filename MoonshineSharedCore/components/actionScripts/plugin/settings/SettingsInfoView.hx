/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.settings
 *  Class:      SettingsInfoView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/settings/SettingsInfoView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.plugin.settings;

import mx.events.FlexEvent;
import spark.components.Button;

import actionScripts.ui.IContentWindow;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.BorderContainer;
import spark.components.Label;
import spark.layouts.HorizontalLayout;

//  begin class def
class SettingsInfoView extends spark.components.BorderContainer implements actionScripts.ui.IContentWindow {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var buttonBar:spark.components.BorderContainer;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.layout = _SettingsInfoView_HorizontalLayout1_c();
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_SettingsInfoView_Array1_c);

		// events
		this.addEventListener('creationComplete', ___SettingsInfoView_BorderContainer1_creationComplete);

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 4473924;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 32 - 92

	public static inline var EVENT_CLOSE:String = 'closeSettingsEvent';

	public var defaultCloseLabel:String = 'Close';

	private var _label:String = 'Settings';

	public var label(get, set):String;
	private function set_label(value:String):String {
		_label = value;
		return value;
	}

	private function get_label():String {
		return _label;
	}

	public var longLabel(get, never):String;
	private function get_longLabel():String {
		return 'Settings';
	}

	public function isChanged():Bool {
		// Allow tab to be closed without asking to save
		return false;
	}

	public function isEmpty():Bool {
		return false;
	}

	public function save():Void {}

	public function close(force:Bool = false):Void {
		dispatchEvent(new Event(EVENT_CLOSE));
	}

	private function handleCancelClicked(event:MouseEvent):Void {
		close(true);
	}

	private function onSettingsInfoViewCreationComplete(event:FlexEvent):Void {
		var close:Button = new Button();
		close.label = defaultCloseLabel;
		close.addEventListener(MouseEvent.CLICK, handleCancelClicked);
		close.styleName = 'darkButton';
		buttonBar.addElement(close);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _SettingsInfoView_HorizontalLayout1_c():spark.layouts.HorizontalLayout {
		var temp:spark.layouts.HorizontalLayout = new spark.layouts.HorizontalLayout();
		temp.gap = 0;
		return temp;
	}

	private function _SettingsInfoView_Array1_c():Array<Dynamic> {
		var temp:Array<BorderContainer> = [_SettingsInfoView_BorderContainer2_c()];
		return cast temp;
	}

	private function _SettingsInfoView_BorderContainer2_c():spark.components.BorderContainer {
		var temp:spark.components.BorderContainer = new spark.components.BorderContainer();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_SettingsInfoView_Array2_c);
		temp.setStyle('backgroundColor', 16777215);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SettingsInfoView_Array2_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [_SettingsInfoView_Label1_c(), _SettingsInfoView_BorderContainer3_i()];
		return temp;
	}

	private function _SettingsInfoView_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Project configuration is currently managed by build.gradle only.';
		temp.horizontalCenter = 0;
		temp.top = 20;
		temp.setStyle('fontSize', 20);
		temp.setStyle('fontFamily', 'DejaVuSans');
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SettingsInfoView_BorderContainer3_i():spark.components.BorderContainer {
		var temp:spark.components.BorderContainer = new spark.components.BorderContainer();
		temp.percentWidth = 100.0;
		temp.height = 41;
		temp.bottom = 0;
		temp.layout = _SettingsInfoView_HorizontalLayout2_c();
		temp.setStyle('backgroundColor', 4473924);
		temp.id = 'buttonBar';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		buttonBar = temp;
		mx.binding.BindingManager.executeBindings(this, 'buttonBar', buttonBar);
		return temp;
	}

	private function _SettingsInfoView_HorizontalLayout2_c():spark.layouts.HorizontalLayout {
		var temp:spark.layouts.HorizontalLayout = new spark.layouts.HorizontalLayout();
		temp.paddingRight = 10;
		temp.paddingTop = 0;
		temp.horizontalAlign = 'right';
		temp.verticalAlign = 'middle';
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SettingsInfoView_BorderContainer1_creationComplete(event:mx.events.FlexEvent):Void {
		onSettingsInfoViewCreationComplete(event);
	}

}

//  end package def