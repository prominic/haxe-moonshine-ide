/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.settings.renderers
 *  Class:      DropDownListSettingRenderer
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/settings/renderers/DropDownListSettingRenderer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package actionScripts.plugin.settings.renderers;

import mx.events.FlexEvent;
import spark.events.IndexChangeEvent;
import actionScripts.plugin.settings.vo.DropDownListSetting;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.DropDownList;
import spark.components.Label;
import spark.components.VGroup;

//  begin class def
class DropDownListSettingRenderer extends spark.components.VGroup implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cmbOption:spark.components.DropDownList;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lbl:spark.components.Label;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _DropDownListSettingRenderer_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_settings_renderers_DropDownListSettingRendererWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(DropDownListSettingRenderer, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.paddingLeft = 15;
		this.paddingTop = 15;
		this.paddingRight = 15;
		this.paddingBottom = 15;
		this.mxmlContent = [_DropDownListSettingRenderer_Label1_i(), _DropDownListSettingRenderer_DropDownList1_i()];

		// events
		this.addEventListener('creationComplete', ___DropDownListSettingRenderer_VGroup1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 29 - 72

	@:meta(Bindable())
	public var setting:DropDownListSetting;

	private function onDropDownListSettingCreationComplete(event:FlexEvent):Void {
		cmbOption.dataProvider = setting.dataProvider;
		if (setting.labelField != null) {
			cmbOption.labelField = setting.labelField;
		}

		if (cmbOption.dataProvider.length > 0) {
			cmbOption.callLater(function():Void {
						if (Std.is(cmbOption.dataProvider.getItemAt(0), String)) {
							cmbOption.selectedItem = Reflect.field(setting.provider, setting.name);
						} else {
							for (i in 0...setting.dataProvider.length) {
								if (Reflect.field(setting.provider, setting.name) == Reflect.getProperty(Reflect.getProperty(setting.dataProvider, Std.string(i)), setting.labelField)) {
									cmbOption.selectedIndex = i;
									break;
								}
							}
						}

						// default value
						setting.stringValue = (setting.labelField != null) ? Std.string(Reflect.getProperty(Reflect.getProperty(setting.dataProvider, Std.string(cmbOption.selectedIndex)), setting.labelField)) : Std.string(Reflect.getProperty(setting.dataProvider, Std.string(cmbOption.selectedIndex)));
					});
		}
	}

	private function onOptionChanged(event:IndexChangeEvent):Void {
		setting.stringValue = (setting.labelField != null) ? Std.string(Reflect.getProperty(cmbOption.selectedItem, setting.labelField)) : Std.string(Std.string(cmbOption.selectedItem));
		setting.dispatchEvent(new Event(Event.CHANGE));
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _DropDownListSettingRenderer_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsLabel';
		temp.id = 'lbl';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lbl = temp;
		mx.binding.BindingManager.executeBindings(this, 'lbl', lbl);
		return temp;
	}

	private function _DropDownListSettingRenderer_DropDownList1_i():spark.components.DropDownList {
		var temp:spark.components.DropDownList = new spark.components.DropDownList();
		temp.percentWidth = 100.0;
		temp.height = 24;
		temp.requireSelection = true;
		temp.setStyle('contentBackgroundColor', 16777215);
		temp.addEventListener('change', __cmbOption_change);
		temp.id = 'cmbOption';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cmbOption = temp;
		mx.binding.BindingManager.executeBindings(this, 'cmbOption', cmbOption);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __cmbOption_change(event:spark.events.IndexChangeEvent):Void {
		onOptionChanged(event);
	}

	/**
	 * @private
	 **/
	public function ___DropDownListSettingRenderer_VGroup1_creationComplete(event:mx.events.FlexEvent):Void {
		onDropDownListSettingCreationComplete(event);
	}

	//  binding mgmt
	private function _DropDownListSettingRenderer_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (setting.label);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'lbl.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(DropDownListSettingRenderer)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def