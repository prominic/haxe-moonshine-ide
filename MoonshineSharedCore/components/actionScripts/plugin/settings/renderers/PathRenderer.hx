/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.settings.renderers
 *  Class:      PathRenderer
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/settings/renderers/PathRenderer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package actionScripts.plugin.settings.renderers;

import mx.collections.ArrayCollection;
import mx.controls.Alert;
import mx.core.FlexGlobals;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.managers.PopUpManager;
import spark.events.IndexChangeEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.ProjectEvent;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.settings.vo.AbstractSetting;
import actionScripts.plugin.settings.vo.PathSetting;
import actionScripts.ui.tabview.CloseTabEvent;
import actionScripts.utils.SDKUtils;
import actionScripts.utils.UtilsCore;
import actionScripts.valueObjects.SDKReferenceVO;
import components.popup.SDKDefinePopup;
import components.popup.SDKSelectorPopup;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.DropDownList;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.VGroup;

//  begin class def
class PathRenderer extends spark.components.VGroup implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _PathRenderer_Button1:spark.components.Button;

	/**
	 * @private
	 **/
	public var _PathRenderer_Button2:spark.components.Button;

	/**
	 * @private
	 **/
	public var _PathRenderer_Button3:spark.components.Button;

	/**
	 * @private
	 **/
	public var _PathRenderer_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cmbPath:spark.components.DropDownList;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var hgUndefinedSDK:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblMessage:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblValue:spark.components.Label;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _PathRenderer_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_settings_renderers_PathRendererWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(PathRenderer, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.paddingLeft = 15;
		this.paddingTop = 15;
		this.paddingRight = 15;
		this.paddingBottom = 15;
		this.mxmlContent = [_PathRenderer_HGroup1_c(), _PathRenderer_Label2_i(), _PathRenderer_DropDownList1_i(), _PathRenderer_Label3_i(), _PathRenderer_HGroup2_i()];

		// events
		this.addEventListener('creationComplete', ___PathRenderer_VGroup1_creationComplete);
		this.addEventListener('removedFromStage', ___PathRenderer_VGroup1_removedFromStage);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 34 - 323

	@:meta(Bindable())
	public var setting:PathSetting;
	@:meta(Bindable())
	public var isSDKPath:Bool = false;
	@:meta(Bindable())
	public var isDropDown:Bool = false;
	@:meta(Bindable())
	public var dropdownListItems:ArrayCollection;

	@:meta(Bindable())
	private var model:IDEModel = IDEModel.getInstance();

	private var sdkPopup:SDKSelectorPopup;
	private var sdkPathPopup:SDKDefinePopup;

	private var message:String;
	private var messageType:String;

	public function setMessage(value:String, type:String):Void {
		this.message = value;
		this.messageType = type;

		if (lblMessage == null || this.message == null) {
			return;
		}

		lblMessage.includeInLayout = lblMessage.visible = true;
		if (isDropDown && dropdownListItems != null && dropdownListItems.length == 0) {
			value = 'Select path to continue';
			type = AbstractSetting.MESSAGE_CRITICAL;
		}

		switch (type) {
			case AbstractSetting.MESSAGE_CRITICAL:
				lblMessage.setStyle('color', 0xff0000);
			case AbstractSetting.MESSAGE_IMPORTANT:
				lblMessage.setStyle('color', 0x0099ff);
			case _:
				lblMessage.setStyle('color', 0x666666);
		}

		lblMessage.text = value;
	}

	private function selectPath():Void {
		// opens only if sdkpop not opens already
		if (isSDKPath) {
			if (sdkPopup == null) {
				sdkPopup = AS3.as(PopUpManager.createPopUp(AS3.as(FlexGlobals.topLevelApplication, DisplayObject), SDKSelectorPopup, true), SDKSelectorPopup);
				sdkPopup.addEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKUpdated);
				sdkPopup.addEventListener(CloseEvent.CLOSE, onSDKPopupClosed);
				PopUpManager.centerPopUp(sdkPopup);
			}
		} else {
			if (setting.directory) {
				model.fileCore.browseForDirectory('Select directory', openFile, null, setting.stringValue);
			} else {
				model.fileCore.browseForOpen('Select file', openFile, null, setting.fileFilters);
			}// for Balsmiq project we need only .xml file to get selected.
		}
	}

	private function clearPath():Void {
		setting.stringValue = '';
		lblMessage.text = '';
	}

	private function onDefineSDKClosed(event:Event):Void {
		if (model.userSavedTempSDKPath != null) {
			var sdkVO:SDKReferenceVO = UtilsCore.getUserDefinedSDK(model.userSavedTempSDKPath, 'path');
			setting.stringValue = sdkVO.path;
			lblValue.text = sdkVO.name;
			hideDefineSDKLink(setting.stringValue);
			model.userSavedTempSDKPath = null;
		}

		model.sdkInstallerView.removeEventListener(CloseTabEvent.EVENT_TAB_CLOSED, onDefineSDKClosed);
		model.sdkInstallerView = null;
	}

	private function onFlexSDKUpdated(event:ProjectEvent):Void {
		// in case user deleted the entry
		setting.stringValue = AS3.string(Reflect.field(event.anObject, 'path'));
		lblValue.text = Reflect.field(event.anObject, 'name');
		if (Reflect.field(event.anObject, 'status') == SDKUtils.BUNDLED) {
			lblValue.text += ' (Bundled)';
		}
		hideDefineSDKLink(AS3.string(Reflect.field(event.anObject, 'name')));
		onSDKPopupClosed(null);
	}

	private function onSDKPopupClosed(event:CloseEvent):Void {
		sdkPopup.removeEventListener(CloseEvent.CLOSE, onSDKPopupClosed);
		sdkPopup.removeEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKUpdated);
		sdkPopup = null;
	}

	private function openFile(fileDir:Dynamic):Void {
		setting.stringValue = AS3.string(Reflect.field(fileDir, 'nativePath'));
		if (isDropDown) {
			dropdownListItems.addItem(Reflect.field(fileDir, 'nativePath'));
		}

		cmbPath.selectedItem = setting.stringValue;
		setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));

	}

	private function onPathRendererCreationComplete(event:FlexEvent):Void {
		dropdownListItems = setting.dropdownListItems;

		// process this following only in case of project's custom SDK
		if (isSDKPath && setting.stringValue != null) {
			// check if sdk is available to the user
			var isFound:SDKReferenceVO = UtilsCore.getUserDefinedSDK(setting.stringValue, 'path');
			if (isFound == null) {
				hgUndefinedSDK.visible = hgUndefinedSDK.includeInLayout = true;
			} else {
				hideDefineSDKLink(isFound.name);
				lblValue.text = isFound.name;
				if (isFound.status == SDKUtils.BUNDLED) {
					lblValue.text += ' (Bundled)';
				}
			}
		}

		if (isDropDown) {
			cmbPath.setStyle('contentBackgroundColor', '#FFFFFF');
			cmbPath.selectedItem = Reflect.field(setting.provider, setting.name);
		}

		setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));

		// validate path
		if (!isSDKPath && setting.stringValue != null && !isDropDown) {
			if (!(AS3.as(new FileLocation(setting.stringValue).fileBridge.exists, Bool))) {
				setMessage('Path is not accessible.', AbstractSetting.MESSAGE_CRITICAL);
			}
		} else {
			setMessage(this.message, this.messageType);
		}
	}

	private function hideDefineSDKLink(withSDKName:String):Void {
		if (AS3.as(hgUndefinedSDK.visible, Bool)) {
			hgUndefinedSDK.visible = hgUndefinedSDK.includeInLayout = false;

			// updates to project custom SDK values
			if (Reflect.hasField(setting.provider, 'buildOptions')) {
				Reflect.setField(Reflect.field(setting.provider, 'buildOptions'), 'customSDKPath', withSDKName);
				Reflect.setField(Reflect.field(setting.provider, 'swfOutput'), 'swfVersion', SDKUtils.getSdkSwfMajorVersion(withSDKName));
			}// application default sdk
			else {
				Reflect.hasField(setting.provider, setting.name);{
					Reflect.setField(setting.provider, setting.name, withSDKName);
				}
			}
		}
	}

	private function onSDKAddition(event:MouseEvent):Void {
		if (sdkPathPopup == null) {
			sdkPathPopup = AS3.as(PopUpManager.createPopUp(AS3.as(FlexGlobals.topLevelApplication, DisplayObject), SDKDefinePopup, false), SDKDefinePopup);
			sdkPathPopup.addEventListener(CloseEvent.CLOSE, onSDKPathPopupClosed);
			sdkPathPopup.addEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKPathUpdated);
			PopUpManager.centerPopUp(sdkPathPopup);
		} else {
			PopUpManager.bringToFront(sdkPathPopup);
		}
	}

	private function onSDKPathPopupClosed(event:CloseEvent):Void {
		if (sdkPathPopup == null) {
			return;
		}
		sdkPathPopup.removeEventListener(CloseEvent.CLOSE, onSDKPathPopupClosed);
		sdkPathPopup.removeEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKPathUpdated);
		sdkPathPopup = null;
	}

	private function onFlexSDKPathUpdated(event:ProjectEvent):Void {
		function onSDKChooseConfirmed(evnt:CloseEvent):Void {
			if (evnt == null || evnt.detail == Alert.YES) {
				setting.stringValue = AS3.string(Reflect.field(event.anObject, 'path'));
				lblValue.text = Reflect.field(event.anObject, 'label');
				hideDefineSDKLink(setting.stringValue);
			}
		};
		onSDKPathPopupClosed(null);
		// add sdk
		// don't add if said sdk already added
		var isAlreadyAdded:SDKReferenceVO = UtilsCore.getUserDefinedSDK(AS3.string(Reflect.field(event.anObject, 'path')), 'path');
		if (isAlreadyAdded == null) {
			var tmp:SDKReferenceVO = new SDKReferenceVO();
			tmp.name = AS3.string(Reflect.field(event.anObject, 'label'));
			tmp.path = AS3.string(Reflect.field(event.anObject, 'path'));
			model.userSavedSDKs.addItem(tmp);
			GlobalEventDispatcher.getInstance().dispatchEvent(new ProjectEvent(ProjectEvent.FLEX_SDK_UDPATED));
		} /*
		* @local
		* we need this to be local
		*/
		// check if newly added matches with customSDKpath
		// in a project's environment case
		if (setting.stringValue != null) {
			if (Reflect.field(event.anObject, 'label') != setting.stringValue) {
				Alert.show('New SDK is different than the defined one. Use it anyway?', 'Confirm!', Alert.YES | Alert.NO, null, onSDKChooseConfirmed);
			} else {
				onSDKChooseConfirmed(null);
			}
		}
	}

	private function onFocusIn(event:FocusEvent):Void {
		event.currentTarget.text = '';
	}

	private function onDropDownListPathChange(event:IndexChangeEvent):Void {
		setting.stringValue = Std.string(cmbPath.selectedItem);
		setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));
	}

	private function onPathRendererRemovedFromStage(event:Event):Void {
		// in case of MXMLC Compiler Plugin
		onSDKPathPopupClosed(null);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _PathRenderer_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_PathRenderer_Label1_i(), _PathRenderer_Spacer1_c(), _PathRenderer_Button1_i(), _PathRenderer_Button2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _PathRenderer_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsLabel';
		temp.id = '_PathRenderer_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_PathRenderer_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_PathRenderer_Label1', _PathRenderer_Label1);
		return temp;
	}

	private function _PathRenderer_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _PathRenderer_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Clear';
		temp.addEventListener('click', ___PathRenderer_Button1_click);
		temp.id = '_PathRenderer_Button1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_PathRenderer_Button1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_PathRenderer_Button1', _PathRenderer_Button1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___PathRenderer_Button1_click(event:flash.events.MouseEvent):Void {
		clearPath();
	}

	private function _PathRenderer_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Change';
		temp.addEventListener('click', ___PathRenderer_Button2_click);
		temp.id = '_PathRenderer_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_PathRenderer_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_PathRenderer_Button2', _PathRenderer_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___PathRenderer_Button2_click(event:flash.events.MouseEvent):Void {
		selectPath();
	}

	private function _PathRenderer_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsValue';
		temp.percentWidth = 98.0;
		temp.setStyle('paddingTop', 10);
		temp.id = 'lblValue';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblValue = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblValue', lblValue);
		return temp;
	}

	private function _PathRenderer_DropDownList1_i():spark.components.DropDownList {
		var temp:spark.components.DropDownList = new spark.components.DropDownList();
		temp.percentWidth = 100.0;
		temp.height = 24;
		temp.requireSelection = true;
		temp.addEventListener('change', __cmbPath_change);
		temp.id = 'cmbPath';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cmbPath = temp;
		mx.binding.BindingManager.executeBindings(this, 'cmbPath', cmbPath);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __cmbPath_change(event:spark.events.IndexChangeEvent):Void {
		onDropDownListPathChange(event);
	}

	private function _PathRenderer_Label3_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsLabel';
		temp.percentWidth = 100.0;
		temp.maxDisplayedLines = 3;
		temp.includeInLayout = false;
		temp.visible = false;
		temp.setStyle('color', 6710886);
		temp.setStyle('fontSize', 12);
		temp.id = 'lblMessage';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblMessage = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblMessage', lblMessage);
		return temp;
	}

	private function _PathRenderer_HGroup2_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.gap = 4;
		temp.visible = false;
		temp.includeInLayout = false;
		temp.mxmlContent = [_PathRenderer_Label4_c(), _PathRenderer_Button3_i()];
		temp.id = 'hgUndefinedSDK';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		hgUndefinedSDK = temp;
		mx.binding.BindingManager.executeBindings(this, 'hgUndefinedSDK', hgUndefinedSDK);
		return temp;
	}

	private function _PathRenderer_Label4_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'This SDK is not defined.';
		temp.styleName = 'uiTextSettingsLabel';
		temp.setStyle('color', 16711680);
		temp.setStyle('fontSize', 12);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _PathRenderer_Button3_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Define it now';
		temp.useHandCursor = true;
		temp.buttonMode = true;
		temp.addEventListener('click', ___PathRenderer_Button3_click);
		temp.id = '_PathRenderer_Button3';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_PathRenderer_Button3 = temp;
		mx.binding.BindingManager.executeBindings(this, '_PathRenderer_Button3', _PathRenderer_Button3);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___PathRenderer_Button3_click(event:flash.events.MouseEvent):Void {
		onSDKAddition(event);
	}

	/**
	 * @private
	 **/
	public function ___PathRenderer_VGroup1_creationComplete(event:mx.events.FlexEvent):Void {
		onPathRendererCreationComplete(event);
	}

	/**
	 * @private
	 **/
	public function ___PathRenderer_VGroup1_removedFromStage(event:flash.events.Event):Void {
		onPathRendererRemovedFromStage(event);
	}

	//  binding mgmt
	private function _PathRenderer_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (setting.label);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_PathRenderer_Label1.text');

		result[1] = new mx.binding.Binding(this,
				function():Class<Dynamic> {
					return (LinkButtonSkin);
				},
				function(_sourceFunctionReturnValue:Class<Dynamic>):Void {
					_PathRenderer_Button1.setStyle('skinClass', _sourceFunctionReturnValue);
				},
				'_PathRenderer_Button1.skinClass');

		result[2] = new mx.binding.Binding(this,
				function():Class<Dynamic> {
					return (LinkButtonSkin);
				},
				function(_sourceFunctionReturnValue:Class<Dynamic>):Void {
					_PathRenderer_Button2.setStyle('skinClass', _sourceFunctionReturnValue);
				},
				'_PathRenderer_Button2.skinClass');

		result[3] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = ((setting.stringValue != null) ? setting.stringValue : 'Not Set');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'lblValue.text');

		result[4] = new mx.binding.Binding(this,
				function():Bool {
					return (!isDropDown);
				},
				null,
				'lblValue.visible');

		result[5] = new mx.binding.Binding(this,
				function():Bool {
					return (!isDropDown);
				},
				null,
				'lblValue.includeInLayout');

		result[6] = new mx.binding.Binding(this,
				null,
				null,
				'cmbPath.dataProvider', 'dropdownListItems');

		result[7] = new mx.binding.Binding(this,
				null,
				null,
				'cmbPath.visible', 'isDropDown');

		result[8] = new mx.binding.Binding(this,
				null,
				null,
				'cmbPath.includeInLayout', 'isDropDown');

		result[9] = new mx.binding.Binding(this,
				function():Class<Dynamic> {
					return (LinkButtonSkin);
				},
				function(_sourceFunctionReturnValue:Class<Dynamic>):Void {
					_PathRenderer_Button3.setStyle('skinClass', _sourceFunctionReturnValue);
				},
				'_PathRenderer_Button3.skinClass');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(PathRenderer)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def