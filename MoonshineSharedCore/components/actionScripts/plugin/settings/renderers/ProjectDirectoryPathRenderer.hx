/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.settings.renderers
 *  Class:      ProjectDirectoryPathRenderer
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/settings/renderers/ProjectDirectoryPathRenderer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package actionScripts.plugin.settings.renderers;

import actionScripts.plugin.settings.vo.ProjectDirectoryPathSetting;
import mx.collections.ArrayCollection;
import mx.events.FlexEvent;
import mx.utils.ObjectUtil;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.settings.vo.AbstractSetting;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.VGroup;

//  begin class def
class ProjectDirectoryPathRenderer extends spark.components.VGroup implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _ProjectDirectoryPathRenderer_Button1:spark.components.Button;

	/**
	 * @private
	 **/
	public var _ProjectDirectoryPathRenderer_Button2:spark.components.Button;

	/**
	 * @private
	 **/
	public var _ProjectDirectoryPathRenderer_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblMessage:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblValue:spark.components.Label;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _ProjectDirectoryPathRenderer_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_settings_renderers_ProjectDirectoryPathRendererWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(ProjectDirectoryPathRenderer, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.paddingLeft = 15;
		this.paddingTop = 15;
		this.paddingRight = 15;
		this.paddingBottom = 15;
		this.mxmlContent = [_ProjectDirectoryPathRenderer_HGroup1_c(), _ProjectDirectoryPathRenderer_Label2_i(), _ProjectDirectoryPathRenderer_Label3_i()];

		// events
		this.addEventListener('creationComplete', ___ProjectDirectoryPathRenderer_VGroup1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 33 - 121

	@:meta(Bindable())
	public var setting:ProjectDirectoryPathSetting;
	@:meta(Bindable())
	public var historyPaths:ArrayCollection;

	@:meta(Bindable())
	private var model:IDEModel = IDEModel.getInstance();

	private var message:String;
	private var messageType:String;

	public function setMessage(value:String, type:String):Void {
		this.message = value;
		this.messageType = type;

		if (lblMessage == null || this.message == null) {
			return;
		}

		lblMessage.includeInLayout = lblMessage.visible = true;
		if (historyPaths != null && historyPaths.length == 0) {
			value = 'Select path to continue';
			type = AbstractSetting.MESSAGE_CRITICAL;
		}

		switch (type) {
			case AbstractSetting.MESSAGE_CRITICAL:
				lblMessage.setStyle('color', 0xff0000);
			case AbstractSetting.MESSAGE_IMPORTANT:
				lblMessage.setStyle('color', 0x0099ff);
			case _:
				lblMessage.setStyle('color', 0x666666);
		}

		lblMessage.text = value;
	}

	private function onBrowserForDirectory(fileDir:Dynamic):Void {
		setting.stringValue = AS3.string(Reflect.field(fileDir, 'nativePath'));
		historyPaths.addItem(setting.stringValue);

		setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));
	}

	private function onChangePathClick(event:MouseEvent):Void {
		var startFromLocation:String = (Reflect.field(setting.provider, setting.name) != null) ?
		AS3.string(Reflect.field(setting.provider, setting.name)) :
		setting.projectDirectoryPath;
		model.fileCore.browseForDirectory('Select directory', onBrowserForDirectory, null, startFromLocation);
	}

	private function onClearPathClick(event:MouseEvent):Void {
		setting.stringValue = '';
		lblMessage.text = '';
	}

	private function onProjectDirectoryPathRendererCreationComplete(event:FlexEvent):Void {
		historyPaths = AS3.as(ObjectUtil.copy(model.recentSaveProjectPath), ArrayCollection);
		if (historyPaths.length == 0) {
			historyPaths.addItem(Reflect.field(setting.provider, setting.name));
		}

		setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));

		setMessage(this.message, this.messageType);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _ProjectDirectoryPathRenderer_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_ProjectDirectoryPathRenderer_Label1_i(), _ProjectDirectoryPathRenderer_Spacer1_c(), _ProjectDirectoryPathRenderer_Button1_i(), _ProjectDirectoryPathRenderer_Button2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ProjectDirectoryPathRenderer_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsLabel';
		temp.id = '_ProjectDirectoryPathRenderer_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ProjectDirectoryPathRenderer_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ProjectDirectoryPathRenderer_Label1', _ProjectDirectoryPathRenderer_Label1);
		return temp;
	}

	private function _ProjectDirectoryPathRenderer_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ProjectDirectoryPathRenderer_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Clear';
		temp.addEventListener('click', ___ProjectDirectoryPathRenderer_Button1_click);
		temp.id = '_ProjectDirectoryPathRenderer_Button1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ProjectDirectoryPathRenderer_Button1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ProjectDirectoryPathRenderer_Button1', _ProjectDirectoryPathRenderer_Button1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ProjectDirectoryPathRenderer_Button1_click(event:flash.events.MouseEvent):Void {
		onClearPathClick(event);
	}

	private function _ProjectDirectoryPathRenderer_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Change';
		temp.addEventListener('click', ___ProjectDirectoryPathRenderer_Button2_click);
		temp.id = '_ProjectDirectoryPathRenderer_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ProjectDirectoryPathRenderer_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ProjectDirectoryPathRenderer_Button2', _ProjectDirectoryPathRenderer_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ProjectDirectoryPathRenderer_Button2_click(event:flash.events.MouseEvent):Void {
		onChangePathClick(event);
	}

	private function _ProjectDirectoryPathRenderer_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsValue';
		temp.percentWidth = 98.0;
		temp.setStyle('paddingTop', 10);
		temp.id = 'lblValue';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblValue = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblValue', lblValue);
		return temp;
	}

	private function _ProjectDirectoryPathRenderer_Label3_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'uiTextSettingsLabel';
		temp.percentWidth = 100.0;
		temp.maxDisplayedLines = 3;
		temp.includeInLayout = false;
		temp.visible = false;
		temp.setStyle('color', 6710886);
		temp.setStyle('fontSize', 12);
		temp.id = 'lblMessage';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblMessage = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblMessage', lblMessage);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ProjectDirectoryPathRenderer_VGroup1_creationComplete(event:mx.events.FlexEvent):Void {
		onProjectDirectoryPathRendererCreationComplete(event);
	}

	//  binding mgmt
	private function _ProjectDirectoryPathRenderer_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (setting.label);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_ProjectDirectoryPathRenderer_Label1.text');

		result[1] = new mx.binding.Binding(this,
				function():Class<Dynamic> {
					return (LinkButtonSkin);
				},
				function(_sourceFunctionReturnValue:Class<Dynamic>):Void {
					_ProjectDirectoryPathRenderer_Button1.setStyle('skinClass', _sourceFunctionReturnValue);
				},
				'_ProjectDirectoryPathRenderer_Button1.skinClass');

		result[2] = new mx.binding.Binding(this,
				function():Class<Dynamic> {
					return (LinkButtonSkin);
				},
				function(_sourceFunctionReturnValue:Class<Dynamic>):Void {
					_ProjectDirectoryPathRenderer_Button2.setStyle('skinClass', _sourceFunctionReturnValue);
				},
				'_ProjectDirectoryPathRenderer_Button2.skinClass');

		result[3] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = ((setting.stringValue != null) ? setting.stringValue : 'Not Set');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'lblValue.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(ProjectDirectoryPathRenderer)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def