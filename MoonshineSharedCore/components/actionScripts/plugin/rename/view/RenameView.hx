/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.rename.view
 *  Class:      RenameView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/rename/view/RenameView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.plugin.rename.view;

import elements.skins.DarkButtonSkin;
import mx.controls.Alert;
import mx.events.CloseEvent;
import mx.events.FlexEvent;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.Label;
import spark.components.TextInput;
import spark.components.VGroup;
import spark.events.TextOperationEvent;

//  begin class def
class RenameView extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _RenameView_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cancelButton:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var nameInput:spark.components.TextInput;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _RenameView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_rename_view_RenameViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(RenameView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.title = 'Rename symbol';
		this.width = 600;
		this.height = 150;
		this.minWidth = 300;
		this.minHeight = 150;
		this.controlBarContent = [_RenameView_Button1_c(), _RenameView_Button2_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_RenameView_Array2_c);

		// events
		this.addEventListener('creationComplete', ___RenameView_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 11 - 95

	public var newName:String;

	private var _oldNameChanged:Bool = false;

	private var _oldName:String = null;

	@:meta(Bindable(name = 'oldNameChange'))
	public var oldName(get, set):String;
	private function get_oldName():String {
		return this._oldName;
	}

	private function set_oldName(value:String):String {
		if (this._oldName == value) {
			return value;
		}
		this._oldName = value;
		this.newName = value;
		this._oldNameChanged = true;
		this.dispatchEvent(new Event('oldNameChange'));
		return value;
	}

	override private function commitProperties():Void {
		if (this._oldNameChanged) {
			this._oldNameChanged = false;
			this.nameInput.text = this._oldName;
			this.nameInput.validateNow();
			this.nameInput.setFocus();
			this.nameInput.selectAll();
		}
		super.commitProperties();
	}

	private function saveName():Void {
		if (this.newName == null) {
			return;
		}
		var detail:Int = AS3.int(Alert.CANCEL);
		if (this.newName != this._oldName) {
			detail = AS3.int(Alert.OK);
		}
		this._oldName = null;
		this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE, false, false, detail));
	}

	private function renameButton_onClick(event:MouseEvent):Void {
		this.saveName();
	}

	private function cancelButton_onClick(event:MouseEvent):Void {
		this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
	}

	private function nameInput_onChange(event:Event):Void {
		this.newName = Std.string(this.nameInput.text);
	}

	private function nameInput_onEnter(event:Event):Void {
		this.saveName();
	}

	private function onRenameViewCreationComplete(event:FlexEvent):Void {
		cancelButton.setStyle('skinClass', DarkButtonSkin);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _RenameView_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Rename';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___RenameView_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___RenameView_Button1_click(event:flash.events.MouseEvent):Void {
		renameButton_onClick(event);
	}

	private function _RenameView_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Cancel';
		temp.setStyle('fontFamily', 'DejaVuSans');
		temp.setStyle('fontSize', 12);
		temp.addEventListener('click', __cancelButton_click);
		temp.id = 'cancelButton';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cancelButton = temp;
		mx.binding.BindingManager.executeBindings(this, 'cancelButton', cancelButton);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __cancelButton_click(event:flash.events.MouseEvent):Void {
		cancelButton_onClick(event);
	}

	private function _RenameView_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_RenameView_VGroup1_c()];
		return cast temp;
	}

	private function _RenameView_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.mxmlContent = [_RenameView_Label1_i(), _RenameView_TextInput1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _RenameView_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.id = '_RenameView_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_RenameView_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_RenameView_Label1', _RenameView_Label1);
		return temp;
	}

	private function _RenameView_TextInput1_i():spark.components.TextInput {
		var temp:spark.components.TextInput = new spark.components.TextInput();
		temp.percentWidth = 100.0;
		temp.addEventListener('change', __nameInput_change);
		temp.addEventListener('enter', __nameInput_enter);
		temp.id = 'nameInput';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		nameInput = temp;
		mx.binding.BindingManager.executeBindings(this, 'nameInput', nameInput);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __nameInput_change(event:spark.events.TextOperationEvent):Void {
		nameInput_onChange(event);
	}

	/**
	 * @private
	 **/
	public function __nameInput_enter(event:mx.events.FlexEvent):Void {
		nameInput_onEnter(event);
	}

	/**
	 * @private
	 **/
	public function ___RenameView_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onRenameViewCreationComplete(event);
	}

	//  binding mgmt
	private function _RenameView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = 'Rename symbol \'' + (oldName) + '\' and its usages to:';
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_RenameView_Label1.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(RenameView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def