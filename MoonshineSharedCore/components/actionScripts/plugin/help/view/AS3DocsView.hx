/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.plugin.help.view
 *  Class:      AS3DocsView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/plugin/help/view/AS3DocsView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.plugin.help.view;

import mx.controls.Alert;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import actionScripts.plugin.help.GenericTreeItemRenderer;
import actionScripts.ui.LayoutModifier;
import actionScripts.ui.tabview.TabViewTab;

import haxe.Constraints.Function;
import actionScripts.ui.IPanelWindow;
import actionScripts.ui.project.ProjectViewHeader;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.VBox;
import mx.controls.Tree;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;

import mx.styles.*;

//  begin class def
class AS3DocsView extends mx.containers.VBox implements actionScripts.ui.IPanelWindow implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var compLibTree:mx.controls.Tree;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var header:actionScripts.ui.project.ProjectViewHeader;

	//  type-import dummies

	//  Container document descriptor
	private var _documentDescriptor_:mx.core.UIComponentDescriptor;

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		this._documentDescriptor_ =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.VBox,
					'propertiesFactory': function():Dynamic {
						return {
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': actionScripts.ui.project.ProjectViewHeader,
								'id': 'header',
								'events': {
									'creationComplete': '__header_creationComplete'
								},
								'propertiesFactory': function():Dynamic {
									return {
										'label': 'Useful Links',
										'percentWidth': 100.0
									};
								}
							}),
							new mx.core.UIComponentDescriptor({
								'type': mx.controls.Tree,
								'id': 'compLibTree',
								'events': {
									'itemClick': '__compLibTree_itemClick'
								},
								'stylesFactory': function():Void {
									this.color = 15658734;
									this.contentBackgroundColor = 0;
									this.rollOverColor = 3750201;
									this.selectionColor = 3750201;
									this.alternatingItemColors = [4473924, 5065804];
									this.verticalScrollBarStyleName = 'black';
									this.borderVisible = false;
									this.useRollOver = true;
									this.borderStyle = 'none';
								},
								'propertiesFactory': function():Dynamic {
									return {
										'rowHeight': 18,
										'doubleClickEnabled': true,
										'percentWidth': 100.0,
										'percentHeight': 100.0,
										'showRoot': false,
										'labelField': '@label'
									};
								}
							})
				]
						};
					}
				});
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _AS3DocsView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_plugin_help_view_AS3DocsViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(AS3DocsView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.verticalScrollPolicy = 'off';

		// events
		this.addEventListener('initialize', ___AS3DocsView_VBox1_initialize);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 4473924;
					this.verticalGap = 0;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	//  scripts
	//  <Script>, line 32 - 133

	private var httpService:URLLoader;

	public function refresh():Void {
		compLibTree.invalidateList();
	}

	private function getIconForObject(object:Dynamic):Class<Dynamic> {
		return null;
	}

	private function initHeader():Void {
		header.addEventListener(TabViewTab.EVENT_TAB_CLOSE, handleClose);
	}

	private function handleClose(event:Event):Void {
		if (stage != null) {
			LayoutModifier.removeFromSidebar(this);
		}
	}

	private function onInitialized(event:FlexEvent):Void {
		compLibTree.itemRenderer = new ClassFactory(GenericTreeItemRenderer);

		var request:URLRequest = new URLRequest();
		request.url = '/elements/data/UsefulLinks.xml';
		request.method = 'GET';

		httpService = new URLLoader();
		httpService.addEventListener(Event.COMPLETE, onSuccess);
		httpService.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
		httpService.load(request);
	}

	/**
	 * On success callback
	 */
	private function onSuccess(event:Event):Void {
		var rex:as3hx.Compat.Regex = new as3hx.Compat.Regex('^\\s*|\\s*$', 'gim');
		var tmpString:String = rex.replace(Std.string(event.target.data), '');
		compLibTree.dataProvider = new FastXML(tmpString);

		// finally clear the event
		dispose();
	}

	/**
	 * On error callback
	 */
	private function onIOError(event:IOErrorEvent, customMessage:String = null):Void {
		Alert.show(event.text, event.type);

		// finally clear the event
		dispose();
	}

	private function dispose():Void {
		// probable termination
		if (httpService == null) {
			return;
		}

		httpService.close();
		httpService.removeEventListener(Event.COMPLETE, onSuccess);
		httpService.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
		httpService = null;
	}

	private function getIconForFile(object:Dynamic):Class<Dynamic> {
		return null;
	}

	private function treeItemClick(event:ListEvent):Void {
		var selectedItem:Dynamic = compLibTree.selectedItem;
		var link:String = Std.string(selectedItem.att.link);
		if (link != null) {
			flash.Lib.getURL(new URLRequest(link), '_blank');
		} else {
			compLibTree.expandItem(selectedItem, !compLibTree.isItemOpen(selectedItem));
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___AS3DocsView_VBox1_initialize(event:mx.events.FlexEvent):Void {
		onInitialized(event);
	}

	/**
	 * @private
	 **/
	public function __header_creationComplete(event:mx.events.FlexEvent):Void {
		initHeader();
	}

	/**
	 * @private
	 **/
	public function __compLibTree_itemClick(event:mx.events.ListEvent):Void {
		treeItemClick(event);
	}

	//  binding mgmt
	private function _AS3DocsView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Function {
					return (getIconForFile);
				},
				null,
				'compLibTree.iconFunction');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(AS3DocsView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def