/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.ui.tabview.skin
 *  Class:      HamburgerMenuTabsSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/ui/tabview/skin/HamburgerMenuTabsSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:50 MSK
 */

package actionScripts.ui.tabview.skin;

import mx.events.CollectionEvent;
import mx.events.CollectionEventKind;
import mx.events.FlexEvent;

import actionScripts.ui.tabview.skin.HamburgerMenuTabsButtonSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.graphics.SolidColor;
import mx.graphics.SolidColorStroke;
import mx.states.AddItems;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.Button;
import spark.components.DataGroup;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.PopUpAnchor;
import spark.components.Scroller;
import spark.layouts.VerticalLayout;
import spark.primitives.BitmapImage;
import spark.primitives.Rect;
import spark.skins.SparkSkin;
import spark.skins.spark.DefaultItemRenderer;

/**
 * @copy spark.skins.spark.ApplicationSkin#hostComponent
 */
@:meta(HostComponent(name = 'spark.components.DropDownList'))
@:meta(States(name = 'normal', name = 'open', name = 'disabled'))
//  begin class def
class HamburgerMenuTabsSkin extends spark.skins.SparkSkin implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	//  instance variables
	/**
	 * @private
	 **/
	public var _HamburgerMenuTabsSkin_BitmapImage1:spark.primitives.BitmapImage;

	/**
	 * @private
	 **/
	public var _HamburgerMenuTabsSkin_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var background:spark.primitives.Rect;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var bgFill:mx.graphics.SolidColor;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var border:spark.primitives.Rect;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var borderStroke:mx.graphics.SolidColorStroke;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var dataGroup:spark.components.DataGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var dropDown:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var hamburgerMenuGroup:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var openButton:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var popUp:spark.components.PopUpAnchor;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var scroller:spark.components.Scroller;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _HamburgerMenuTabsSkin_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_ui_tabview_skin_HamburgerMenuTabsSkinWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(HamburgerMenuTabsSkin, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.mxmlContent = [_HamburgerMenuTabsSkin_HGroup1_i(), _HamburgerMenuTabsSkin_Button1_i()];
		this.currentState = 'normal';

		// events
		this.addEventListener('creationComplete', ___HamburgerMenuTabsSkin_SparkSkin1_creationComplete);

		var _HamburgerMenuTabsSkin_PopUpAnchor1_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_HamburgerMenuTabsSkin_PopUpAnchor1_i, _HamburgerMenuTabsSkin_PopUpAnchor1_r);

		states = [
				new State({
					'name': 'normal',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'popUp',
								'name': 'displayPopUp',
								'value': false
							})
			]
				}),
				new State({
					'name': 'open',
					'overrides': [
					new AddItems().initializeFromObject({
								'destructionPolicy': 'auto',
								'itemsFactory': _HamburgerMenuTabsSkin_PopUpAnchor1_factory,
								'destination': null,
								'propertyName': 'mxmlContent',
								'position': 'first'
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'popUp',
								'name': 'displayPopUp',
								'value': true
							})
			]
				}),
				new State({
					'name': 'disabled',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				})
		];

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 16 - 74

	/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
	private static var contentFill(default, never):Array<Dynamic> = cast ['bgFill'];

	@:meta(Embed(name = '/elements/images/hamburger_menu_icon.png'))
	private var hamburgerIcon(default, null):Class<Dynamic>;

	@:meta(Bindable())
	private var itemsCount:String;

	/**
	 * @private
	 */
	override private function get_contentItems():Array<Dynamic> {
		return contentFill;
	}

	/**
	 * @private
	 */
	override private function updateDisplayList(unscaledWidth:Float, unscaledHeight:Float):Void {
		openButton.setStyle('cornerRadius', getStyle('cornerRadius'));

		if (borderStroke != null) {
			borderStroke.color = getStyle('borderColor');
			borderStroke.alpha = getStyle('borderAlpha');
		}

		super.updateDisplayList(unscaledWidth, unscaledHeight);
	}

	private function onHamburgerMenuTabsSkinCreationComplete(event:FlexEvent):Void {
		removeEventListener(FlexEvent.CREATION_COMPLETE, onHamburgerMenuTabsSkinCreationComplete);
		hostComponent.dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, onHamburgerTabsCollectionChange);
	}

	private function onHamburgerTabsCollectionChange(event:CollectionEvent):Void {
		if (event.kind == CollectionEventKind.REMOVE) {
			var timeoutValue:Int = as3hx.Compat.setTimeout(function():Void {
						as3hx.Compat.clearTimeout(timeoutValue);
						itemsCount = Std.string(hostComponent.dataProvider.length);
					}, 50);
		} else {
			itemsCount = Std.string(hostComponent.dataProvider.length);
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _HamburgerMenuTabsSkin_PopUpAnchor1_i():spark.components.PopUpAnchor {
		var temp:spark.components.PopUpAnchor = new spark.components.PopUpAnchor();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.popUpPosition = 'below';
		temp.popUp = _HamburgerMenuTabsSkin_Group1_i();
		temp.id = 'popUp';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		popUp = temp;
		mx.binding.BindingManager.executeBindings(this, 'popUp', popUp);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_PopUpAnchor1_r():Void {
		popUp = null;
		dropDown = null;
		border = null;
		borderStroke = null;
		background = null;
		bgFill = null;
		scroller = null;
		dataGroup = null;
	}

	private function _HamburgerMenuTabsSkin_Group1_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.mxmlContent = [_HamburgerMenuTabsSkin_Rect1_i(), _HamburgerMenuTabsSkin_Rect2_i(), _HamburgerMenuTabsSkin_Scroller1_i()];
		temp.id = 'dropDown';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		dropDown = temp;
		mx.binding.BindingManager.executeBindings(this, 'dropDown', dropDown);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_Rect1_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.stroke = _HamburgerMenuTabsSkin_SolidColorStroke1_i();
		temp.initialized(this, 'border');
		border = temp;
		mx.binding.BindingManager.executeBindings(this, 'border', border);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_SolidColorStroke1_i():mx.graphics.SolidColorStroke {
		var temp:mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
		temp.weight = 1;
		borderStroke = temp;
		mx.binding.BindingManager.executeBindings(this, 'borderStroke', borderStroke);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_Rect2_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 1;
		temp.right = 1;
		temp.top = 1;
		temp.bottom = 1;
		temp.fill = _HamburgerMenuTabsSkin_SolidColor1_i();
		temp.initialized(this, 'background');
		background = temp;
		mx.binding.BindingManager.executeBindings(this, 'background', background);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_SolidColor1_i():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 16777215;
		bgFill = temp;
		mx.binding.BindingManager.executeBindings(this, 'bgFill', bgFill);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_Scroller1_i():spark.components.Scroller {
		var temp:spark.components.Scroller = new spark.components.Scroller();
		temp.left = 0;
		temp.top = 0;
		temp.right = 0;
		temp.bottom = 0;
		temp.hasFocusableChildren = false;
		temp.minViewportInset = 1;
		temp.viewport = _HamburgerMenuTabsSkin_DataGroup1_i();
		temp.id = 'scroller';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		scroller = temp;
		mx.binding.BindingManager.executeBindings(this, 'scroller', scroller);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_DataGroup1_i():spark.components.DataGroup {
		var temp:spark.components.DataGroup = new spark.components.DataGroup();
		temp.itemRenderer = _HamburgerMenuTabsSkin_ClassFactory1_c();
		temp.layout = _HamburgerMenuTabsSkin_VerticalLayout1_c();
		temp.id = 'dataGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		dataGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'dataGroup', dataGroup);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = spark.skins.spark.DefaultItemRenderer;
		return temp;
	}

	private function _HamburgerMenuTabsSkin_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.gap = 0;
		temp.horizontalAlign = 'contentJustify';
		temp.requestedMinRowCount = 1;
		temp.requestedMaxRowCount = 6;
		return temp;
	}

	private function _HamburgerMenuTabsSkin_HGroup1_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.gap = 2;
		temp.right = 7;
		temp.top = 2;
		temp.bottom = 2;
		temp.verticalAlign = 'middle';
		temp.horizontalAlign = 'right';
		temp.focusEnabled = false;
		temp.tabEnabled = false;
		temp.mxmlContent = [_HamburgerMenuTabsSkin_BitmapImage1_i(), _HamburgerMenuTabsSkin_Label1_i()];
		temp.id = 'hamburgerMenuGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		hamburgerMenuGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'hamburgerMenuGroup', hamburgerMenuGroup);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_BitmapImage1_i():spark.primitives.BitmapImage {
		var temp:spark.primitives.BitmapImage = new spark.primitives.BitmapImage();
		temp.height = 20;
		temp.initialized(this, '_HamburgerMenuTabsSkin_BitmapImage1');
		_HamburgerMenuTabsSkin_BitmapImage1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_HamburgerMenuTabsSkin_BitmapImage1', _HamburgerMenuTabsSkin_BitmapImage1);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.maxDisplayedLines = 1;
		temp.mouseEnabled = false;
		temp.mouseChildren = false;
		temp.height = 20;
		temp.focusEnabled = false;
		temp.tabEnabled = false;
		temp.setStyle('verticalAlign', 'middle');
		temp.setStyle('textAlignLast', 'end');
		temp.setStyle('paddingBottom', -4);
		temp.setStyle('color', 16777215);
		temp.setStyle('fontWeight', 'bold');
		temp.id = '_HamburgerMenuTabsSkin_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_HamburgerMenuTabsSkin_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_HamburgerMenuTabsSkin_Label1', _HamburgerMenuTabsSkin_Label1);
		return temp;
	}

	private function _HamburgerMenuTabsSkin_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.focusEnabled = false;
		temp.tabEnabled = false;
		temp.setStyle('skinClass', actionScripts.ui.tabview.skin.HamburgerMenuTabsButtonSkin);
		temp.id = 'openButton';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		openButton = temp;
		mx.binding.BindingManager.executeBindings(this, 'openButton', openButton);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___HamburgerMenuTabsSkin_SparkSkin1_creationComplete(event:mx.events.FlexEvent):Void {
		onHamburgerMenuTabsSkinCreationComplete(event);
	}

	//  binding mgmt
	private function _HamburgerMenuTabsSkin_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Dynamic {
					return (hamburgerIcon);
				},
				null,
				'_HamburgerMenuTabsSkin_BitmapImage1.source');

		result[1] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (itemsCount);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_HamburgerMenuTabsSkin_Label1.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(HamburgerMenuTabsSkin)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def