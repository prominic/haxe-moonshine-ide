/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.ui.editor.text
 *  Class:      CodeActionView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/ui/editor/text/CodeActionView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.ui.editor.text;

import mx.collections.ICollectionView;
import flash.events.MouseEvent;
import mx.controls.Menu;
import mx.collections.IViewCursor;
import actionScripts.valueObjects.Command;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.ExecuteLanguageServerCommandEvent;
import actionScripts.valueObjects.CodeAction;
import actionScripts.valueObjects.WorkspaceEdit;
import actionScripts.events.LanguageServerEvent;
import actionScripts.utils.ApplyWorkspaceEdit;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;

import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.Group;
import spark.components.List;
import spark.components.PopUpAnchor;
import spark.events.IndexChangeEvent;
import spark.layouts.VerticalLayout;

//  begin class def
class CodeActionView extends spark.components.Group implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var anchor:spark.components.PopUpAnchor;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var icon:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var menu:spark.components.List;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _CodeActionView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_ui_editor_text_CodeActionViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(CodeActionView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.mxmlContent = [_CodeActionView_Button1_i(), _CodeActionView_PopUpAnchor1_i()];

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 18 - 61

	@:meta(Bindable())
	public var codeActions:ICollectionView;

	private function icon_clickHandler(event:MouseEvent):Void {
		anchor.displayPopUp = !anchor.displayPopUp;
	}

	private function list_changeHandler(event:Event):Void {
		anchor.displayPopUp = false;
		var codeAction:CodeAction = CodeAction(menu.selectedItem);
		menu.selectedIndex = -1;

		//if both a WorkspaceEdit and a Command are supplied, the
		//WorkspaceEdit is applied befor the Command
		var edit:WorkspaceEdit = codeAction.edit;
		if (edit != null) {
			ApplyWorkspaceEdit.applyWorkspaceEdit(edit);
		}
		var command:Command = codeAction.command;
		if (command != null) {
			GlobalEventDispatcher.getInstance().dispatchEvent(new ExecuteLanguageServerCommandEvent(
					ExecuteLanguageServerCommandEvent.EVENT_EXECUTE_COMMAND,
					command.command, command.arguments));
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _CodeActionView_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.styleName = 'codeActionButton';
		temp.addEventListener('click', __icon_click);
		temp.id = 'icon';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		icon = temp;
		mx.binding.BindingManager.executeBindings(this, 'icon', icon);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __icon_click(event:flash.events.MouseEvent):Void {
		icon_clickHandler(event);
	}

	private function _CodeActionView_PopUpAnchor1_i():spark.components.PopUpAnchor {
		var temp:spark.components.PopUpAnchor = new spark.components.PopUpAnchor();
		temp.popUpPosition = 'below';
		temp.popUp = _CodeActionView_List1_i();
		temp.id = 'anchor';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		anchor = temp;
		mx.binding.BindingManager.executeBindings(this, 'anchor', anchor);
		return temp;
	}

	private function _CodeActionView_List1_i():spark.components.List {
		var temp:spark.components.List = new spark.components.List();
		temp.labelField = 'title';
		temp.selectedIndex = -1;
		temp.layout = _CodeActionView_VerticalLayout1_c();
		temp.addEventListener('change', __menu_change);
		temp.id = 'menu';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		menu = temp;
		mx.binding.BindingManager.executeBindings(this, 'menu', menu);
		return temp;
	}

	private function _CodeActionView_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.gap = 0;
		temp.horizontalAlign = 'contentJustify';
		temp.requestedMinRowCount = 1;
		temp.requestedMaxRowCount = 6;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __menu_change(event:spark.events.IndexChangeEvent):Void {
		list_changeHandler(event);
	}

	//  binding mgmt
	private function _CodeActionView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Float {
					return (icon.height);
				},
				null,
				'anchor.width');

		result[1] = new mx.binding.Binding(this,
				function():Float {
					return (icon.height);
				},
				null,
				'anchor.height');

		result[2] = new mx.binding.Binding(this,
				null,
				null,
				'menu.dataProvider', 'codeActions');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(CodeActionView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def