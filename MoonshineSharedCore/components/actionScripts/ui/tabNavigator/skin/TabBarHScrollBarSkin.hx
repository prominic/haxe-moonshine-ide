/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.ui.tabNavigator.skin
 *  Class:      TabBarHScrollBarSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/ui/tabNavigator/skin/TabBarHScrollBarSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package actionScripts.ui.tabNavigator.skin;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.Button;
import spark.skins.SparkSkin;
import spark.skins.spark.ScrollBarLeftButtonSkin;
import spark.skins.spark.ScrollBarRightButtonSkin;

/**
 * @copy spark.skins.spark.ApplicationSkin#hostComponent
 */
@:meta(HostComponent(name = 'spark.components.HScrollBar'))
@:meta(States(name = 'normal', name = 'disabled', name = 'inactive'))
//  begin class def
class TabBarHScrollBarSkin extends spark.skins.SparkSkin implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var decrementButton:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var incrementButton:spark.components.Button;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.minWidth = 35;
		this.minHeight = 15;
		this.mxmlContent = [_TabBarHScrollBarSkin_Button1_i(), _TabBarHScrollBarSkin_Button2_i()];
		this.currentState = 'normal';

		// events

		states = [
				new State({
					'name': 'normal',
					'overrides': []
				}),
				new State({
					'name': 'disabled',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				}),
				new State({
					'name': 'inactive',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'decrementButton',
								'name': 'enabled',
								'value': false
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'incrementButton',
								'name': 'enabled',
								'value': false
							})
			]
				})
		];

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 48 - 66

	/* Define the skin elements that should not be colorized.
	   For scroll bar, the skin itself is colorized but the individual parts are not. */
	private static var exclusions(default, never):Array<Dynamic> = cast ['track', 'thumb', 'decrementButton', 'incrementButton'];

	/**
	 * @private
	 */
	override private function get_colorizeExclusions():Array<Dynamic> {
		return exclusions;
	}

	/**
	 * @private
	 */
	override private function initializationComplete():Void {
		useChromeColor = true;
		super.initializationComplete();
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _TabBarHScrollBarSkin_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.left = 0;
		temp.top = -37;
		temp.minHeight = 20;
		temp.focusEnabled = false;
		temp.tabEnabled = false;
		temp.setStyle('skinClass', spark.skins.spark.ScrollBarLeftButtonSkin);
		temp.id = 'decrementButton';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		decrementButton = temp;
		mx.binding.BindingManager.executeBindings(this, 'decrementButton', decrementButton);
		return temp;
	}

	private function _TabBarHScrollBarSkin_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.right = 0;
		temp.top = -37;
		temp.minHeight = 20;
		temp.focusEnabled = false;
		temp.tabEnabled = false;
		temp.setStyle('skinClass', spark.skins.spark.ScrollBarRightButtonSkin);
		temp.id = 'incrementButton';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		incrementButton = temp;
		mx.binding.BindingManager.executeBindings(this, 'incrementButton', incrementButton);
		return temp;
	}

}

//  end package def