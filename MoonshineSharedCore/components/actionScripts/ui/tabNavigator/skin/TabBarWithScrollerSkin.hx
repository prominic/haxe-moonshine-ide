/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.ui.tabNavigator.skin
 *  Class:      TabBarWithScrollerSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/ui/tabNavigator/skin/TabBarWithScrollerSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.ui.tabNavigator.skin;

import actionScripts.ui.tabNavigator.ButtonBarButtonWithClose;
import actionScripts.ui.tabNavigator.event.ButtonBarButtonWithCloseEvent;
import mx.core.UIComponent;
import mx.core.ScrollPolicy;
import mx.events.StateChangeEvent;
import spark.layouts.ColumnAlign;
import spark.layouts.HorizontalLayout;
import spark.layouts.TileLayout;
import spark.layouts.TileOrientation;
import spark.layouts.VerticalLayout;

import actionScripts.ui.tabNavigator.skin.TabBarScrollerSkin;
import actionScripts.ui.tabNavigator.skin.TabBarWithScrollerSkinInnerClass0;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.states.SetProperty;
import mx.states.SetStyle;
import mx.states.State;
import mx.styles.*;
import spark.components.DataGroup;
import spark.components.Scroller;
import spark.components.supportClasses.ButtonBarHorizontalLayout;
import spark.components.supportClasses.Skin;

/**
 * @copy spark.skins.spark.ApplicationSkin#hostComponent
 */
@:meta(HostComponent(name = 'actionScripts.ui.tabNavigator.TabBarWithScroller'))
@:meta(States(name = 'normal', name = 'disabled', name = 'normalWithLeftRightNoScroller', name = 'normalWithTopScroller', name = 'normalWithBottomScroller'))
//  begin class def
class TabBarWithScrollerSkin extends spark.components.supportClasses.Skin implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabBarWithScrollerSkin_SetProperty1:mx.states.SetProperty;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabBarWithScrollerSkin_SetProperty2:mx.states.SetProperty;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabBarWithScrollerSkin_SetProperty3:mx.states.SetProperty;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabBarWithScrollerSkin_SetProperty4:mx.states.SetProperty;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabBarWithScrollerSkin_SetProperty5:mx.states.SetProperty;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabBarWithScrollerSkin_SetProperty6:mx.states.SetProperty;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabBarWithScrollerSkin_SetStyle1:mx.states.SetStyle;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabBarWithScrollerSkin_SetStyle2:mx.states.SetStyle;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabBarWithScrollerSkin_SetStyle3:mx.states.SetStyle;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var dataGroup:spark.components.DataGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var tabBarScroller:spark.components.Scroller;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _TabBarWithScrollerSkin_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_ui_tabNavigator_skin_TabBarWithScrollerSkinWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(TabBarWithScrollerSkin, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.mxmlContent = [_TabBarWithScrollerSkin_Scroller1_i()];
		this.currentState = 'normal';

		// events
		this.addEventListener('currentStateChanging', ___TabBarWithScrollerSkin_Skin1_currentStateChanging);

		states = [
				new State({
					'name': 'normal',
					'overrides': [
					_TabBarWithScrollerSkin_SetStyle1 = mx.states.SetStyle(new mx.states.SetStyle().initializeFromObject({
												'target': 'tabBarScroller',
												'name': 'horizontalScrollPolicy',
												'value': null
											})),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'tabBarScroller',
								'name': 'minViewportInset',
								'value': 0
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'tabBarScroller',
								'name': 'bottom',
								'value': 0
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'tabBarScroller',
								'name': 'top',
								'value': 0
							}),
					_TabBarWithScrollerSkin_SetProperty3 = mx.states.SetProperty(new mx.states.SetProperty().initializeFromObject({
												'target': 'dataGroup',
												'name': 'width',
												'value': null
											}))
			]
				}),
				new State({
					'name': 'disabled',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				}),
				new State({
					'name': 'normalWithLeftRightNoScroller',
					'overrides': [
					_TabBarWithScrollerSkin_SetProperty6 = mx.states.SetProperty(new mx.states.SetProperty().initializeFromObject({
												'target': 'dataGroup',
												'name': 'width',
												'value': null
											}))
			]
				}),
				new State({
					'name': 'normalWithTopScroller',
					'stateGroups': ['withScroller'],
					'overrides': [
					_TabBarWithScrollerSkin_SetStyle2 = mx.states.SetStyle(new mx.states.SetStyle().initializeFromObject({
												'target': 'tabBarScroller',
												'name': 'horizontalScrollPolicy',
												'value': null
											})),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'tabBarScroller',
								'name': 'minViewportInset',
								'value': 16
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'tabBarScroller',
								'name': 'bottom',
								'value': -16
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'tabBarScroller',
								'name': 'top',
								'value': -16
							}),
					_TabBarWithScrollerSkin_SetProperty1 = mx.states.SetProperty(new mx.states.SetProperty().initializeFromObject({
												'target': 'tabBarScroller',
												'name': 'width',
												'value': null
											})),
					_TabBarWithScrollerSkin_SetProperty4 = mx.states.SetProperty(new mx.states.SetProperty().initializeFromObject({
												'target': 'dataGroup',
												'name': 'width',
												'value': null
											}))
			]
				}),
				new State({
					'name': 'normalWithBottomScroller',
					'stateGroups': ['withScroller'],
					'overrides': [
					_TabBarWithScrollerSkin_SetStyle3 = mx.states.SetStyle(new mx.states.SetStyle().initializeFromObject({
												'target': 'tabBarScroller',
												'name': 'horizontalScrollPolicy',
												'value': null
											})),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'tabBarScroller',
								'name': 'minViewportInset',
								'value': 16
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'tabBarScroller',
								'name': 'bottom',
								'value': -16
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'tabBarScroller',
								'name': 'top',
								'value': -16
							}),
					_TabBarWithScrollerSkin_SetProperty2 = mx.states.SetProperty(new mx.states.SetProperty().initializeFromObject({
												'target': 'tabBarScroller',
												'name': 'width',
												'value': null
											})),
					_TabBarWithScrollerSkin_SetProperty5 = mx.states.SetProperty(new mx.states.SetProperty().initializeFromObject({
												'target': 'dataGroup',
												'name': 'width',
												'value': null
											}))
			]
				})
		];

		mx.binding.BindingManager.executeBindings(this, '_TabBarWithScrollerSkin_SetStyle1', _TabBarWithScrollerSkin_SetStyle1);
		mx.binding.BindingManager.executeBindings(this, '_TabBarWithScrollerSkin_SetProperty3', _TabBarWithScrollerSkin_SetProperty3);
		mx.binding.BindingManager.executeBindings(this, '_TabBarWithScrollerSkin_SetProperty6', _TabBarWithScrollerSkin_SetProperty6);
		mx.binding.BindingManager.executeBindings(this, '_TabBarWithScrollerSkin_SetStyle2', _TabBarWithScrollerSkin_SetStyle2);
		mx.binding.BindingManager.executeBindings(this, '_TabBarWithScrollerSkin_SetProperty1', _TabBarWithScrollerSkin_SetProperty1);
		mx.binding.BindingManager.executeBindings(this, '_TabBarWithScrollerSkin_SetProperty4', _TabBarWithScrollerSkin_SetProperty4);
		mx.binding.BindingManager.executeBindings(this, '_TabBarWithScrollerSkin_SetStyle3', _TabBarWithScrollerSkin_SetStyle3);
		mx.binding.BindingManager.executeBindings(this, '_TabBarWithScrollerSkin_SetProperty2', _TabBarWithScrollerSkin_SetProperty2);
		mx.binding.BindingManager.executeBindings(this, '_TabBarWithScrollerSkin_SetProperty5', _TabBarWithScrollerSkin_SetProperty5);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 52 - 165

	/**
	 *  @private
	 *  Push the cornerRadius style to the item renderers.
	 */
	override private function updateDisplayList(unscaledWidth:Float, unscaleHeight:Float):Void {
		var numElements:Int = AS3.int(dataGroup.numElements);
		var cornerRadius:Int = AS3.int(hostComponent.getStyle('cornerRadius'));
		var closeButtonVisible:Bool = AS3.as(hostComponent.getStyle('closeButtonVisible'), Bool);

		for (i in 0...numElements) {
			var elt:UIComponent = AS3.as(dataGroup.getElementAt(i), UIComponent);
			if (elt != null) {
				elt.setStyle('cornerRadius', cornerRadius);
				elt.setStyle('closeButtonVisible', closeButtonVisible);
				if (!AS3.as(elt.hasEventListener('closeButtonClick'), Bool)) {
					(AS3.as(elt, ButtonBarButtonWithClose)).closeTabButton.addEventListener(MouseEvent.CLICK, onCloseButtonClick);
				}
			}
		}

		super.updateDisplayList(unscaledWidth, unscaledHeight);
	}

	private function onTabNavigatorCurrentStateChanging(event:StateChangeEvent):Void {
		this.setTabBarLayout(Std.string(event.newState));
	}

	private function getVerticalLayoutWithoutGap():VerticalLayout {
		var vertLayout:VerticalLayout = new VerticalLayout();
		vertLayout.gap = 0;

		return vertLayout;
	}

	private function getHorizontalLayoutWithoutGap():HorizontalLayout {
		var horizontalLayout:HorizontalLayout = new HorizontalLayout();
		horizontalLayout.gap = 0;

		return horizontalLayout;
	}

	private function getVerticalTileLayoutWithoutGap():TileLayout {
		var vertLayout:TileLayout = new TileLayout();
		vertLayout.verticalGap = vertLayout.horizontalGap = 0;
		vertLayout.orientation = TileOrientation.COLUMNS;
		vertLayout.columnAlign = ColumnAlign.JUSTIFY_USING_WIDTH;

		return vertLayout;
	}

	private function getHorizontalTileLayoutWithoutGap():TileLayout {
		var horLayout:TileLayout = new TileLayout();
		horLayout.verticalGap = horLayout.horizontalGap = 0;
		horLayout.orientation = TileOrientation.ROWS;
		horLayout.columnAlign = ColumnAlign.JUSTIFY_USING_WIDTH;

		return horLayout;
	}

	private function setTabBarLayout(state:String):Void {
		if (AS3.as(hostComponent.scrollable, Bool)) {
			if (state == 'normalWithTopScroller' || state == 'normalWithBottomScroller') {
				this.dataGroup.layout = this.getHorizontalLayoutWithoutGap();
			} else {
				this.dataGroup.layout = this.getVerticalLayoutWithoutGap();
			}
		} else if (hostComponent.orientation == 'top' || hostComponent.orientation == 'bottom') {
			this.dataGroup.layout = this.getHorizontalTileLayoutWithoutGap();
		} else {
			this.dataGroup.layout = this.getVerticalTileLayoutWithoutGap();
		}
	}

	private function onCloseButtonClick(event:MouseEvent):Void {
		hostComponent.dispatchEvent(new ButtonBarButtonWithCloseEvent(ButtonBarButtonWithCloseEvent.CLOSE_BUTTON_CLICK, AS3.int(event.target.itemIndex)));
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _TabBarWithScrollerSkin_Scroller1_i():spark.components.Scroller {
		var temp:spark.components.Scroller = new spark.components.Scroller();
		temp.percentWidth = 100.0;
		temp.viewport = _TabBarWithScrollerSkin_DataGroup1_i();
		temp.setStyle('skinClass', actionScripts.ui.tabNavigator.skin.TabBarScrollerSkin);
		temp.id = 'tabBarScroller';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		tabBarScroller = temp;
		mx.binding.BindingManager.executeBindings(this, 'tabBarScroller', tabBarScroller);
		return temp;
	}

	private function _TabBarWithScrollerSkin_DataGroup1_i():spark.components.DataGroup {
		var temp:spark.components.DataGroup = new spark.components.DataGroup();
		temp.layout = _TabBarWithScrollerSkin_ButtonBarHorizontalLayout1_c();
		temp.itemRenderer = _TabBarWithScrollerSkin_ClassFactory1_c();
		temp.id = 'dataGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		dataGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'dataGroup', dataGroup);
		return temp;
	}

	private function _TabBarWithScrollerSkin_ButtonBarHorizontalLayout1_c():spark.components.supportClasses.ButtonBarHorizontalLayout {
		var temp:spark.components.supportClasses.ButtonBarHorizontalLayout = new spark.components.supportClasses.ButtonBarHorizontalLayout();
		temp.gap = -1;
		return temp;
	}

	private function _TabBarWithScrollerSkin_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = actionScripts.ui.tabNavigator.skin.TabBarWithScrollerSkinInnerClass0;
		temp.properties = {
					'outerDocument': this
				};
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___TabBarWithScrollerSkin_Skin1_currentStateChanging(event:mx.events.StateChangeEvent):Void {
		onTabNavigatorCurrentStateChanging(event);
	}

	//  binding mgmt
	private function _TabBarWithScrollerSkin_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (ScrollPolicy.OFF);
					return Std.string((result == null) ? null : Std.string(result));
				},
				function(_sourceFunctionReturnValue:String):Void {
					tabBarScroller.setStyle('verticalScrollPolicy', _sourceFunctionReturnValue);
				},
				'tabBarScroller.verticalScrollPolicy');

		result[1] = new mx.binding.Binding(this,
				function():Dynamic {
					return (ScrollPolicy.OFF);
				},
				null,
				'_TabBarWithScrollerSkin_SetStyle1.value');

		result[2] = new mx.binding.Binding(this,
				function():Dynamic {
					return (ScrollPolicy.AUTO);
				},
				null,
				'_TabBarWithScrollerSkin_SetStyle2.value');

		result[3] = new mx.binding.Binding(this,
				function():Dynamic {
					return (ScrollPolicy.AUTO);
				},
				null,
				'_TabBarWithScrollerSkin_SetStyle3.value');

		result[4] = new mx.binding.Binding(this,
				function():Dynamic {
					return (hostComponent.width);
				},
				null,
				'_TabBarWithScrollerSkin_SetProperty1.value');

		result[5] = new mx.binding.Binding(this,
				function():Dynamic {
					return (hostComponent.width);
				},
				null,
				'_TabBarWithScrollerSkin_SetProperty2.value');

		result[6] = new mx.binding.Binding(this,
				function():Dynamic {
					return (hostComponent.width);
				},
				null,
				'_TabBarWithScrollerSkin_SetProperty3.value');

		result[7] = new mx.binding.Binding(this,
				function():Dynamic {
					return (Math.NaN);
				},
				null,
				'_TabBarWithScrollerSkin_SetProperty4.value');

		result[8] = new mx.binding.Binding(this,
				function():Dynamic {
					return (Math.NaN);
				},
				null,
				'_TabBarWithScrollerSkin_SetProperty5.value');

		result[9] = new mx.binding.Binding(this,
				function():Dynamic {
					return (Math.NaN);
				},
				null,
				'_TabBarWithScrollerSkin_SetProperty6.value');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(TabBarWithScrollerSkin)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def