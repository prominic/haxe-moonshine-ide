/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.ui.tabNavigator.skin
 *  Class:      TabNavigatorWithOrientationSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/ui/tabNavigator/skin/TabNavigatorWithOrientationSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package actionScripts.ui.tabNavigator.skin;

import mx.events.StateChangeEvent;
import spark.layouts.ColumnAlign;
import spark.layouts.VerticalLayout;
import spark.layouts.HorizontalLayout;
import spark.layouts.TileLayout;
import spark.layouts.TileOrientation;

import actionScripts.ui.tabNavigator.TabBarWithScroller;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.graphics.SolidColor;
import mx.graphics.SolidColorStroke;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.Group;
import spark.containers.NavigatorGroup;
import spark.primitives.Rect;
import spark.skins.SparkSkin;

@:meta(HostComponent(name = 'actionScripts.ui.tabNavigator.TabNavigatorWithOrientation'))
@:meta(States(name = 'normal', name = 'disabled', name = 'normalWithTopTabBar', name = 'normalWithLeftTabBar', name = 'normalWithRightTabBar', name = 'normalWithBottomTabBar'))
//  begin class def
class TabNavigatorWithOrientationSkin extends spark.skins.SparkSkin implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabNavigatorWithOrientationSkin_SetProperty1:mx.states.SetProperty;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _TabNavigatorWithOrientationSkin_SetProperty2:mx.states.SetProperty;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var background:spark.primitives.Rect;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var bgFill:mx.graphics.SolidColor;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var border:spark.primitives.Rect;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var borderStroke:mx.graphics.SolidColorStroke;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var content:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var contentGroup:spark.containers.NavigatorGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var tabBar:actionScripts.ui.tabNavigator.TabBarWithScroller;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _TabNavigatorWithOrientationSkin_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_ui_tabNavigator_skin_TabNavigatorWithOrientationSkinWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(TabNavigatorWithOrientationSkin, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.mxmlContent = [_TabNavigatorWithOrientationSkin_TabBarWithScroller1_i(), _TabNavigatorWithOrientationSkin_Group1_i()];
		this.currentState = 'normal';

		// events
		this.addEventListener('currentStateChanging', ___TabNavigatorWithOrientationSkin_SparkSkin1_currentStateChanging);
		this.addEventListener('currentStateChange', ___TabNavigatorWithOrientationSkin_SparkSkin1_currentStateChange);

		states = [
				new State({
					'name': 'normal',
					'overrides': []
				}),
				new State({
					'name': 'disabled',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				}),
				new State({
					'name': 'normalWithTopTabBar',
					'stateGroups': ['topBottom'],
					'overrides': [
					_TabNavigatorWithOrientationSkin_SetProperty2 = mx.states.SetProperty(new mx.states.SetProperty().initializeFromObject({
												'target': 'tabBar',
												'name': 'width',
												'value': null
											}))
			]
				}),
				new State({
					'name': 'normalWithLeftTabBar',
					'overrides': []
				}),
				new State({
					'name': 'normalWithRightTabBar',
					'overrides': []
				}),
				new State({
					'name': 'normalWithBottomTabBar',
					'stateGroups': ['topBottom'],
					'overrides': [
					_TabNavigatorWithOrientationSkin_SetProperty1 = mx.states.SetProperty(new mx.states.SetProperty().initializeFromObject({
												'target': 'tabBar',
												'name': 'width',
												'value': null
											}))
			]
				})
		];

		mx.binding.BindingManager.executeBindings(this, '_TabNavigatorWithOrientationSkin_SetProperty2', _TabNavigatorWithOrientationSkin_SetProperty2);
		mx.binding.BindingManager.executeBindings(this, '_TabNavigatorWithOrientationSkin_SetProperty1', _TabNavigatorWithOrientationSkin_SetProperty1);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 45 - 163

	/* Define the skin elements that should not be colorized.
	For list, the skin itself is colorized but the individual parts are not. */
	private static var exclusions(default, never):Array<Dynamic> = cast ['contentGroup', 'background', 'tabBar'];

	/**
	 * @private
	 */
	override private function get_colorizeExclusions():Array<Dynamic> {
		return exclusions;
	}

	/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
	private static var contentFill(default, never):Array<Dynamic> = cast ['bgFill'];

	/**
	 * @private
	 */
	override private function get_contentItems():Array<Dynamic> {
		return contentFill;
	}

	/**
	 * @private
	 */
	override private function initializationComplete():Void {
		useChromeColor = true;
		super.initializationComplete();
	}

	/**
	 * @private
	 */
	override private function updateDisplayList(unscaledWidth:Float, unscaledHeight:Float):Void {
		if (getStyle('borderVisible') == true) {
			border.visible = true;
			background.left = background.top = background.right = background.bottom = 1;
			contentGroup.left = contentGroup.top = contentGroup.right = contentGroup.bottom = 1;
		} else {
			border.visible = false;
			background.left = background.top = background.right = background.bottom = 0;
			contentGroup.left = contentGroup.top = contentGroup.right = contentGroup.bottom = 0;
		}

		borderStroke.color = getStyle('borderColor');
		borderStroke.alpha = getStyle('borderAlpha');

		super.updateDisplayList(unscaledWidth, unscaledHeight);
	}

	private function onTabNavigatorCurrentStateChange(event:StateChangeEvent):Void {
		if (this.tabBar == null || this.content == null) {
			return;
		}

		var tabBarIndex:Int = AS3.int(this.getElementIndex(this.tabBar));
		var contentIndex:Int = AS3.int(this.getElementIndex(this.content));

		if (event.newState == 'normal' ||
			event.newState == 'normalWithTopTabBar' ||
			event.newState == 'normalWithLeftTabBar') {
			if (tabBarIndex > 0) {
				this.swapElementsAt(tabBarIndex, contentIndex);
			}
		} else if (event.newState == 'normalWithBottomTabBar' ||
			event.newState == 'normalWithRightTabBar') {
			if (tabBarIndex == 0) {
				this.swapElementsAt(tabBarIndex, contentIndex);
			}
		}
	}

	private function onTabNavigatorCurrentStateChanging(event:StateChangeEvent):Void {
		this.setSkinLayout(Std.string(event.newState));
	}

	private function setSkinLayout(state:String):Void {
		if (state == 'normal' || state == 'normalWithTopTabBar' || state == 'normalWithBottomTabBar') {
			this.layout = this.getVerticalLayoutWithoutGap();
		} else {
			this.layout = this.getHorizontalLayoutWithoutGap();
		}
	}

	private function getVerticalLayoutWithoutGap():VerticalLayout {
		var vertLayout:VerticalLayout = new VerticalLayout();
		vertLayout.gap = 0;

		return vertLayout;
	}

	private function getHorizontalLayoutWithoutGap():HorizontalLayout {
		var horizontalLayout:HorizontalLayout = new HorizontalLayout();
		horizontalLayout.gap = 0;

		return horizontalLayout;
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _TabNavigatorWithOrientationSkin_TabBarWithScroller1_i():actionScripts.ui.tabNavigator.TabBarWithScroller {
		var temp:actionScripts.ui.tabNavigator.TabBarWithScroller = new actionScripts.ui.tabNavigator.TabBarWithScroller();
		temp.id = 'tabBar';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		tabBar = temp;
		mx.binding.BindingManager.executeBindings(this, 'tabBar', tabBar);
		return temp;
	}

	private function _TabNavigatorWithOrientationSkin_Group1_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.mxmlContent = [_TabNavigatorWithOrientationSkin_Rect1_i(), _TabNavigatorWithOrientationSkin_Rect2_i(), _TabNavigatorWithOrientationSkin_NavigatorGroup1_i()];
		temp.id = 'content';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		content = temp;
		mx.binding.BindingManager.executeBindings(this, 'content', content);
		return temp;
	}

	private function _TabNavigatorWithOrientationSkin_Rect1_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.stroke = _TabNavigatorWithOrientationSkin_SolidColorStroke1_i();
		temp.initialized(this, 'border');
		border = temp;
		mx.binding.BindingManager.executeBindings(this, 'border', border);
		return temp;
	}

	private function _TabNavigatorWithOrientationSkin_SolidColorStroke1_i():mx.graphics.SolidColorStroke {
		var temp:mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
		temp.weight = 1;
		borderStroke = temp;
		mx.binding.BindingManager.executeBindings(this, 'borderStroke', borderStroke);
		return temp;
	}

	private function _TabNavigatorWithOrientationSkin_Rect2_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 1;
		temp.right = 1;
		temp.top = 1;
		temp.bottom = 1;
		temp.fill = _TabNavigatorWithOrientationSkin_SolidColor1_i();
		temp.initialized(this, 'background');
		background = temp;
		mx.binding.BindingManager.executeBindings(this, 'background', background);
		return temp;
	}

	private function _TabNavigatorWithOrientationSkin_SolidColor1_i():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 16777215;
		bgFill = temp;
		mx.binding.BindingManager.executeBindings(this, 'bgFill', bgFill);
		return temp;
	}

	private function _TabNavigatorWithOrientationSkin_NavigatorGroup1_i():spark.containers.NavigatorGroup {
		var temp:spark.containers.NavigatorGroup = new spark.containers.NavigatorGroup();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.minWidth = 0;
		temp.minHeight = 0;
		temp.id = 'contentGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		contentGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'contentGroup', contentGroup);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___TabNavigatorWithOrientationSkin_SparkSkin1_currentStateChanging(event:mx.events.StateChangeEvent):Void {
		onTabNavigatorCurrentStateChanging(event);
	}

	/**
	 * @private
	 **/
	public function ___TabNavigatorWithOrientationSkin_SparkSkin1_currentStateChange(event:mx.events.StateChangeEvent):Void {
		onTabNavigatorCurrentStateChange(event);
	}

	//  binding mgmt
	private function _TabNavigatorWithOrientationSkin_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'tabBar.dataProvider', 'contentGroup');

		result[1] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (hostComponent.orientation);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'tabBar.orientation');

		result[2] = new mx.binding.Binding(this,
				function():Bool {
					return (AS3.as(hostComponent.scrollable, Bool));
				},
				null,
				'tabBar.scrollable');

		result[3] = new mx.binding.Binding(this,
				function():Dynamic {
					return (hostComponent.width);
				},
				null,
				'_TabNavigatorWithOrientationSkin_SetProperty1.value');

		result[4] = new mx.binding.Binding(this,
				function():Dynamic {
					return (hostComponent.width);
				},
				null,
				'_TabNavigatorWithOrientationSkin_SetProperty2.value');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(TabNavigatorWithOrientationSkin)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def