/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.ui.codeCompletionList.renderers
 *  Class:      CodeCompletionItemRenderer
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/ui/codeCompletionList/renderers/CodeCompletionItemRenderer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package actionScripts.ui.codeCompletionList.renderers;

import actionScripts.events.GlobalEventDispatcher;
import actionScripts.ui.codeCompletionList.ToolTipPopupWithTimer;
import actionScripts.valueObjects.CompletionItemKind;
import mx.managers.PopUpManager;

import actionScripts.ui.codeCompletionList.CodeIconIndicator;
import actionScripts.valueObjects.CompletionItem;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.supportClasses.ItemRenderer;

//  begin class def
class CodeCompletionItemRenderer extends spark.components.supportClasses.ItemRenderer implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var codeIconIndicator:actionScripts.ui.codeCompletionList.CodeIconIndicator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var details:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var detailsGroup:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var displayType:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var infoIndicator:actionScripts.ui.codeCompletionList.CodeIconIndicator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var labelDisplayGroup:spark.components.HGroup;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _CodeCompletionItemRenderer_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_ui_codeCompletionList_renderers_CodeCompletionItemRendererWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(CodeCompletionItemRenderer, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.maxWidth = 650;
		this.mxmlContent = [_CodeCompletionItemRenderer_HGroup1_i(), _CodeCompletionItemRenderer_HGroup2_i()];

		// events
		this.addEventListener('addedToStage', ___CodeCompletionItemRenderer_ItemRenderer1_addedToStage);
		this.addEventListener('removedFromStage', ___CodeCompletionItemRenderer_ItemRenderer1_removedFromStage);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 22 - 214

	private var signatureToolTip:ToolTipPopupWithTimer;
	private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();

	override private function set_data(value:Dynamic):Dynamic {
		super.data = value;
		if (AS3.as(value, Bool)) {
			if (displayType != null) {
				displayType.text = getDisplayType(AS3.string(Reflect.field(value, 'detail')));
			}

			if (codeIconIndicator != null) {
				codeIconIndicator.currentState = getDisplayKind(AS3.int(Reflect.field(data, 'kind')));
			}

			if (details != null && Reflect.field(data, 'kind') == CompletionItemKind.CLASS && AS3.as(Reflect.field(data, 'detail'), Bool)) {
				details.text = getShortDetails(AS3.string(Reflect.field(data, 'detail')));
			}
		}
		return value;
	}

	override private function set_hovered(value:Bool):Bool {
		if (selected && AS3.as(data, Bool)) {
			this.toolTip = null;
		} else if (AS3.as(data, Bool)) {
			this.toolTip = Reflect.field(data, 'detail');
		}

		super.hovered = value;
		return value;
	}

	override private function set_selected(value:Bool):Bool {
		super.selected = value;
		if (signatureToolTip != null && !selected) {
			signatureToolTip.close();
		}
		return value;
	}

	private function onCodeIconIndicatorClick(event:MouseEvent):Void {
		dispatcher.dispatchEvent(new Event('showDocumentation'));
	}

	private function showSignatureToolTip():Void {
		if (signatureToolTip == null) {
			return;
		}

		if (!selected) {
			signatureToolTip.close();
		}

		if (selected && AS3.as(data, Bool)) {
			callLater(refreshSignatureToolTip);
			PopUpManager.addPopUp(signatureToolTip, this);
		}
	}

	private function refreshSignatureToolTip():Void {
		if (signatureToolTip == null) {
			return;
		}

		var toolTipPosition:Point = localToGlobal(new Point(labelDisplay.x, labelDisplay.y + labelDisplay.height));
		signatureToolTip.text = Reflect.field(data, 'detail');
		signatureToolTip.x = toolTipPosition.x + labelDisplay.width;
		signatureToolTip.y = toolTipPosition.y;
	}

	private function onItemAddedToStage(event:Event):Void {
		if (signatureToolTip == null) {
			signatureToolTip = new ToolTipPopupWithTimer();
		}
		dispatcher.addEventListener('showDocumentation', onItemShowDocumentation);
	}

	private function onItemRemovedFromStage(event:Event):Void {
		if (signatureToolTip != null) {
			signatureToolTip.close();
			signatureToolTip = null;
		}

		dispatcher.removeEventListener('showDocumentation', onItemShowDocumentation);
	}

	private function onItemShowDocumentation(event:Event):Void {
		showSignatureToolTip();
	}

	public function getDisplayKind(kind:Int):String {
		switch (kind) {
			case CompletionItemKind.CLASS:
				return 'Class';
			case CompletionItemKind.COLOR:
				return 'Color';
			case CompletionItemKind.CONSTANT:
				return 'Constant';
			case CompletionItemKind.CONSTRUCTOR:
				return 'Constructor';
			case CompletionItemKind.ENUM:
				return 'Enum';
			case CompletionItemKind.ENUM_MEMBER:
				return 'EnumMember';
			case CompletionItemKind.EVENT:
				return 'Event';
			case CompletionItemKind.FIELD:
				return 'Field';
			case CompletionItemKind.FILE:
				return 'File';
			case CompletionItemKind.FOLDER:
				return 'Folder';
			case CompletionItemKind.FUNCTION:
				return 'Function';
			case CompletionItemKind.INTERFACE:
				return 'Interface';
			case CompletionItemKind.KEYWORD:
				return 'Keyword';
			case CompletionItemKind.METHOD:
				return 'Method';
			case CompletionItemKind.MODULE:
				return 'Module';
			case CompletionItemKind.OPERATOR:
				return 'Operator';
			case CompletionItemKind.PROPERTY:
				return 'Property';
			case CompletionItemKind.REFERENCE:
				return 'Reference';
			case CompletionItemKind.SNIPPET:
				return 'Snippet';
			case CompletionItemKind.STRUCT:
				return 'Struct';
			case CompletionItemKind.TEXT:
				return 'Text';
			case CompletionItemKind.TYPE_PARAMETER:
				return 'TypeParameter';
			case CompletionItemKind.UNIT:
				return 'Unit';
			case CompletionItemKind.VALUE:
				return 'Value';
			case CompletionItemKind.VARIABLE:
				return 'Variable';
		}
		return null;
	}

	public function getDisplayType(detail:String):String {
		if (detail != null && (Reflect.field(data, 'kind') == CompletionItemKind.METHOD || Reflect.field(data, 'kind') == CompletionItemKind.PROPERTY || Reflect.field(data, 'kind') == CompletionItemKind.VARIABLE)) {
			var lastColonIndex:Int = detail.lastIndexOf(':');
			return detail.substring(lastColonIndex + 1);
		} else {
			return this.getDisplayKind(AS3.int(Reflect.field(data, 'kind')));
		}
	}

	private function getShortDetails(detail:String):String {
		var firstSpaceIndex:Int = detail.indexOf(' ');
		if (firstSpaceIndex > -1) {
			return detail.substr(firstSpaceIndex + 1, detail.length);
		}

		return detail;
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _CodeCompletionItemRenderer_HGroup1_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.gap = 2;
		temp.horizontalAlign = 'left';
		temp.verticalAlign = 'middle';
		temp.left = 2;
		temp.verticalCenter = 0;
		temp.mxmlContent = [_CodeCompletionItemRenderer_CodeIconIndicator1_i(), _CodeCompletionItemRenderer_Label1_i(), _CodeCompletionItemRenderer_Label2_i()];
		temp.id = 'labelDisplayGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		labelDisplayGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'labelDisplayGroup', labelDisplayGroup);
		return temp;
	}

	private function _CodeCompletionItemRenderer_CodeIconIndicator1_i():actionScripts.ui.codeCompletionList.CodeIconIndicator {
		var temp:actionScripts.ui.codeCompletionList.CodeIconIndicator = new actionScripts.ui.codeCompletionList.CodeIconIndicator();
		temp.id = 'codeIconIndicator';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		codeIconIndicator = temp;
		mx.binding.BindingManager.executeBindings(this, 'codeIconIndicator', codeIconIndicator);
		return temp;
	}

	private function _CodeCompletionItemRenderer_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.verticalCenter = 0;
		temp.showTruncationTip = true;
		temp.maxDisplayedLines = 1;
		temp.maxWidth = 250;
		temp.setStyle('color', 1052688);
		temp.setStyle('fontSize', 12);
		temp.setStyle('textAlign', 'left');
		temp.id = 'labelDisplay';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		labelDisplay = temp;
		mx.binding.BindingManager.executeBindings(this, 'labelDisplay', labelDisplay);
		return temp;
	}

	private function _CodeCompletionItemRenderer_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.showTruncationTip = true;
		temp.maxDisplayedLines = 1;
		temp.maxWidth = 310;
		temp.setStyle('fontSize', 10);
		temp.setStyle('textAlign', 'left');
		temp.setStyle('color', 6316128);
		temp.id = 'details';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		details = temp;
		mx.binding.BindingManager.executeBindings(this, 'details', details);
		return temp;
	}

	private function _CodeCompletionItemRenderer_HGroup2_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.right = 4;
		temp.verticalCenter = 0;
		temp.gap = 2;
		temp.verticalAlign = 'middle';
		temp.horizontalAlign = 'right';
		temp.maxWidth = 220;
		temp.mxmlContent = [_CodeCompletionItemRenderer_Label3_i(), _CodeCompletionItemRenderer_CodeIconIndicator2_i()];
		temp.id = 'detailsGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		detailsGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'detailsGroup', detailsGroup);
		return temp;
	}

	private function _CodeCompletionItemRenderer_Label3_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.showTruncationTip = true;
		temp.maxDisplayedLines = 1;
		temp.setStyle('color', 6316128);
		temp.setStyle('textAlign', 'right');
		temp.setStyle('fontSize', 12);
		temp.id = 'displayType';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		displayType = temp;
		mx.binding.BindingManager.executeBindings(this, 'displayType', displayType);
		return temp;
	}

	private function _CodeCompletionItemRenderer_CodeIconIndicator2_i():actionScripts.ui.codeCompletionList.CodeIconIndicator {
		var temp:actionScripts.ui.codeCompletionList.CodeIconIndicator = new actionScripts.ui.codeCompletionList.CodeIconIndicator();
		temp.currentState = 'info';
		temp.width = 20;
		temp.addEventListener('click', __infoIndicator_click);
		temp.id = 'infoIndicator';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		infoIndicator = temp;
		mx.binding.BindingManager.executeBindings(this, 'infoIndicator', infoIndicator);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __infoIndicator_click(event:flash.events.MouseEvent):Void {
		onCodeIconIndicatorClick(event);
	}

	/**
	 * @private
	 **/
	public function ___CodeCompletionItemRenderer_ItemRenderer1_addedToStage(event:flash.events.Event):Void {
		onItemAddedToStage(event);
	}

	/**
	 * @private
	 **/
	public function ___CodeCompletionItemRenderer_ItemRenderer1_removedFromStage(event:flash.events.Event):Void {
		onItemRemovedFromStage(event);
	}

	//  binding mgmt
	private function _CodeCompletionItemRenderer_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Dynamic {
					return (detailsGroup.width + 10);
				},
				null,
				'labelDisplayGroup.right');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'codeIconIndicator.data', 'data');

		result[2] = new mx.binding.Binding(this,
				function():Bool {
					return (Reflect.field(data, 'kind') == CompletionItemKind.CLASS);
				},
				null,
				'details.visible');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (Reflect.field(data, 'kind') == CompletionItemKind.CLASS);
				},
				null,
				'details.includeInLayout');

		result[4] = new mx.binding.Binding(this,
				null,
				null,
				'infoIndicator.data', 'data');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(CodeCompletionItemRenderer)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def