/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.ui.codeCompletionList
 *  Class:      CodeIconIndicator
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/ui/codeCompletionList/CodeIconIndicator.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package actionScripts.ui.codeCompletionList;

import actionScripts.valueObjects.CompletionItem;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.graphics.SolidColor;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.Group;
import spark.components.Label;
import spark.primitives.Ellipse;

@:meta(States(name = 'normal', name = 'Function', name = 'Keyword', name = 'Variable', name = 'Interface', name = 'Class', name = 'Field', name = 'Event', name = 'Property', name = 'Method', name = 'info'))
//  begin class def
class CodeIconIndicator extends spark.components.Group implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Inspectable())
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _CodeIconIndicator_Ellipse1:spark.primitives.Ellipse;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _CodeIconIndicator_SetProperty1:mx.states.SetProperty;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var codeIndicationLabel:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var codeIndicatorColor:mx.graphics.SolidColor;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _CodeIconIndicator_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_actionScripts_ui_codeCompletionList_CodeIconIndicatorWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(CodeIconIndicator, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.mxmlContent = [_CodeIconIndicator_Ellipse1_i(), _CodeIconIndicator_Label1_i()];
		this.currentState = 'normal';

		// events

		states = [
				new State({
					'name': 'normal',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'visible',
								'value': false
							}),
					new mx.states.SetProperty().initializeFromObject({
								'name': 'includeInLayout',
								'value': false
							})
			]
				}),
				new State({
					'name': 'Function',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 3375837
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'M'
							})
			]
				}),
				new State({
					'name': 'Keyword',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 7166620
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'K'
							})
			]
				}),
				new State({
					'name': 'Variable',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 7166620
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'V'
							})
			]
				}),
				new State({
					'name': 'Interface',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 5982948
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'I'
							})
			]
				}),
				new State({
					'name': 'Class',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 11028698
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'C'
							})
			]
				}),
				new State({
					'name': 'Field',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 7166491
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'F'
							})
			]
				}),
				new State({
					'name': 'Event',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 12748327
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'E'
							})
			]
				}),
				new State({
					'name': 'Property',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 4098132
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'P'
							})
			]
				}),
				new State({
					'name': 'Method',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 3375837
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'M'
							})
			]
				}),
				new State({
					'name': 'info',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'toolTip',
								'value': 'Read more...'
							}),
					new mx.states.SetProperty().initializeFromObject({
								'name': 'buttonMode',
								'value': true
							}),
					new mx.states.SetProperty().initializeFromObject({
								'name': 'useHandCursor',
								'value': true
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': '_CodeIconIndicator_Ellipse1',
								'name': 'width',
								'value': 18
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': '_CodeIconIndicator_Ellipse1',
								'name': 'height',
								'value': 18
							}),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicatorColor',
								'name': 'color',
								'value': 16756827
							}),
					_CodeIconIndicator_SetProperty1 = mx.states.SetProperty(new mx.states.SetProperty().initializeFromObject({
												'target': 'codeIndicationLabel',
												'name': 'horizontalCenter',
												'value': null
											})),
					new mx.states.SetProperty().initializeFromObject({
								'target': 'codeIndicationLabel',
								'name': 'text',
								'value': 'i'
							})
			]
				})
		];

		mx.binding.BindingManager.executeBindings(this, '_CodeIconIndicator_SetProperty1', _CodeIconIndicator_SetProperty1);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 49 - 86

	@:meta(Bindable())
	private var _data:CompletionItem;

	@:meta(Bindable())
	public var data(get, set):CompletionItem;
	private function get_data():CompletionItem {
		return _data;
	}

	private function set_data(value:CompletionItem):CompletionItem {
		_data = value;
		if (currentState == 'info') {
			this.visible = this.includeInLayout = hasDocumentation;
		}
		return value;
	}

	private var hasDocumentation(get, never):Bool;
	private function get_hasDocumentation():Bool {
		return data != null && data.documentation != null;
	}

	override private function set_currentState(value:String):String {
		if (AS3.as(hasState(value), Bool)) {
			super.currentState = value;
		} else {
			super.currentState = 'normal';
		}
		return value;
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _CodeIconIndicator_Ellipse1_i():spark.primitives.Ellipse {
		var temp:spark.primitives.Ellipse = new spark.primitives.Ellipse();
		temp.verticalCenter = 0;
		temp.horizontalCenter = 0;
		temp.width = 20;
		temp.height = 20;
		temp.fill = _CodeIconIndicator_SolidColor1_i();
		temp.initialized(this, '_CodeIconIndicator_Ellipse1');
		_CodeIconIndicator_Ellipse1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_CodeIconIndicator_Ellipse1', _CodeIconIndicator_Ellipse1);
		return temp;
	}

	private function _CodeIconIndicator_SolidColor1_i():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		codeIndicatorColor = temp;
		mx.binding.BindingManager.executeBindings(this, 'codeIndicatorColor', codeIndicatorColor);
		return temp;
	}

	private function _CodeIconIndicator_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.verticalCenter = 0;
		temp.horizontalCenter = 0;
		temp.width = 20;
		temp.setStyle('color', 16777215);
		temp.setStyle('fontWeight', 'bold');
		temp.setStyle('fontSize', 10);
		temp.setStyle('textAlign', 'center');
		temp.setStyle('paddingLeft', 0);
		temp.setStyle('paddingBottom', 0);
		temp.setStyle('paddingTop', 0);
		temp.setStyle('paddingRight', 1);
		temp.id = 'codeIndicationLabel';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		codeIndicationLabel = temp;
		mx.binding.BindingManager.executeBindings(this, 'codeIndicationLabel', codeIndicationLabel);
		return temp;
	}

	//  binding mgmt
	private function _CodeIconIndicator_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Dynamic {
					return (null);
				},
				null,
				'_CodeIconIndicator_SetProperty1.value');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(CodeIconIndicator)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def