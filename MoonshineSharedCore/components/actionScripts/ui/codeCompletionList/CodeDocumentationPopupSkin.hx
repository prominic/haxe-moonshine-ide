/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    actionScripts.ui.codeCompletionList
 *  Class:      CodeDocumentationPopupSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/actionScripts/ui/codeCompletionList/CodeDocumentationPopupSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package actionScripts.ui.codeCompletionList;

import mx.core.FlexVersion;

import actionScripts.ui.codeCompletionList.CodeDocumentationCloseButtonSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.graphics.SolidColor;
import mx.graphics.SolidColorStroke;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.Button;
import spark.components.Group;
import spark.primitives.Rect;
import spark.skins.SparkSkin;

/**
 * @copy spark.skins.spark.ApplicationSkin#hostComponent
 */
@:meta(HostComponent(name = 'spark.components.TitleWindow'))
@:meta(States(name = 'normal', name = 'inactive', name = 'disabled', name = 'normalWithControlBar', name = 'inactiveWithControlBar', name = 'disabledWithControlBar'))
//  begin class def
class CodeDocumentationPopupSkin extends spark.skins.SparkSkin implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var background:spark.primitives.Rect;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var backgroundFill:mx.graphics.SolidColor;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var border:spark.primitives.Rect;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var borderStroke:mx.graphics.SolidColorStroke;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var closeButton:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var contentGroup:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var contents:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var moveArea:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var topGroup:spark.components.Group;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.blendMode = 'normal';
		this.mouseEnabled = false;
		this.minWidth = 76;
		this.minHeight = 76;
		this.mxmlContent = [_CodeDocumentationPopupSkin_Group1_c()];
		this.currentState = 'normal';

		// events

		states = [
				new State({
					'name': 'normal',
					'overrides': []
				}),
				new State({
					'name': 'inactive',
					'stateGroups': ['inactiveGroup'],
					'overrides': []
				}),
				new State({
					'name': 'disabled',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				}),
				new State({
					'name': 'normalWithControlBar',
					'stateGroups': ['withControls'],
					'overrides': []
				}),
				new State({
					'name': 'inactiveWithControlBar',
					'stateGroups': ['inactiveGroup', 'withControls'],
					'overrides': []
				}),
				new State({
					'name': 'disabledWithControlBar',
					'stateGroups': ['withControls'],
					'overrides': []
				})
		];

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 16 - 103

	/* Define the skin elements that should not be colorized.
	For panel, border and title background are skinned, but the content area, background, border, and title text are not. */
	private static var exclusions(default, never):Array<Dynamic> = cast ['background', 'contentGroup', 'border'];

	/* exclusions before Flex 4.5 for backwards-compatibility purposes */
	private static var exclusions_4_0(default, never):Array<Dynamic> = cast ['background', 'contentGroup'];

	/**
	 * @private
	 */
	override private function get_colorizeExclusions():Array<Dynamic> {
		// Since border is styleable via borderColor, no need to allow chromeColor to affect
		// the border.  This is wrapped in a compatibility flag since this change was added
		// in Flex 4.5
		if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5) {
			return exclusions_4_0;
		}

		return exclusions;
	}

	/**
	 * @private
	 */
	override private function initializationComplete():Void {
		useChromeColor = true;
		super.initializationComplete();
	}

	/**
	 * @private
	 */
	override private function updateDisplayList(unscaledWidth:Float, unscaledHeight:Float):Void {
		if (getStyle('borderVisible') == true) {
			border.visible = true;
			background.left = background.top = background.right = background.bottom = 1;
			contents.left = contents.top = contents.right = contents.bottom = 1;
		} else {
			border.visible = false;
			background.left = background.top = background.right = background.bottom = 0;
			contents.left = contents.top = contents.right = contents.bottom = 0;
		}

		var cr:Float = getStyle('cornerRadius');
		var withControls:Bool =
		(currentState == 'disabledWithControlBar' ||
		currentState == 'normalWithControlBar' ||
		currentState == 'inactiveWithControlBar');

		if (cornerRadius != cr) {
			cornerRadius = cr;

			setPartCornerRadii(border, withControls);
			setPartCornerRadii(background, withControls);
		}

		borderStroke.color = getStyle('borderColor');
		borderStroke.alpha = getStyle('borderAlpha');
		backgroundFill.color = getStyle('backgroundColor');
		backgroundFill.alpha = getStyle('backgroundAlpha');

		super.updateDisplayList(unscaledWidth, unscaledHeight);
	}

	/**
	 * @private
	 */
	private function setPartCornerRadii(target:Rect, includeBottom:Bool):Void {
		target.topLeftRadiusX = cornerRadius;
		target.topRightRadiusX = cornerRadius;
		target.bottomLeftRadiusX = (includeBottom) ? cornerRadius : 0;
		target.bottomRightRadiusX = (includeBottom) ? cornerRadius : 0;
	}

	private var cornerRadius:Float;

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _CodeDocumentationPopupSkin_Group1_c():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.mxmlContent = [_CodeDocumentationPopupSkin_Rect1_i(), _CodeDocumentationPopupSkin_Rect2_i(), _CodeDocumentationPopupSkin_Group2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _CodeDocumentationPopupSkin_Rect1_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.stroke = _CodeDocumentationPopupSkin_SolidColorStroke1_i();
		temp.initialized(this, 'border');
		border = temp;
		mx.binding.BindingManager.executeBindings(this, 'border', border);
		return temp;
	}

	private function _CodeDocumentationPopupSkin_SolidColorStroke1_i():mx.graphics.SolidColorStroke {
		var temp:mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
		temp.weight = 1;
		borderStroke = temp;
		mx.binding.BindingManager.executeBindings(this, 'borderStroke', borderStroke);
		return temp;
	}

	private function _CodeDocumentationPopupSkin_Rect2_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.left = 1;
		temp.top = 1;
		temp.right = 1;
		temp.bottom = 1;
		temp.fill = _CodeDocumentationPopupSkin_SolidColor1_i();
		temp.initialized(this, 'background');
		background = temp;
		mx.binding.BindingManager.executeBindings(this, 'background', background);
		return temp;
	}

	private function _CodeDocumentationPopupSkin_SolidColor1_i():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 16777215;
		backgroundFill = temp;
		mx.binding.BindingManager.executeBindings(this, 'backgroundFill', backgroundFill);
		return temp;
	}

	private function _CodeDocumentationPopupSkin_Group2_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.left = 1;
		temp.right = 1;
		temp.top = 1;
		temp.bottom = 1;
		temp.mxmlContent = [_CodeDocumentationPopupSkin_Group3_i(), _CodeDocumentationPopupSkin_Group5_i()];
		temp.id = 'contents';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		contents = temp;
		mx.binding.BindingManager.executeBindings(this, 'contents', contents);
		return temp;
	}

	private function _CodeDocumentationPopupSkin_Group3_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.right = 5;
		temp.top = 5;
		temp.mxmlContent = [_CodeDocumentationPopupSkin_Group4_i(), _CodeDocumentationPopupSkin_Button1_i()];
		temp.id = 'topGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		topGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'topGroup', topGroup);
		return temp;
	}

	private function _CodeDocumentationPopupSkin_Group4_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.bottom = 0;
		temp.id = 'moveArea';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		moveArea = temp;
		mx.binding.BindingManager.executeBindings(this, 'moveArea', moveArea);
		return temp;
	}

	private function _CodeDocumentationPopupSkin_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.useHandCursor = true;
		temp.buttonMode = true;
		temp.setStyle('skinClass', actionScripts.ui.codeCompletionList.CodeDocumentationCloseButtonSkin);
		temp.id = 'closeButton';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		closeButton = temp;
		mx.binding.BindingManager.executeBindings(this, 'closeButton', closeButton);
		return temp;
	}

	private function _CodeDocumentationPopupSkin_Group5_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.minWidth = 0;
		temp.minHeight = 0;
		temp.id = 'contentGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		contentGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'contentGroup', contentGroup);
		return temp;
	}

}

//  end package def