/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.renderers
 *  Class:      CopyContentDataGridItemRenderer
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/renderers/CopyContentDataGridItemRenderer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package components.renderers;

import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.valueObjects.Range;
import actionScripts.valueObjects.Position;
import mx.controls.DataGrid;
import mx.controls.dataGridClasses.DataGridColumn;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.listClasses.MXItemRenderer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.Image;
import spark.components.Label;
import spark.layouts.HorizontalLayout;

//  begin class def
class CopyContentDataGridItemRenderer extends mx.controls.listClasses.MXItemRenderer implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var copy:spark.components.Image;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _CopyContentDataGridItemRenderer_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_renderers_CopyContentDataGridItemRendererWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(CopyContentDataGridItemRenderer, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.height = 25;
		this.layout = _CopyContentDataGridItemRenderer_HorizontalLayout1_c();
		this.mxmlContent = [_CopyContentDataGridItemRenderer_Label1_i(), _CopyContentDataGridItemRenderer_Image1_i()];

		// events
		this.addEventListener('rollOver', ___CopyContentDataGridItemRenderer_MXItemRenderer1_rollOver);
		this.addEventListener('rollOut', ___CopyContentDataGridItemRenderer_MXItemRenderer1_rollOut);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 12 - 65

	@:meta(Embed(source = '/elements/images/copy_content_icon.png'))
	@:meta(Bindable())
	private var copyIcon:Class<Dynamic>;

	override private function set_data(value:Dynamic):Dynamic {
		super.data = value;
		if (AS3.as(value, Bool)) {
			label = listData.label;
			var dataGrid:DataGrid = AS3.as(listData.owner, DataGrid);
			if (dataGrid != null) {
				var column:DataGridColumn = Reflect.getProperty(dataGrid.columns, Std.string(listData.columnIndex));
				toolTip = column.itemToDataTip(value);
			} else {
				toolTip = null;
			}
		}
		return value;
	}

	private function onImageClick(event:MouseEvent):Void {
		event.stopImmediatePropagation();

		IDEModel.getInstance().clipboardCore.copyText(getValueToCopy());
	}

	private function onRollOverOut(event:MouseEvent):Void {
		copy.visible = copy.includeInLayout = event.type == MouseEvent.ROLL_OVER;
	}

	public function getValueToCopy():String {
		if (AS3.as(data, Bool)) {
			var dataField:String = Std.string(Reflect.getProperty(listData, 'dataField'));
			return AS3.string(Reflect.field(data, dataField));
		}

		return null;
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _CopyContentDataGridItemRenderer_HorizontalLayout1_c():spark.layouts.HorizontalLayout {
		var temp:spark.layouts.HorizontalLayout = new spark.layouts.HorizontalLayout();
		temp.paddingLeft = 5;
		temp.paddingRight = 5;
		temp.gap = 0;
		temp.verticalAlign = 'middle';
		return temp;
	}

	private function _CopyContentDataGridItemRenderer_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.percentWidth = 100.0;
		temp.maxDisplayedLines = 1;
		temp.showTruncationTip = true;
		temp.setStyle('paddingRight', 10);
		temp.id = 'labelDisplay';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		labelDisplay = temp;
		mx.binding.BindingManager.executeBindings(this, 'labelDisplay', labelDisplay);
		return temp;
	}

	private function _CopyContentDataGridItemRenderer_Image1_i():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.width = 15;
		temp.height = 16;
		temp.verticalCenter = 0;
		temp.buttonMode = true;
		temp.visible = false;
		temp.includeInLayout = false;
		temp.addEventListener('click', __copy_click);
		temp.id = 'copy';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		copy = temp;
		mx.binding.BindingManager.executeBindings(this, 'copy', copy);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __copy_click(event:flash.events.MouseEvent):Void {
		onImageClick(event);
	}

	/**
	 * @private
	 **/
	public function ___CopyContentDataGridItemRenderer_MXItemRenderer1_rollOver(event:flash.events.MouseEvent):Void {
		onRollOverOut(event);
	}

	/**
	 * @private
	 **/
	public function ___CopyContentDataGridItemRenderer_MXItemRenderer1_rollOut(event:flash.events.MouseEvent):Void {
		onRollOverOut(event);
	}

	//  binding mgmt
	private function _CopyContentDataGridItemRenderer_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Dynamic {
					return (copyIcon);
				},
				null,
				'copy.source');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(CopyContentDataGridItemRenderer)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def