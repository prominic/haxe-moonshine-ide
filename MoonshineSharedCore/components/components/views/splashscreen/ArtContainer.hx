/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.views.splashscreen
 *  Class:      ArtContainer
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/views/splashscreen/ArtContainer.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:50 MSK
 */

package components.views.splashscreen;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Canvas;
import mx.controls.Image;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;
import mx.events.FlexEvent;
import mx.events.ResizeEvent;
import mx.filters.*;
import mx.styles.*;

//  begin class def
class ArtContainer extends mx.containers.Canvas implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var artImg:mx.controls.Image;

	//  type-import dummies

	//  Container document descriptor
	private var _documentDescriptor_:mx.core.UIComponentDescriptor =
		new mx.core.UIComponentDescriptor({
			'type': mx.containers.Canvas,
			'propertiesFactory': function():Dynamic {
				return {
					'childDescriptors': [
					new mx.core.UIComponentDescriptor({
						'type': mx.controls.Image,
						'id': 'artImg',
						'events': {
							'creationComplete': '__artImg_creationComplete'
						}
					})
			]
				};
			}
		});

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _ArtContainer_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_views_splashscreen_ArtContainerWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(ArtContainer, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.horizontalScrollPolicy = 'off';
		this.verticalScrollPolicy = 'off';

		// events
		this.addEventListener('resize', ___ArtContainer_Canvas1_resize);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	//  scripts
	//  <Script>, line 29 - 64

	@:meta(Embed(source = '/elements/images/background.jpg'))
	@:meta(Bindable())private var art:Class<Dynamic>;

	private var orgWidth:Int = 0;
	private var orgHeight:Int = 0;
	private var isNoSDKMessageShown:Bool = false;

	private function loaded():Void {
		orgWidth = AS3.int(Reflect.getProperty(artImg, 'content').measuredWidth - 4);
		orgHeight = AS3.int(Reflect.getProperty(artImg, 'content').measuredHeight - 2);

		updateSize();
	}

	private function updateSize():Void {
		if (orgWidth == 0 || orgHeight == 0) {
			return;
		}

		var imgScaleX:Float = width / orgWidth;
		var imgScaleY:Float = height / orgHeight;

		var scale:Float = Math.max(imgScaleX, imgScaleY);

		var newWidth:Int = AS3.int((orgWidth * scale) + 0.5);
		var newHeight:Int = AS3.int((orgHeight * scale) + 0.5);

		artImg.width = newWidth;
		artImg.height = newHeight;

		artImg.x = (width - newWidth) / 2;
		artImg.y = (height - newHeight) / 2;
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___ArtContainer_Canvas1_resize(event:mx.events.ResizeEvent):Void {
		updateSize();
	}

	/**
	 * @private
	 **/
	public function __artImg_creationComplete(event:mx.events.FlexEvent):Void {
		loaded();
	}

	//  binding mgmt
	private function _ArtContainer_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Dynamic {
					return (art);
				},
				null,
				'artImg.source');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(ArtContainer)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def