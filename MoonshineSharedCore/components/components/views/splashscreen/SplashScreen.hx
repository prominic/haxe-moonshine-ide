/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.views.splashscreen
 *  Class:      SplashScreen
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/views/splashscreen/SplashScreen.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package components.views.splashscreen;

import actionScripts.events.SdkEvent;
import mx.controls.Alert;
import mx.core.FlexGlobals;
import mx.effects.Fade;
import mx.events.EffectEvent;
import mx.events.FlexEvent;
import mx.events.ResizeEvent;
import mx.managers.PopUpManager;
import spark.effects.Move;
import actionScripts.controllers.DataAgent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.MenuEvent;
import actionScripts.events.NewProjectEvent;
import actionScripts.events.OpenFileEvent;
import actionScripts.events.ProjectEvent;
import actionScripts.events.SettingsEvent;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;
import actionScripts.plugin.actionscript.as3project.vo.MXMLProjectVO;
import actionScripts.plugin.recentlyOpened.RecentlyOpenedPlugin;
import actionScripts.plugin.splashscreen.SplashScreenPlugin;
import actionScripts.plugin.templating.TemplatingHelper;
import actionScripts.utils.UtilsCore;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.ProjectReferenceVO;
import actionScripts.valueObjects.TemplateVO;
import actionScripts.valueObjects.URLDescriptorVO;
import components.popup.Authentication;
import components.popup.AuthenticationPopUp;
import components.popup.NegativeRatingPopup;
import components.popup.PositiveRatingPopup;
import components.renderers.RecentProjectRenderer;
import components.renderers.TemplateItemRenderer;
import flashx.textLayout.events.FlowElementMouseEvent;
import no.doomsday.console.core.events.ConsoleEvent;
import actionScripts.valueObjects.ProjectVO;

import actionScripts.ui.IContentWindow;

import components.views.splashscreen.ArtContainer;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import flashx.textLayout.elements.LinkElement;
import flashx.textLayout.elements.ParagraphElement;
import flashx.textLayout.elements.TextFlow;

import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.containers.Canvas;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.graphics.SolidColor;
import mx.styles.*;
import spark.components.Button;
import spark.components.DataGroup;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.RichEditableText;
import spark.components.Scroller;
import spark.components.VGroup;
import spark.layouts.VerticalLayout;
import spark.primitives.Rect;

//  begin class def
class SplashScreen extends mx.containers.Canvas implements actionScripts.ui.IContentWindow implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _SplashScreen_Button1:spark.components.Button;

	/**
	 * @private
	 **/
	public var _SplashScreen_Button2:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var grpNoSDKMess:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lblRecent:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var projectOpenList:spark.components.DataGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var projectTemplateList:spark.components.DataGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var recentFiles:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var recentProjects:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var vgLeftList:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var vgProjects:spark.components.Group;

	//  type-import dummies

	//  Container document descriptor
	private var _documentDescriptor_:mx.core.UIComponentDescriptor;

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		this._documentDescriptor_ =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.Canvas,
					'propertiesFactory': function():Dynamic {
						return {
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': components.views.splashscreen.ArtContainer
							}),
							new mx.core.UIComponentDescriptor({
								'type': spark.components.VGroup,
								'id': 'vgLeftList',
								'propertiesFactory': function():Dynamic {
									return {
										'left': 20,
										'verticalCenter': 0,
										'gap': 20,
										'percentWidth': 60.0,
										'mxmlContent': [this._SplashScreen_Label1_c(), this._SplashScreen_DataGroup1_i(), this._SplashScreen_Label2_c(), this._SplashScreen_DataGroup2_i(), this._SplashScreen_Label3_c(), this._SplashScreen_HGroup1_c()]
									};
								}
							}),
							new mx.core.UIComponentDescriptor({
								'type': spark.components.Group,
								'id': 'vgProjects',
								'propertiesFactory': function():Dynamic {
									return {
										'percentWidth': 40.0,
										'right': 0,
										'top': 20,
										'bottom': 40,
										'mxmlContent': [this._SplashScreen_Label4_i(), this._SplashScreen_VGroup2_c()]
									};
								}
							}),
							new mx.core.UIComponentDescriptor({
								'type': spark.components.Group,
								'id': 'grpNoSDKMess',
								'propertiesFactory': function():Dynamic {
									return {
										'percentWidth': 100.0,
										'height': 24,
										'alpha': 0,
										'mxmlContent': [this._SplashScreen_Rect1_c(), this._SplashScreen_RichEditableText1_c()]
									};
								}
							})
				]
						};
					}
				});
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _SplashScreen_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_views_splashscreen_SplashScreenWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(SplashScreen, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.label = 'Home';
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.horizontalScrollPolicy = 'off';
		this.verticalScrollPolicy = 'off';

		// events
		this.addEventListener('creationComplete', ___SplashScreen_Canvas1_creationComplete);
		this.addEventListener('removedFromStage', ___SplashScreen_Canvas1_removedFromStage);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	//  scripts
	//  <Script>, line 31 - 474

	@:meta(Embed(name = '/elements/images/icoThumbUp.png'))
	private var ICON_THUMB_UP(default, null):Class<Dynamic>;
	@:meta(Embed(name = '/elements/images/icoThumbDown.png'))
	private var ICON_THUMB_DOWN(default, null):Class<Dynamic>;

	@:meta(Bindable())
	public var plugin:SplashScreenPlugin;

	@:meta(Bindable())
	private var model:IDEModel = IDEModel.getInstance();

	private var loader:DataAgent;
	private var recentOpenedProjectObject:Dynamic;
	private var authPopup:AuthenticationPopUp;
	private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
	private var positiveRatingPopup:PositiveRatingPopup;
	private var negativeRatingPopup:NegativeRatingPopup;

	private var isNoSDKMessageShown:Bool = false;

	public var longLabel(get, never):String;
	private function get_longLabel():String {
		return 'Home';
	}

	public function isChanged():Bool {
		return false;
	}

	public function isEmpty():Bool {
		return true;
	}

	public function save():Void {}

	public function openRecentItem(refVO:ProjectReferenceVO):Void {
		// do not open an already opened project
		if (model.mainView.getTreeViewPanel() != null && UtilsCore.checkProjectIfAlreadyOpened(refVO.path)) {
			return;
		}

		// desktop
		if (AS3.as(ConstantsCoreVO.IS_AIR, Bool)) {
			recentOpenedProjectObject = new FileLocation(refVO.path);

			if (!AS3.as(FileLocation(recentOpenedProjectObject).fileBridge.exists, Bool)) {
				Alert.show('Can\'t import: The file does not exist anymore.', 'Error!');
				return;
			}

			if (AS3.as(Reflect.field(Reflect.field(recentOpenedProjectObject, 'fileBridge'), 'isDirectory'), Bool)) {
				var project:ProjectVO;
				var lastOpenedOption:String;

				// check if any last opend option is associated with the project
				for (i in model.recentlyOpenedProjectOpenedOption) {
					if (Reflect.field(i, 'path') == Reflect.field(Reflect.field(recentOpenedProjectObject, 'fileBridge'), 'nativePath')) {
						lastOpenedOption = AS3.string(Reflect.field(i, 'option'));
						break;
					}
				}

				project = getProjectBasedOnFileOption(lastOpenedOption, refVO.name);

				if (project == null) {
					Alert.show('Can\'t import: Not a valid Flex project directory.', 'Error!');
					return;
				}

				// save old sdk details to the project
				if (Std.is(project, AS3ProjectVO)) {
					var as3Project:AS3ProjectVO = AS3ProjectVO(project);
					as3Project.buildOptions.oldDefaultSDKPath = refVO.sdk;
				}

				// trigger the project to open
				GlobalEventDispatcher.getInstance().dispatchEvent(
						new ProjectEvent(ProjectEvent.ADD_PROJECT, project, lastOpenedOption)
			);
			} else {
				GlobalEventDispatcher.getInstance().dispatchEvent(
						new OpenFileEvent(OpenFileEvent.OPEN_FILE, cast [AS3.as(recentOpenedProjectObject, FileLocation)])
			);
			}
		}// web
		else {
			recentOpenedProjectObject = refVO;
			// check if there is no login or not
			if (URLDescriptorVO.BASE_URL_MIRROR == '') {
				GlobalEventDispatcher.getInstance().dispatchEvent(
						new MenuEvent(ProjectEvent.EVENT_IMPORT_FLASHBUILDER_PROJECT, false, false, {
							'path': Reflect.field(recentOpenedProjectObject, 'path'),
							'name': Reflect.field(recentOpenedProjectObject, 'name')
						})
			);
			} else if (AS3.as(ConstantsCoreVO.IS_AUTH_REQUIRED, Bool)) {
				loader = new DataAgent(URLDescriptorVO.LOGIN_TEST, onProjectLoadSuccess, onLoginTestFault, null);
			} else {
				loadRecentProject();
			}
		}
	}

	private function updateRecetProjectList(event:Event):Void {
		recentProjects.removeAllElements();
		for (i in model.recentlyOpenedProjects) {
			var tmpRow:RecentProjectRenderer = new RecentProjectRenderer();
			tmpRow.project = i;
			recentProjects.addElement(tmpRow);
		}

		updateRecentLabelPosition();
	}

	private function updateRecentLabelPosition():Void {
		if (recentProjects.numElements > 0) {
			vgProjects.callLater(function():Void {
						var tmpRow:RecentProjectRenderer = AS3.as(recentProjects.getElementAt(0), RecentProjectRenderer);
						lblRecent.y = vgProjects.contentToLocal(new Point(tmpRow.x, tmpRow.y)).y;
					});
		}
	}

	private function updateRecetFileList(event:Event):Void {
		recentFiles.removeAllElements();
		for (i in model.recentlyOpenedFiles) {
			var tmpRow:RecentProjectRenderer = new RecentProjectRenderer();
			tmpRow.project = i;
			recentFiles.addElement(tmpRow);
		}
	}

	private function loadRecentProject():Void {
		// we need another check here, too
		if (UtilsCore.checkProjectIfAlreadyOpened(AS3.string(Reflect.field(recentOpenedProjectObject, 'path')))) {
			return;
		}

		var activeProj:MXMLProjectVO = new MXMLProjectVO(AS3.string(Reflect.field(recentOpenedProjectObject, 'path')), AS3.string(Reflect.field(recentOpenedProjectObject, 'name')));
		activeProj.projectName = AS3.string(Reflect.field(recentOpenedProjectObject, 'name'));
		activeProj.projectRemotePath = '';
		model.activeProject = activeProj;
		GlobalEventDispatcher.getInstance().dispatchEvent(
				new ProjectEvent(ProjectEvent.ADD_PROJECT, activeProj)
		);

		// just to makeup some visual distruaction
		if (authPopup != null && AS3.as(authPopup.isPopUp, Bool)) {
			PopUpManager.removePopUp(authPopup);
			authPopup = null;
		}
	}

	private function handleProjectOpen(event:Event):Void {
		GlobalEventDispatcher.getInstance().dispatchEvent(
				new MenuEvent(ProjectEvent.EVENT_IMPORT_FLASHBUILDER_PROJECT)
		);
	}

	private function handleTemplateClick(event:Event):Void {
		var rdr:TemplateItemRenderer = AS3.as(event.target, TemplateItemRenderer);
		var fl:Dynamic = (AS3.as(ConstantsCoreVO.IS_AIR, Bool)) ? AS3.as(rdr.data, TemplateVO) : AS3.as(rdr.data, FileLocation);

		if (AS3.as(ConstantsCoreVO.IS_AIR, Bool)) {
			if (AS3.as(Reflect.field(Reflect.field(Reflect.field(fl, 'file'), 'fileBridge'), 'isDirectory'), Bool)) {
				GlobalEventDispatcher.getInstance().dispatchEvent(
						new Event('eventNewProjectFromTemplate' + TemplatingHelper.getTemplateLabel(Reflect.field(fl, 'file')))
			);
			} else {
				GlobalEventDispatcher.getInstance().dispatchEvent(
						new Event('eventNewFileFromTemplate' + TemplatingHelper.getTemplateLabel(Reflect.field(fl, 'file')))
			);
			}
		} else {
			GlobalEventDispatcher.getInstance().dispatchEvent(
					new NewProjectEvent(NewProjectEvent.CREATE_NEW_PROJECT, Std.string(FileLocation(fl).fileBridge.name), null, null)
			);
		}
	}

	private function handleRecentClick(event:Event):Void {
		var refVO:ProjectReferenceVO = RecentProjectRenderer(event.target).project;
		openRecentItem(refVO);
	}

	private function getProjectBasedOnFileOption(lastOpenedOption:String, projectName:String):ProjectVO {
		var projectFile:Dynamic = Reflect.field(Reflect.field(recentOpenedProjectObject, 'fileBridge'), 'getFile');
		var projectFileLocation:FileLocation;

		if (lastOpenedOption == null ||
			lastOpenedOption == ProjectEvent.LAST_OPENED_AS_FB_PROJECT ||
			lastOpenedOption == ProjectEvent.LAST_OPENED_AS_FD_PROJECT) {
			projectFileLocation = model.flexCore.testFlashDevelop(projectFile);
			if (projectFileLocation != null) {
				return model.flexCore.parseFlashDevelop(null, projectFileLocation, projectName);
			}

			projectFileLocation = model.flexCore.testFlashBuilder(projectFile);
			if (projectFileLocation != null) {
				return model.flexCore.parseFlashBuilder(AS3.as(recentOpenedProjectObject, FileLocation));
			}

			projectFileLocation = model.javaCore.testJava(projectFile);
			if (projectFileLocation != null) {
				return model.javaCore.parseJava(AS3.as(recentOpenedProjectObject, FileLocation));
			}
		}

		return null;
	}

	private function onProjectLoadSuccess(value:Dynamic):Void {
		loader = null;

		var xData:FastXML = FastXML.parse(Std.string(value));
		if (xData == null) {
			return;
		}
		if (xData.node.status == Authentication.SESSION_UNAUTHENTICATED) {
			authPopup = new AuthenticationPopUp();
			PopUpManager.addPopUp(authPopup, AS3.as(FlexGlobals.topLevelApplication, DisplayObject), false);
			PopUpManager.centerPopUp(authPopup);
			authPopup.addEventListener(Authentication.SUCCESS, authSuccessHandler);
			authPopup.addEventListener(Authentication.CANCEL, authCancelHandler);
		} else if (xData.node.status == Authentication.SESSION_AUTHLIMITEDACCESS) {
			Alert.show('You do not have sufficient rights to performn this operation. If you feel this is in error please contact the Administrator.', 'Error!');
		} else {
			loadRecentProject();
		}
	}

	private function onLoginTestFault(result:Dynamic):Void {
		loader = null;
	}

	private function authSuccessHandler(evt:Event):Void {
		loadRecentProject();
	}

	private function authCancelHandler(evt:Event):Void {
		authPopup.removeEventListener(Authentication.SUCCESS, authSuccessHandler);
		authPopup.removeEventListener(Authentication.CANCEL, authCancelHandler);
		PopUpManager.removePopUp(authPopup);
		authPopup = null;
	}

	private function onSplashScreenCreationComplete(event:FlexEvent):Void {
		addEventListener(ResizeEvent.RESIZE, onStageResized);
		addEventListener(RecentProjectRenderer.RECENT_PROJECT_RENDERER_CLICK, handleRecentClick);
		dispatcher.addEventListener(SdkEvent.CHANGE_SDK, onDefaultSDKStateChanged);
		dispatcher.addEventListener(RecentlyOpenedPlugin.RECENT_PROJECT_LIST_UPDATED, updateRecetProjectList);
		dispatcher.addEventListener(RecentlyOpenedPlugin.RECENT_FILES_LIST_UPDATED, updateRecetFileList);
		dispatcher.addEventListener(ConsoleEvent.OPEN_REPORT_A_BUG_WINDOW, onOpenReportBugWithError, false, 0, true);
		dispatcher.addEventListener('eventOpenRecentProject', onOpenRecentProject);
		dispatcher.addEventListener('eventOpenRecentFile', onOpenRecentFile);

		grpNoSDKMess.y = this.height;

		// manual run for the first time
		updateRecetProjectList(null);
		updateRecetFileList(null);
	}

	private function onOpenRecentProject(menuEvent:MenuEvent):Void {
		openRecentItem(AS3.as(menuEvent.data, ProjectReferenceVO));
	}

	private function onOpenRecentFile(menuEvent:MenuEvent):Void {
		openRecentItem(AS3.as(menuEvent.data, ProjectReferenceVO));
	}

	private function onStageResized(event:ResizeEvent):Void {
		if (isNoSDKMessageShown) {
			grpNoSDKMess.y = this.height - grpNoSDKMess.height;
		}
		updateRecentLabelPosition();
	}

	private function onDefaultSDKStateChanged(event:Event):Void {
		var isSDKAvailable:Bool = (model.defaultSDK != null) ? true : false;
		if (!isSDKAvailable && !isNoSDKMessageShown) {
			isNoSDKMessageShown = true;
			grpNoSDKMess.y = this.height - grpNoSDKMess.height;

			var tmpFade:Fade = new Fade(grpNoSDKMess);
			tmpFade.alphaFrom = 0;
			tmpFade.alphaTo = 1;
			tmpFade.play();
		} else if (isSDKAvailable && isNoSDKMessageShown) {
			var tmpMove:Move = new Move(grpNoSDKMess);
			tmpMove.yFrom = grpNoSDKMess.y;
			tmpMove.yTo = height;
			tmpMove.addEventListener(EffectEvent.EFFECT_END, onEffectEnds);
			tmpMove.play();
			isNoSDKMessageShown = false;
		} else if (isNoSDKMessageShown) {
			grpNoSDKMess.y = this.height - grpNoSDKMess.height;
		}

		var onEffectEnds:EffectEvent->Void = function(effEvent:EffectEvent):Void {
			effEvent.target.removeEventListener(EffectEvent.EFFECT_END, onEffectEnds);
			grpNoSDKMess.alpha = 0;
		}
	}

	private function onEffectEnds(effEvent:EffectEvent):Void {
		effEvent.target.removeEventListener(EffectEvent.EFFECT_END, onEffectEnds);
		grpNoSDKMess.visible = false;
	}

	/**
	 * On agreement link clicked
	 */
	private function handleLinkEvent(event:FlowElementMouseEvent):Void {
		dispatcher.dispatchEvent(new SettingsEvent(SettingsEvent.EVENT_OPEN_SETTINGS, 'actionScripts.plugins.as3project.mxmlc::MXMLCPlugin'));
	}

	private function onPositiveRating(event:MouseEvent):Void {
		positiveRatingPopup = AS3.as(PopUpManager.createPopUp(AS3.as(FlexGlobals.topLevelApplication, DisplayObject), PositiveRatingPopup, true), PositiveRatingPopup);
		PopUpManager.centerPopUp(positiveRatingPopup);
	}

	private function onNegativeRating(event:MouseEvent, withError:String = null):Void {
		negativeRatingPopup = AS3.as(PopUpManager.createPopUp(AS3.as(FlexGlobals.topLevelApplication, DisplayObject), NegativeRatingPopup, true), NegativeRatingPopup);
		negativeRatingPopup.width = screen.width * .6;
		negativeRatingPopup.height = screen.height * .7;
		negativeRatingPopup.errorDetails = withError;
		PopUpManager.centerPopUp(negativeRatingPopup);
	}

	private function onOpenReportBugWithError(event:ConsoleEvent):Void {
		onNegativeRating(null, event.text);
	}

	private function onTabRemoved(event:Event):Void {
		removeEventListener(ResizeEvent.RESIZE, onStageResized);
		removeEventListener(RecentProjectRenderer.RECENT_PROJECT_RENDERER_CLICK, handleRecentClick);
		dispatcher.removeEventListener(SdkEvent.CHANGE_SDK, onDefaultSDKStateChanged);
		dispatcher.removeEventListener(RecentlyOpenedPlugin.RECENT_PROJECT_LIST_UPDATED, updateRecetProjectList);
		dispatcher.removeEventListener(RecentlyOpenedPlugin.RECENT_FILES_LIST_UPDATED, updateRecetFileList);
		dispatcher.removeEventListener(ConsoleEvent.OPEN_REPORT_A_BUG_WINDOW, onOpenReportBugWithError);
		dispatcher.removeEventListener('eventOpenRecentProject', onOpenRecentProject);
		dispatcher.removeEventListener('eventOpenRecentFile', onOpenRecentFile);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___SplashScreen_Canvas1_creationComplete(event:mx.events.FlexEvent):Void {
		onSplashScreenCreationComplete(event);
	}

	/**
	 * @private
	 **/
	public function ___SplashScreen_Canvas1_removedFromStage(event:flash.events.Event):Void {
		onTabRemoved(event);
	}

	private function _SplashScreen_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'OPEN';
		temp.setStyle('color', 16777215);
		temp.setStyle('paddingTop', 3);
		temp.setStyle('paddingLeft', 3);
		temp.setStyle('paddingRight', 3);
		temp.setStyle('paddingBottom', 0);
		temp.setStyle('fontFamily', 'DejaVuSerif');
		temp.setStyle('fontStyle', 'italic');
		temp.setStyle('fontSize', 18);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SplashScreen_DataGroup1_i():spark.components.DataGroup {
		var temp:spark.components.DataGroup = new spark.components.DataGroup();
		temp.itemRenderer = _SplashScreen_ClassFactory1_c();
		temp.percentWidth = 100.0;
		temp.layout = _SplashScreen_VerticalLayout1_c();
		temp.setStyle('color', 16777215);
		temp.addEventListener('creationComplete', __projectOpenList_creationComplete);
		temp.id = 'projectOpenList';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		projectOpenList = temp;
		mx.binding.BindingManager.executeBindings(this, 'projectOpenList', projectOpenList);
		return temp;
	}

	private function _SplashScreen_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.renderers.TemplateItemRenderer;
		return temp;
	}

	private function _SplashScreen_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.gap = 10;
		temp.clipAndEnableScrolling = false;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __projectOpenList_creationComplete(event:mx.events.FlexEvent):Void {
		projectOpenList.addEventListener('itemClick', handleProjectOpen);
	}

	private function _SplashScreen_Label2_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'CREATE';
		temp.setStyle('color', 14079702);
		temp.setStyle('paddingTop', 3);
		temp.setStyle('paddingLeft', 3);
		temp.setStyle('paddingRight', 3);
		temp.setStyle('paddingBottom', 0);
		temp.setStyle('fontFamily', 'DejaVuSerif');
		temp.setStyle('fontStyle', 'italic');
		temp.setStyle('fontSize', 18);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SplashScreen_DataGroup2_i():spark.components.DataGroup {
		var temp:spark.components.DataGroup = new spark.components.DataGroup();
		temp.itemRenderer = _SplashScreen_ClassFactory2_c();
		temp.percentWidth = 100.0;
		temp.layout = _SplashScreen_VerticalLayout2_c();
		temp.setStyle('color', 16777215);
		temp.addEventListener('creationComplete', __projectTemplateList_creationComplete);
		temp.id = 'projectTemplateList';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		projectTemplateList = temp;
		mx.binding.BindingManager.executeBindings(this, 'projectTemplateList', projectTemplateList);
		return temp;
	}

	private function _SplashScreen_ClassFactory2_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.renderers.TemplateItemRenderer;
		return temp;
	}

	private function _SplashScreen_VerticalLayout2_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.gap = 10;
		temp.clipAndEnableScrolling = false;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __projectTemplateList_creationComplete(event:mx.events.FlexEvent):Void {
		projectTemplateList.addEventListener('itemClick', handleTemplateClick);
	}

	private function _SplashScreen_Label3_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'FEEDBACK';
		temp.setStyle('color', 14079702);
		temp.setStyle('paddingTop', 3);
		temp.setStyle('paddingLeft', 3);
		temp.setStyle('paddingRight', 3);
		temp.setStyle('paddingBottom', 0);
		temp.setStyle('fontFamily', 'DejaVuSerif');
		temp.setStyle('fontStyle', 'italic');
		temp.setStyle('fontSize', 18);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SplashScreen_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.autoLayout = true;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_SplashScreen_Button1_i(), _SplashScreen_Button2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SplashScreen_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'This is great!';
		temp.height = 26;
		temp.addEventListener('click', ___SplashScreen_Button1_click);
		temp.id = '_SplashScreen_Button1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SplashScreen_Button1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SplashScreen_Button1', _SplashScreen_Button1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SplashScreen_Button1_click(event:flash.events.MouseEvent):Void {
		onPositiveRating(event);
	}

	private function _SplashScreen_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'I\'m having some problems';
		temp.height = 26;
		temp.addEventListener('click', ___SplashScreen_Button2_click);
		temp.id = '_SplashScreen_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SplashScreen_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SplashScreen_Button2', _SplashScreen_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SplashScreen_Button2_click(event:flash.events.MouseEvent):Void {
		onNegativeRating(event);
	}

	private function _SplashScreen_Label4_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'RECENT';
		temp.right = 20;
		temp.setStyle('color', 16777215);
		temp.setStyle('paddingTop', 2);
		temp.setStyle('paddingLeft', 3);
		temp.setStyle('paddingBottom', 0);
		temp.setStyle('fontFamily', 'DejaVuSerif');
		temp.setStyle('fontStyle', 'italic');
		temp.setStyle('fontSize', 18);
		temp.id = 'lblRecent';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lblRecent = temp;
		mx.binding.BindingManager.executeBindings(this, 'lblRecent', lblRecent);
		return temp;
	}

	private function _SplashScreen_VGroup2_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.top = 36;
		temp.bottom = 0;
		temp.gap = 0;
		temp.mxmlContent = [_SplashScreen_Scroller1_c(), _SplashScreen_Spacer1_c(), _SplashScreen_Scroller2_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SplashScreen_Scroller1_c():spark.components.Scroller {
		var temp:spark.components.Scroller = new spark.components.Scroller();
		temp.percentWidth = 100.0;
		temp.percentHeight = 50.0;
		temp.viewport = _SplashScreen_VGroup3_i();
		temp.setStyle('horizontalScrollPolicy', 'off');
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SplashScreen_VGroup3_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.paddingRight = 20;
		temp.gap = 5;
		temp.verticalAlign = 'bottom';
		temp.horizontalAlign = 'right';
		temp.id = 'recentProjects';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		recentProjects = temp;
		mx.binding.BindingManager.executeBindings(this, 'recentProjects', recentProjects);
		return temp;
	}

	private function _SplashScreen_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.height = 20;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SplashScreen_Scroller2_c():spark.components.Scroller {
		var temp:spark.components.Scroller = new spark.components.Scroller();
		temp.percentWidth = 100.0;
		temp.percentHeight = 50.0;
		temp.viewport = _SplashScreen_VGroup4_i();
		temp.setStyle('horizontalScrollPolicy', 'off');
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SplashScreen_VGroup4_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.paddingRight = 20;
		temp.gap = 5;
		temp.horizontalAlign = 'right';
		temp.id = 'recentFiles';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		recentFiles = temp;
		mx.binding.BindingManager.executeBindings(this, 'recentFiles', recentFiles);
		return temp;
	}

	private function _SplashScreen_Rect1_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.fill = _SplashScreen_SolidColor1_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _SplashScreen_SolidColor1_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 16777164;
		return temp;
	}

	private function _SplashScreen_RichEditableText1_c():spark.components.RichEditableText {
		var temp:spark.components.RichEditableText = new spark.components.RichEditableText();
		temp.editable = false;
		temp.focusEnabled = false;
		temp.percentWidth = 100.0;
		temp.verticalCenter = 0;
		temp.textFlow = _SplashScreen_TextFlow1_c();
		temp.setStyle('color', 3355443);
		temp.setStyle('textAlign', 'center');
		temp.setStyle('fontSize', 11);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SplashScreen_TextFlow1_c():flashx.textLayout.elements.TextFlow {
		var temp:flashx.textLayout.elements.TextFlow = new flashx.textLayout.elements.TextFlow();
		temp.mxmlChildren = ['\n\t\t\t\t\t', _SplashScreen_ParagraphElement1_c(), '\n\t\t\t\t'];
		temp.initialized(this, null);
		return temp;
	}

	private function _SplashScreen_ParagraphElement1_c():flashx.textLayout.elements.ParagraphElement {
		var temp:flashx.textLayout.elements.ParagraphElement = new flashx.textLayout.elements.ParagraphElement();
		temp.mxmlChildren = ['Some options may unavailable until default SDK set. You can set by clicking ', _SplashScreen_LinkElement1_c(), '.'];
		temp.initialized(this, null);
		return temp;
	}

	private function _SplashScreen_LinkElement1_c():flashx.textLayout.elements.LinkElement {
		var temp:flashx.textLayout.elements.LinkElement = new flashx.textLayout.elements.LinkElement();
		temp.mxmlChildren = ['here'];
		temp.addEventListener('click', ___SplashScreen_LinkElement1_click);
		temp.initialized(this, null);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SplashScreen_LinkElement1_click(event:flashx.textLayout.events.FlowElementMouseEvent):Void {
		handleLinkEvent(event);
	}

	//  binding mgmt
	private function _SplashScreen_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():mx.collections.IList {
					return (ConstantsCoreVO.TEMPLATES_OPEN_PROJECTS);
				},
				null,
				'projectOpenList.dataProvider');

		result[1] = new mx.binding.Binding(this,
				function():mx.collections.IList {
					return (plugin.projectsTemplates);
				},
				null,
				'projectTemplateList.dataProvider');

		result[2] = new mx.binding.Binding(this,
				function():Dynamic {
					return (ICON_THUMB_UP);
				},
				function(_sourceFunctionReturnValue:Dynamic):Void {
					_SplashScreen_Button1.setStyle('icon', _sourceFunctionReturnValue);
				},
				'_SplashScreen_Button1.icon');

		result[3] = new mx.binding.Binding(this,
				function():Dynamic {
					return (ICON_THUMB_DOWN);
				},
				function(_sourceFunctionReturnValue:Dynamic):Void {
					_SplashScreen_Button2.setStyle('icon', _sourceFunctionReturnValue);
				},
				'_SplashScreen_Button2.icon');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(SplashScreen)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def