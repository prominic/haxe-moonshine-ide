/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.views.other
 *  Class:      FilesExtensionFilterView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/views/other/FilesExtensionFilterView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package components.views.other;

import mx.collections.ArrayCollection;
import mx.events.FlexEvent;
import actionScripts.valueObjects.ConstantsCoreVO;

import haxe.Constraints.Function;
import components.views.other.FilesExtensionFilterViewInnerClass0;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.BorderContainer;
import spark.components.Label;
import spark.components.List;
import spark.layouts.VerticalLayout;

@:meta(Event(name = 'filterChanged', type = 'flash.events.Event'))
//  begin class def
class FilesExtensionFilterView extends spark.components.BorderContainer implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lstExtensions:spark.components.List;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _FilesExtensionFilterView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_views_other_FilesExtensionFilterViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(FilesExtensionFilterView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.layout = _FilesExtensionFilterView_VerticalLayout1_c();
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_FilesExtensionFilterView_Array1_c);

		// events
		this.addEventListener('creationComplete', ___FilesExtensionFilterView_BorderContainer1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.borderVisible = false;
					this.backgroundColor = 10526880;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 36 - 107

	@:meta(Bindable())
	public var patterns:ArrayCollection;

	public function selectAll():Void {
		internalSelect(true);
	}

	public function deselectAll():Void {
		internalSelect(false);
	}

	public function hasSelectedExtensions():Bool {
		if (patterns == null) {
			return false;
		}

		return AS3.as(patterns.source.some(hasSelected), Bool);
	}

	public function getSelectedExtensions():Array<Dynamic> {
		if (patterns == null) {
			return [];
		}

		return patterns.source.filter(hasSelected);
	}

	private function hasSelected(item:Dynamic, index:Int, arr:Array<Dynamic>):Bool {
		return AS3.as(Reflect.field(item, 'isSelected'), Bool);
	}

	private function listExtensionsLabelFunction(item:Dynamic):String {
		if (!AS3.as(item, Bool)) {
			return '';
		}

		return '*.' + Reflect.field(item, 'label');
	}

	private function onFileExtensionFilterViewCreationComplete(event:FlexEvent):Void {
		if (patterns == null) {
			patterns = new ArrayCollection();
			for (extension in as3hx.Compat.each(ConstantsCoreVO.READABLE_FILES)) {
				patterns.addItem({
							'label': extension,
							'isSelected': false
						});
			}
		}
	}

	public function notifyFilterChanged():Void {
		dispatchEvent(new Event('filterChanged'));
	}

	private function internalSelect(selectionValue:Bool):Void {
		for (i in patterns) {
			Reflect.setField(i, 'isSelected', selectionValue);
		}
		patterns.refresh();
		dispatchEvent(new Event('filterChanged'));
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _FilesExtensionFilterView_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		return temp;
	}

	private function _FilesExtensionFilterView_Array1_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [_FilesExtensionFilterView_Label1_c(), _FilesExtensionFilterView_List1_i()];
		return temp;
	}

	private function _FilesExtensionFilterView_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Reduce selection to only files of type(s):';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _FilesExtensionFilterView_List1_i():spark.components.List {
		var temp:spark.components.List = new spark.components.List();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.styleName = 'multiLineList';
		temp.itemRenderer = _FilesExtensionFilterView_ClassFactory1_c();
		temp.id = 'lstExtensions';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lstExtensions = temp;
		mx.binding.BindingManager.executeBindings(this, 'lstExtensions', lstExtensions);
		return temp;
	}

	private function _FilesExtensionFilterView_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.views.other.FilesExtensionFilterViewInnerClass0;
		temp.properties = {
					'outerDocument': this
				};
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___FilesExtensionFilterView_BorderContainer1_creationComplete(event:mx.events.FlexEvent):Void {
		onFileExtensionFilterViewCreationComplete(event);
	}

	//  binding mgmt
	private function _FilesExtensionFilterView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'lstExtensions.dataProvider', 'patterns');

		result[1] = new mx.binding.Binding(this,
				function():Function {
					return (listExtensionsLabelFunction);
				},
				null,
				'lstExtensions.labelFunction');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(FilesExtensionFilterView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def