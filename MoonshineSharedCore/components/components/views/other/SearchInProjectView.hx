/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.views.other
 *  Class:      SearchInProjectView
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/views/other/SearchInProjectView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package components.views.other;

import mx.collections.ArrayCollection;
import mx.core.FlexGlobals;
import mx.events.CloseEvent;
import mx.events.CollectionEvent;
import mx.events.FlexEvent;
import mx.managers.PopUpManager;
import actionScripts.events.GeneralEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.OpenFileEvent;
import actionScripts.events.WorkerEvent;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.locator.IDEWorker;
import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;
import actionScripts.plugin.findreplace.FindReplacePlugin;
import actionScripts.plugin.search.SearchPlugin;
import actionScripts.ui.tabview.TabEvent;
import actionScripts.utils.TextUtil;
import components.popup.ReplaceProjectSearchPopup;
import actionScripts.valueObjects.ProjectVO;

import actionScripts.ui.IContentWindow;
import actionScripts.ui.renderers.SearchInProjectTreeItemRenderer;
import elements.skins.IDEProgressBarSkin;
import elements.skins.VScrollBarThumbSkin;
import elements.skins.VScrollBarTrackSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Canvas;
import mx.controls.ProgressBar;
import mx.controls.Tree;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.VGroup;

//  begin class def
class SearchInProjectView extends mx.containers.Canvas implements actionScripts.ui.IContentWindow implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _SearchInProjectView_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnReplae:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var pbFiles:mx.controls.ProgressBar;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var tree:mx.controls.Tree;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtFoundMessage:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var vgContent:spark.components.VGroup;

	//  type-import dummies

	//  Container document descriptor
	private var _documentDescriptor_:mx.core.UIComponentDescriptor;

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		this._documentDescriptor_ =
				new mx.core.UIComponentDescriptor({
					'type': mx.containers.Canvas,
					'propertiesFactory': function():Dynamic {
						return {
							'childDescriptors': [
							new mx.core.UIComponentDescriptor({
								'type': spark.components.VGroup,
								'id': 'vgContent',
								'propertiesFactory': function():Dynamic {
									return {
										'paddingLeft': 12,
										'paddingTop': 24,
										'paddingBottom': 24,
										'paddingRight': 12,
										'percentWidth': 100.0,
										'percentHeight': 100.0,
										'mxmlContent': [this._SearchInProjectView_HGroup1_c(), this._SearchInProjectView_Tree1_i()]
									};
								}
							})
				]
						};
					}
				});
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _SearchInProjectView_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_views_other_SearchInProjectViewWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(SearchInProjectView, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		// events
		this.addEventListener('creationComplete', ___SearchInProjectView_Canvas1_creationComplete);
		this.addEventListener('remove', ___SearchInProjectView_Canvas1_remove);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
				};
		// ambient styles
		// mx_internal::_SearchInProjectView_StylesInit();

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		// mx_internal::setDocumentDescriptor(_documentDescriptor_);

		super.initialize();
	}

	//  scripts
	//  <Script>, line 26 - 348

	@:meta(Embed(name = '/elements/images/icoTreeFolder_open.png'))
	private var iconFolderOpen:Class<Dynamic>;
	@:meta(Embed(name = '/elements/images/icoTreeFolder_close.png'))
	private var iconFolderClose:Class<Dynamic>;
	@:meta(Embed(name = '/elements/images/icoTreeFile.png'))
	private var iconFile:Class<Dynamic>;

	@:meta(Bindable())public var valueToSearch:String;
	@:meta(Bindable())public var isShowReplaceWhenDone:Bool = false;

	public var selectedProjectToSearch:ProjectVO;
	public var patterns:String;
	public var scope:String;
	public var isEnclosingProjects:Bool = false;
	public var isMatchCase:Bool = false;
	public var isRegexp:Bool = false;
	public var isEscapeChars:Bool = false;

	private var worker:IDEWorker = IDEWorker.getInstance();
	private var model:IDEModel = IDEModel.getInstance();
	private var foundCountsDict:haxe.ds.ObjectMap<Dynamic, Dynamic> = new haxe.ds.ObjectMap<Dynamic, Dynamic>();
	private var currentCount:Int = 0;
	private var filesFoundInCount:Int = 0;

	/**
	 * IContentWindow Inteface Methods
	 */
	public var longLabel(get, never):String;
	private function get_longLabel():String {
		return Std.string(label);
	}

	public function isChanged():Bool {
		return false;
	}

	public function isEmpty():Bool {
		return false;
	}

	public function save():Void {}

	public function resetSearch():Void {
		txtFoundMessage.includeInLayout = txtFoundMessage.visible = false;
		pbFiles.includeInLayout = pbFiles.visible = true;
		pbFiles.setProgress(0, 0);
		currentCount = filesFoundInCount = 0;
		tree.dataProvider = null;
		foundCountsDict = new Dictionary();

		this.label = 'Search /' + valueToSearch + '/';

		// re-initiate worker
		// remove worker in case less-patience user initiate another
		// search process even before the current is over
		worker.removeEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming);
		worker.addEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming, false, 0, true);
		worker.sendToWorker(WorkerEvent.SEARCH_IN_PROJECTS, getSearchObject());
	}

	private function onCreationCompletes():Void {
		this.label = 'Search /' + valueToSearch + '/';
		worker.addEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming, false, 0, true);
		model.projects.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleProjectsChange);

		// @note
		// sending over a full-fledged typed 'projectFolder' (FileWrapper)
		// object having a huge file list (i.e. FlexJS project with its all js-bin folder/files)
		// to worker thread is very expensive. Sending as BytesArray also very expensive
		// in such cases when converting a big typed object to BytesArray.
		// thus sending the paths to the projects and parse the folders again at the
		// worker side is far more economic. We must remember that sending
		// objects over worker is copying all the bytes. It's better to balance
		// between convention and the output
		worker.sendToWorker(WorkerEvent.SEARCH_IN_PROJECTS, getSearchObject());
	}

	private function getSearchObject():Dynamic {
		var tmpObj:Dynamic = {};
		Reflect.setField(tmpObj, 'valueToSearch', valueToSearch);
		Reflect.setField(tmpObj, 'patterns', patterns);
		Reflect.setField(tmpObj, 'isMatchCase', isMatchCase);
		Reflect.setField(tmpObj, 'isRegexp', isRegexp);
		Reflect.setField(tmpObj, 'isEscapeChars', isEscapeChars);
		Reflect.setField(tmpObj, 'isShowReplaceWhenDone', isShowReplaceWhenDone);

		Reflect.setField(tmpObj, 'projects', getProjectPaths());

		return tmpObj;
	}

	private function getProjectPaths():Array<Dynamic> {
		var tmpArr:Array<Dynamic> = [];
		switch (scope) {
			case SearchPlugin.WORKSPACE:
				for (i in model.projects) {
					tmpArr.push(Reflect.field(Reflect.field(Reflect.field(i, 'folderLocation'), 'fileBridge'), 'nativePath'));
				}
			case _:
				{
					tmpArr.push(selectedProjectToSearch.folderLocation.fileBridge.nativePath);
					if (isEnclosingProjects) {
						if (Std.is(selectedProjectToSearch, AS3ProjectVO)) {
							var as3Project:AS3ProjectVO = AS3ProjectVO(selectedProjectToSearch);
							for (j in as3Project.classpaths) {
								if (as3Project.sourceFolder.fileBridge.nativePath != j.fileBridge.nativePath && j.fileBridge.nativePath.indexOf('{locale}') == -1) {
									tmpArr.push(j.fileBridge.nativePath);
								}
							}
						}
					}
					break;
				}
		}

		return tmpArr;
	}

	private function onWorkerValueIncoming(event:GeneralEvent):Void {
		switch (Reflect.field(event.value, 'event')) {
			case WorkerEvent.TOTAL_FILE_COUNT:
				pbFiles.setProgress(0, Reflect.field(event.value, 'value'));
			case WorkerEvent.FILE_PROCESSED_COUNT:
				pbFiles.setProgress(Reflect.field(event.value, 'value'), pbFiles.maximum);
			case WorkerEvent.FILTERED_FILE_COLLECTION:
				var tmpObj:Dynamic = Reflect.field(event.value, 'value');
				generateSearchTree(tmpObj);
			case WorkerEvent.TOTAL_FOUND_COUNT:
				var tmpArr:Array<Dynamic> = Reflect.field(event.value, 'value').split('::');
				foundCountsDict.set(tmpArr[0], tmpArr[1]);
			case WorkerEvent.PROCESS_ENDS:
				filesFoundInCount = AS3.int(Reflect.field(event.value, 'value'));
				worker.removeEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming);
				updateLabel();
				onReplaceRequest();
		}
	}

	private function updateLabel():Void {
		txtFoundMessage.includeInLayout = txtFoundMessage.visible = true;

		var projectCount:Int;
		for (i in foundCountsDict.keys()) {
			currentCount += AS3.int(foundCountsDict.get(i));
			projectCount++;
		}

		txtFoundMessage.text = 'Found ' + currentCount + ' matches across ' + projectCount + ' project(s).';
		pbFiles.includeInLayout = pbFiles.visible = false;
	}

	private function onReplaceRequest():Void {
		if (isShowReplaceWhenDone && currentCount != 0) {
			SearchPlugin.IS_REPLACE_APPLIED = true;

			var replacePopup:ReplaceProjectSearchPopup = AS3.as(PopUpManager.createPopUp(AS3.as(FlexGlobals.topLevelApplication, DisplayObject), ReplaceProjectSearchPopup, true), ReplaceProjectSearchPopup);
			replacePopup.replaceValue = valueToSearch;
			replacePopup.matchCount = currentCount;
			replacePopup.filesCount = filesFoundInCount;
			replacePopup.isMatchCase = isMatchCase;
			replacePopup.isRegexp = isRegexp;
			replacePopup.isEscapeChars = isEscapeChars;
			replacePopup.addEventListener(CloseEvent.CLOSE, onReplacePopupClosed, false, 0, true);

			PopUpManager.centerPopUp(replacePopup);
			replacePopup.y = 91;
		}
	}

	private function onReplacePopupClosed(event:CloseEvent):Void {
		event.target.removeEventListener(CloseEvent.CLOSE, onReplacePopupClosed);
	}

	private function generateSearchTree(value:Dynamic):Void {
		// terminate if project with no matches
		if (Reflect.field(value, 'children').length == 0) {
			foundCountsDict.remove(Reflect.field(Reflect.field(value, 'file'), 'nativePath'));
			return;
		}

		if (!AS3.as(tree.dataProvider, Bool) || ArrayCollection(tree.dataProvider).length == 0) {
			tree.dataProvider = value;
			// lets expand this for the first time only
			tree.callLater(function():Void {
						tree.expandItem(value, true);
					});
		} else {
			ArrayCollection(tree.dataProvider).addItem(value);
		}
	}

	private function getTreeTooltip(item:Dynamic):String {
		if (!AS3.as(Reflect.field(item, 'isRoot'), Bool)) {
			return null;
		}
		return AS3.string(Reflect.field(Reflect.field(item, 'file'), 'nativePath'));
	}

	private function onTreeItemClicked(event:MouseEvent):Void {
		if (!AS3.as(tree.selectedItem, Bool)) {
			return;
		}

		var tmpSelectedItem:Dynamic = tree.selectedItem;
		var tmpFL:FileLocation = new FileLocation((AS3.as(Reflect.field(tmpSelectedItem, 'isShowAsLineNumber'), Bool)) ? AS3.string(Reflect.field(tmpSelectedItem, 'fileReference')) : AS3.string(Reflect.field(Reflect.field(tmpSelectedItem, 'file'), 'nativePath')));
		if (AS3.as(tmpFL.fileBridge.isDirectory, Bool)) {
			return;
		}

		var openEvent:OpenFileEvent = new OpenFileEvent(OpenFileEvent.JUMP_TO_SEARCH_LINE, cast [tmpFL], (AS3.as(Reflect.field(tmpSelectedItem, 'isShowAsLineNumber'), Bool)) ? AS3.int(Reflect.field(Reflect.field(Reflect.field(tmpSelectedItem, 'lineNumbersWithRange'), Std.string(0)), 'startLineIndex')) : -1);
		GlobalEventDispatcher.getInstance().dispatchEvent(openEvent);

		// this needs some timeout to get the tab open first
		var timeoutValue:Int = as3hx.Compat.setTimeout(function():Void {
					var searchString:String = (isEscapeChars) ? TextUtil.escapeRegex(valueToSearch) : valueToSearch;
					var flags:String = 'g';
					if (!isMatchCase) {
						flags += 'i';
					}
					var searchRegExp:as3hx.Compat.Regex = new as3hx.Compat.Regex(searchString, flags);

					GlobalEventDispatcher.getInstance().dispatchEvent(
							new GeneralEvent(FindReplacePlugin.EVENT_FIND_SHOW_ALL, {
								'search': searchRegExp,
								'range': (AS3.as(Reflect.field(tmpSelectedItem, 'isShowAsLineNumber'), Bool)) ? Reflect.field(Reflect.field(tmpSelectedItem, 'lineNumbersWithRange'), Std.string(0)) : null
							})
				);
					as3hx.Compat.clearTimeout(timeoutValue);
				}, 300);
	}

	private function getCountingLabel(item:Dynamic):String {
		if (AS3.as(Reflect.field(item, 'isRoot'), Bool)) {
			return Reflect.field(item, 'name') + '     (' + Reflect.field(Reflect.field(item, 'file'), 'nativePath') + ')';
		}
		if (AS3.as(Reflect.field(item, 'isShowAsLineNumber'), Bool)) {
			return Std.string(Reflect.field(item, 'lineText'));
		} else if (AS3.as(Reflect.field(item, 'file'), Bool) && (Reflect.field(item, 'searchCount') != 0)) {
			return Reflect.field(item, 'name') + ' (' + Reflect.field(item, 'searchCount') + ' matches)';
		}
		return Std.string(Reflect.field(item, 'name'));
	}

	private function handleProjectsChange(event:CollectionEvent):Void {
		switch (event.kind) {
			case 'remove':
				var project:AS3ProjectVO = AS3.as(Reflect.getProperty(event.items, Std.string(0)), AS3ProjectVO);
				for (i in as3hx.Compat.each(tree.dataProvider)) {
					if (Reflect.field(Reflect.field(i, 'file'), 'nativePath') == project.folderLocation.fileBridge.nativePath) {
						ArrayCollection(tree.dataProvider).removeItem(i);
						foundCountsDict.remove(Reflect.field(Reflect.field(i, 'file'), 'nativePath'));
						updateLabel();
						i = null;
						break;
					}
				}
		}
	}

	private function onTabRemoved(event:FlexEvent):Void {
		worker.removeEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming);
		model.projects.removeEventListener(CollectionEvent.COLLECTION_CHANGE, handleProjectsChange);

		// to-do - need tabView to dispatch this event against each closing tab
		// some components already dispatching this event manually while closing to
		// owner classes - need to carefully remove them so no duplicate event dispatch occurs
		dispatchEvent(new TabEvent(TabEvent.EVENT_TAB_CLOSE, null));
	}

	private function searchTreeIconFunction(item:Dynamic):Class<Dynamic> {
		var iconClass:Class<Dynamic>;

		if (AS3.as(Reflect.field(item, 'file'), Bool) && (Reflect.field(item, 'searchCount') != 0)) {
			iconClass = iconFile;
		} else if (!AS3.as(Reflect.field(item, 'isShowAsLineNumber'), Bool)) {
			iconClass = (AS3.as(tree.isItemOpen(item), Bool)) ? iconFolderOpen : iconFolderClose;
		}

		return iconClass;
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	/**
	 * @private
	 **/
	public function ___SearchInProjectView_Canvas1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes();
	}

	/**
	 * @private
	 **/
	public function ___SearchInProjectView_Canvas1_remove(event:mx.events.FlexEvent):Void {
		onTabRemoved(event);
	}

	private function _SearchInProjectView_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'bottom';
		temp.mxmlContent = [_SearchInProjectView_VGroup2_c(), _SearchInProjectView_Button1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchInProjectView_VGroup2_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.gap = 4;
		temp.mxmlContent = [_SearchInProjectView_Label1_i(), _SearchInProjectView_Label2_i(), _SearchInProjectView_ProgressBar1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchInProjectView_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.setStyle('fontWeight', 'bold');
		temp.id = '_SearchInProjectView_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SearchInProjectView_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SearchInProjectView_Label1', _SearchInProjectView_Label1);
		return temp;
	}

	private function _SearchInProjectView_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.includeInLayout = false;
		temp.visible = false;
		temp.setStyle('verticalAlign', 'middle');
		temp.id = 'txtFoundMessage';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtFoundMessage = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtFoundMessage', txtFoundMessage);
		return temp;
	}

	private function _SearchInProjectView_ProgressBar1_i():mx.controls.ProgressBar {
		var temp:mx.controls.ProgressBar = new mx.controls.ProgressBar();
		temp.mode = 'manual';
		temp.percentWidth = 100.0;
		temp.labelPlacement = 'right';
		temp.setStyle('labelWidth', 0);
		temp.setStyle('barSkin', elements.skins.IDEProgressBarSkin);
		temp.id = 'pbFiles';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		pbFiles = temp;
		mx.binding.BindingManager.executeBindings(this, 'pbFiles', pbFiles);
		return temp;
	}

	private function _SearchInProjectView_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Replace';
		temp.styleName = 'lightButton';
		temp.addEventListener('click', __btnReplae_click);
		temp.id = 'btnReplae';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnReplae = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnReplae', btnReplae);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnReplae_click(event:flash.events.MouseEvent):Void {
		onReplaceRequest();
	}

	private function _SearchInProjectView_Tree1_i():mx.controls.Tree {
		var temp:mx.controls.Tree = new mx.controls.Tree();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.rowHeight = 18;
		temp.doubleClickEnabled = true;
		temp.showDataTips = true;
		temp.iconFunction = searchTreeIconFunction;
		temp.itemRenderer = _SearchInProjectView_ClassFactory1_c();
		temp.dataTipFunction = getTreeTooltip;
		temp.setStyle('color', 15658734);
		temp.setStyle('contentBackgroundColor', 0);
		temp.setStyle('rollOverColor', 3750201);
		temp.setStyle('selectionColor', 12674488);
		temp.setStyle('alternatingItemColors', [4473924, 5065804]);
		temp.setStyle('verticalScrollBarStyleName', 'blackScroll');
		temp.setStyle('borderVisible', false);
		temp.setStyle('useRollOver', true);
		temp.addEventListener('doubleClick', __tree_doubleClick);
		temp.id = 'tree';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		tree = temp;
		mx.binding.BindingManager.executeBindings(this, 'tree', tree);
		return temp;
	}

	private function _SearchInProjectView_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = actionScripts.ui.renderers.SearchInProjectTreeItemRenderer;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __tree_doubleClick(event:flash.events.MouseEvent):Void {
		onTreeItemClicked(event);
	}

	//  binding mgmt
	private function _SearchInProjectView_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = ('Searching for pattern /' + valueToSearch + '/');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_SearchInProjectView_Label1.text');

		result[1] = new mx.binding.Binding(this,
				function():Float {
					return (pbFiles.height);
				},
				null,
				'txtFoundMessage.height');

		result[2] = new mx.binding.Binding(this,
				function():Bool {
					return (isShowReplaceWhenDone && AS3.as(txtFoundMessage.visible, Bool));
				},
				null,
				'btnReplae.includeInLayout');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (isShowReplaceWhenDone && AS3.as(txtFoundMessage.visible, Bool));
				},
				null,
				'btnReplae.visible');

		result[4] = new mx.binding.Binding(this,
				function():Bool {
					return (!SearchPlugin.IS_REPLACE_APPLIED);
				},
				null,
				'btnReplae.enabled');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(SearchInProjectView)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  initialize style defs for SearchInProjectView

	@:ns('mx_internal') private var _SearchInProjectView_StylesInit_done:Bool = false;

	@:ns('mx_internal') private function _SearchInProjectView_StylesInit():Void {
		//  only add our style defs to the style manager once
		if ( //  mx_internal::_SearchInProjectView_StylesInit_done) {
			return;
		} else {
			// mx_internal::_SearchInProjectView_StylesInit_done = true;
		}

		var style:CSSStyleDeclaration;
		var effects:Array<Dynamic>;

		var conditions:Array<Dynamic>;
		var condition:CSSCondition;
		var selector:CSSSelector;
		selector = null;
		conditions = null;
		conditions = [];
		condition = new CSSCondition('class', 'blackScroll');
		conditions.push(condition);
		selector = new CSSSelector('', conditions, selector);
		// .blackScroll
		style = styleManager.getStyleDeclaration('.blackScroll');
		if (style == null) {
			style = new CSSStyleDeclaration(selector, styleManager);
		}

		if (style.factory == null) {
			style.factory = function():Void {
						this.thumbSkin = elements.skins.VScrollBarThumbSkin;
						this.thumbColorRight = 0x585858;
						this.thumbLeftSideLine = 0x3a3a3a;
						this.trackSkin = elements.skins.VScrollBarTrackSkin;
						this.downArrowSkin = null;
						this.upArrowSkin = null;
						this.thumbHline1 = 0x444444;
						this.thumbColorLeft = 0x616161;
						this.thumbHline2 = 0x777777;
					};
		}

	}

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def