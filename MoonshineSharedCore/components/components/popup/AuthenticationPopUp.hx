/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      AuthenticationPopUp
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/AuthenticationPopUp.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package components.popup;

import spark.effects.Move;
import spark.effects.Resize;
import components.skins.ResizableTitleWindowSkin;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.popup.Authentication;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;

@:meta(Event(name = 'SUCCESS', type = 'flash.events.Event'))
@:meta(Event(name = 'CANCEL', type = 'flash.events.Event'))
//  begin class def
class AuthenticationPopUp extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow {

	//  instance variables

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.title = 'Select a Server';
		this.width = 400;
		this.height = 160;
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_AuthenticationPopUp_Array1_c);

		// events

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 34 - 73

	private var effectMove:Move;
	private var effectResize:Resize;

	override private function closeByCrossSign(event:Event):Void {
		dispatchEvent(new Event(Authentication.CANCEL));
		super.closeByCrossSign(event);
	}

	private function onUserLoginSuccess(event:Event):Void {
		dispatchEvent(new Event(Authentication.SUCCESS));
	}

	private function onLoginScreenLoads(event:Event):Void {
		title = 'Login to Proceed';
		effectMove = new Move();
		effectResize = new Resize();

		effectMove.yTo = (this.stage.stageHeight - (this.height + 20)) / 2;
		effectResize.heightTo = this.height + 20;

		effectResize.play([this]);
		effectMove.play([this]);
	}

	private function onAuthTestFault(event:Event):Void {
		// optional
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _AuthenticationPopUp_Array1_c():Array<Dynamic> {
		var temp:Array<Authentication> = [_AuthenticationPopUp_Authentication1_c()];
		return cast temp;
	}

	private function _AuthenticationPopUp_Authentication1_c():components.popup.Authentication {
		var temp:components.popup.Authentication = new components.popup.Authentication();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.isCancelShow = false;
		temp.addEventListener('SUCCESS', ___AuthenticationPopUp_Authentication1_SUCCESS);
		temp.addEventListener('CANCEL', ___AuthenticationPopUp_Authentication1_CANCEL);
		temp.addEventListener('LOADING_LOGIN', ___AuthenticationPopUp_Authentication1_LOADING_LOGIN);
		temp.addEventListener('AUTH_TEST_FAULT', ___AuthenticationPopUp_Authentication1_AUTH_TEST_FAULT);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___AuthenticationPopUp_Authentication1_SUCCESS(event:flash.events.Event):Void {
		onUserLoginSuccess(event);
	}

	/**
	 * @private
	 **/
	public function ___AuthenticationPopUp_Authentication1_CANCEL(event:flash.events.Event):Void {
		closeByCrossSign(null);
	}

	/**
	 * @private
	 **/
	public function ___AuthenticationPopUp_Authentication1_LOADING_LOGIN(event:flash.events.Event):Void {
		onLoginScreenLoads(event);
	}

	/**
	 * @private
	 **/
	public function ___AuthenticationPopUp_Authentication1_AUTH_TEST_FAULT(event:flash.events.Event):Void {
		onAuthTestFault(event);
	}

}

//  end package def