/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      DefineWorkspacePopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/DefineWorkspacePopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package components.popup;

import mx.events.FlexEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.ProjectEvent;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.utils.OSXBookmarkerNotifiers;
import actionScripts.valueObjects.ConstantsCoreVO;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.HGroup;
import spark.components.Image;
import spark.components.Label;
import spark.components.TextArea;
import spark.components.VGroup;

//  begin class def
class DefineWorkspacePopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _DefineWorkspacePopup_Button2:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbDNS:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtPath:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtTextMess:spark.components.TextArea;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _DefineWorkspacePopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_DefineWorkspacePopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(DefineWorkspacePopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.title = 'Workspace';
		this.width = 900;
		this.height = 540;
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_DefineWorkspacePopup_Array1_c);

		// events
		this.addEventListener('initialize', ___DefineWorkspacePopup_ResizableTitleWindow1_initialize);
		this.addEventListener('creationComplete', ___DefineWorkspacePopup_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 30 - 101

	@:meta(Bindable())private var isPathDefined:Bool = false;
	@:meta(Bindable())private var bigMessage:String = 'Generally in Mac OS system, to read and write files from user\'s system, ' + ConstantsCoreVO.MOONSHINE_IDE_LABEL + ' needs user\'s approval to specific folder access to do an uninterrupted file system access to project files. You can locate or set any folder in your system as Moonshine Workspace, and therefore it\'s encouraged that you keep all your Moonshine project folders/files inside that workspace area to avoid any unexpected fail behavior that might caused by file system access protection in Mac OS.\n\nInside a defined Moonshine Workspace, you can keep all your project files in whichever way you wants. You can keep the projects in folder or it\'s sub-folders. An example given as below:';

	private var model:IDEModel = IDEModel.getInstance();

	/**
	 * On close window button
	 */
	override private function closeByCrossSign(event:Event):Void {
		GlobalEventDispatcher.getInstance().dispatchEvent(new ProjectEvent(ProjectEvent.WORKSPACE_UPDATED));
		super.closeByCrossSign(event);
	}

	private function onDefineRequest(event:MouseEvent):Void {
		model.fileCore.browseForDirectory('Define Workspace', onFolderSelected, onCancel);
	}

	private function onFolderSelected(dir:Dynamic):Void {
		txtPath.text = ((Std.is(dir, FileLocation))) ? (AS3.as(dir, FileLocation)).fileBridge.nativePath : Reflect.field(dir, 'nativePath');
		isPathDefined = true;
	}

	private function onCancel():Void {}

	private function onCreationCompletes(event:FlexEvent):Void {
		cbDNS.selected = OSXBookmarkerNotifiers.isWorkspaceAcknowledged;
		if (OSXBookmarkerNotifiers.workspaceLocation != null) {
			txtPath.text = OSXBookmarkerNotifiers.workspaceLocation.fileBridge.nativePath;
			isPathDefined = true;
		}
	}

	private function onWorkspaceSave(event:MouseEvent):Void {
		OSXBookmarkerNotifiers.workspaceLocation = new FileLocation(Std.string(txtPath.text));
		OSXBookmarkerNotifiers.isWorkspaceAcknowledged = AS3.as(cbDNS.selected, Bool);
		super.closeThis();
	}

	private function onDNSChanged(event:Event):Void {
		OSXBookmarkerNotifiers.isWorkspaceAcknowledged = AS3.as(cbDNS.selected, Bool);
	}

	private function onInitialize(event:FlexEvent):Void {
		txtTextMess.setStyle('borderVisible', false);
		txtTextMess.callLater(function():Void {
					txtTextMess.height = txtTextMess.scroller.viewport.contentHeight + 2;
				});
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _DefineWorkspacePopup_Array1_c():Array<Dynamic> {
		var temp:Array<HGroup> = [_DefineWorkspacePopup_HGroup1_c()];
		return cast temp;
	}

	private function _DefineWorkspacePopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 10;
		temp.paddingTop = 10;
		temp.paddingRight = 13;
		temp.mxmlContent = [_DefineWorkspacePopup_VGroup1_c(), _DefineWorkspacePopup_VGroup4_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 50.0;
		temp.percentHeight = 100.0;
		temp.paddingTop = 34;
		temp.paddingLeft = 20;
		temp.paddingRight = 20;
		temp.paddingBottom = 24;
		temp.mxmlContent = [_DefineWorkspacePopup_Label1_c(), _DefineWorkspacePopup_Label2_c(), _DefineWorkspacePopup_VGroup2_c(), _DefineWorkspacePopup_VGroup3_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Define Workspace';
		temp.styleName = 'bigHeadlineText';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_Label2_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.percentWidth = 100.0;
		temp.text = 'We strongly recommend to define a Workspace before you proceed to work in Moonshine, to easy file system access in Mac OS system.';
		temp.maxDisplayedLines = 3;
		temp.setStyle('paddingLeft', 16);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_VGroup2_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.horizontalAlign = 'center';
		temp.verticalAlign = 'middle';
		temp.gap = 10;
		temp.mxmlContent = [_DefineWorkspacePopup_Label3_i(), _DefineWorkspacePopup_HGroup2_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_Label3_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = '- No Workspace -';
		temp.percentWidth = 100.0;
		temp.maxDisplayedLines = 5;
		temp.styleName = 'uiTextSettingsValue';
		temp.setStyle('textAlign', 'center');
		temp.id = 'txtPath';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtPath = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtPath', txtPath);
		return temp;
	}

	private function _DefineWorkspacePopup_HGroup2_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.autoLayout = true;
		temp.mxmlContent = [_DefineWorkspacePopup_Button1_c(), _DefineWorkspacePopup_Button2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Define A Path';
		temp.styleName = 'lightButton';
		temp.setStyle('color', 0);
		temp.addEventListener('click', ___DefineWorkspacePopup_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___DefineWorkspacePopup_Button1_click(event:flash.events.MouseEvent):Void {
		onDefineRequest(event);
	}

	private function _DefineWorkspacePopup_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Save & Close';
		temp.styleName = 'lightButton';
		temp.setStyle('color', 0);
		temp.addEventListener('click', ___DefineWorkspacePopup_Button2_click);
		temp.id = '_DefineWorkspacePopup_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_DefineWorkspacePopup_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_DefineWorkspacePopup_Button2', _DefineWorkspacePopup_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___DefineWorkspacePopup_Button2_click(event:flash.events.MouseEvent):Void {
		onWorkspaceSave(event);
	}

	private function _DefineWorkspacePopup_VGroup3_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.autoLayout = true;
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_DefineWorkspacePopup_CheckBox1_i(), _DefineWorkspacePopup_Label4_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Do not show this window again';
		temp.addEventListener('change', __cbDNS_change);
		temp.id = 'cbDNS';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbDNS = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbDNS', cbDNS);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __cbDNS_change(event:flash.events.Event):Void {
		onDNSChanged(event);
	}

	private function _DefineWorkspacePopup_Label4_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'You can also open this window by going into File menu anytime.';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_VGroup4_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 50.0;
		temp.percentHeight = 100.0;
		temp.paddingTop = 34;
		temp.paddingLeft = 20;
		temp.paddingRight = 20;
		temp.paddingBottom = 24;
		temp.mxmlContent = [_DefineWorkspacePopup_Label5_c(), _DefineWorkspacePopup_TextArea1_i(), _DefineWorkspacePopup_Image1_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_Label5_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'How Does it Works?';
		temp.styleName = 'bigHeadlineText';
		temp.setStyle('paddingBottom', 16);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _DefineWorkspacePopup_TextArea1_i():spark.components.TextArea {
		var temp:spark.components.TextArea = new spark.components.TextArea();
		temp.percentWidth = 100.0;
		temp.focusEnabled = false;
		temp.editable = false;
		temp.setStyle('paddingLeft', 16);
		temp.setStyle('paddingTop', 0);
		temp.id = 'txtTextMess';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtTextMess = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtTextMess', txtTextMess);
		return temp;
	}

	private function _DefineWorkspacePopup_Image1_c():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = _embed_mxml__elements_images_WorkspaceExplanation_png_525316657;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___DefineWorkspacePopup_ResizableTitleWindow1_initialize(event:mx.events.FlexEvent):Void {
		onInitialize(event);
	}

	/**
	 * @private
	 **/
	public function ___DefineWorkspacePopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes(event);
	}

	//  binding mgmt
	private function _DefineWorkspacePopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Bool {
					return (isPathDefined);
				},
				null,
				'_DefineWorkspacePopup_Button2.includeInLayout');

		result[1] = new mx.binding.Binding(this,
				function():Bool {
					return (isPathDefined);
				},
				null,
				'_DefineWorkspacePopup_Button2.visible');

		result[2] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (bigMessage);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'txtTextMess.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(DefineWorkspacePopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	@:meta(Embed(source = '/elements/images/WorkspaceExplanation.png'))
	private var _embed_mxml__elements_images_WorkspaceExplanation_png_525316657:Class<Dynamic>;

	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def