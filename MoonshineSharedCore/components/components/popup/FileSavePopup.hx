/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      FileSavePopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/FileSavePopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package components.popup;

import mx.collections.ArrayCollection;
import mx.controls.Alert;
import mx.controls.Image;
import mx.core.IVisualElementContainer;
import mx.events.ListEvent;
import actionScripts.controllers.DataAgent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.ProjectEvent;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.console.ConsoleOutputEvent;
import actionScripts.ui.editor.BasicTextEditor;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.FileWrapper;
import actionScripts.valueObjects.URLDescriptorVO;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.renderers.FTETreeItemRenderer;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Tree;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.events.FlexEvent;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.VGroup;

//  begin class def
class FileSavePopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btn_save:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var grpFileName:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lbl_ext:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var tree:mx.controls.Tree;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txt_fileName:actionScripts.plugin.findreplace.view.PromptTextInput;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _FileSavePopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_FileSavePopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(FileSavePopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 500;
		this.height = 500;
		this.title = 'Save/As';
		this.controlBarContent = [_FileSavePopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_FileSavePopup_Array2_c);

		// events
		this.addEventListener('creationComplete', ___FileSavePopup_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 32 - 207

	public var file:FileLocation;
	public var extension:String = '';
	private var loader:DataAgent;

	@:meta(Bindable())
	private var projectFolders:ArrayCollection;
	private var path:String;
	private var model:IDEModel = IDEModel.getInstance();
	private var editor:BasicTextEditor;
	private var lastSelectedNode:FileWrapper;
	private var loaderIcon:Image;

	override private function closeByCrossSign(event:Event):Void {
		loader = null;
		super.closeByCrossSign(event);
	}

	private function init():Void {
		editor = AS3.as(model.activeEditor, BasicTextEditor);

		if (editor.currentFile != null) {
			extension = Std.string(editor.currentFile.fileBridge.name);
			txt_fileName.text = 'CopyOf' + extension.split('.')[0];
		} else {
			extension = editor.defaultLabel;
		}
		var extArr:Array<String> = extension.split('.');
		lbl_ext.text = '.' + extArr[extArr.length - 1];

		var pdirs:Array<Dynamic> = [];
		projectFolders = new ArrayCollection();
		for (i in 0...model.selectedprojectFolders.length) {
			projectFolders.addItem(parseChildrens(Reflect.getProperty(model.selectedprojectFolders, Std.string(i))));
		}
	}

	/**
	 * Remove loader icon from its parent
	 */
	private function removeLoaderIcon():Void {
		IVisualElementContainer(loaderIcon.owner).removeElement(loaderIcon);
		loaderIcon = null;
	}

	private function parseChildrens(value:Dynamic):FileWrapper {
		if (!AS3.as(value, Bool)) {
			return null;
		}

		var tmpLocation:FileLocation = new FileLocation(AS3.string(Reflect.field(Reflect.field(Reflect.field(value, 'file'), 'fileBridge'), 'nativePath')));
		tmpLocation.fileBridge.isDirectory = ((Std.string(Reflect.field(Reflect.field(Reflect.field(value, 'file'), 'fileBridge'), 'isDirectory')) == 'true')) ? true : false;
		tmpLocation.fileBridge.isHidden = ((Std.string(Reflect.field(Reflect.field(Reflect.field(value, 'file'), 'fileBridge'), 'isHidden')) == 'true')) ? true : false;
		tmpLocation.fileBridge.name = Std.string(Reflect.field(Reflect.field(Reflect.field(value, 'file'), 'fileBridge'), 'name'));
		tmpLocation.fileBridge.extension = Std.string(Reflect.field(Reflect.field(Reflect.field(value, 'file'), 'fileBridge'), 'extension'));
		tmpLocation.fileBridge.exists = true;

		var tmpFW:FileWrapper = new FileWrapper(tmpLocation, false, Reflect.field(value, 'projectReference'));
		tmpFW.isRoot = AS3.as(Reflect.field(value, 'isRoot'), Bool);
		tmpFW.originalReference = value;// we'll need this to update children in saveFileHandler()

		if ((Std.is(Reflect.field(value, 'children'), Array)) && (AS3.asArray(Reflect.field(value, 'children'))).length > 0) {
			var tmpSubChildren:Array<Dynamic> = [];
			for (c in as3hx.Compat.each(Reflect.field(value, 'children'))) {
				if (AS3.as(Reflect.field(Reflect.field(Reflect.field(c, 'file'), 'fileBridge'), 'isDirectory'), Bool)) {
					tmpSubChildren.push(parseChildrens(c));
				}
			}

			tmpFW.children = tmpSubChildren;
		}

		if (tmpFW.children.length == 0 && !AS3.as(tmpFW.file.fileBridge.isDirectory, Bool)) {
			tmpFW.children = null;
		}
		return tmpFW;
	}

	//set selected item name in textinput
	private function fileClickedInTree(event:ListEvent):Void {
		var item:Dynamic = tree.selectedItem;
		if (AS3.as(tree.dataDescriptor.isBranch(item), Bool)) {
			tree.expandItem(item, !tree.isItemOpen(item), true);
		}

		// we don't let select project name node as save location
		if (AS3.as(Reflect.field(item, 'isRoot'), Bool)) {
			tree.selectedIndex = -1;
		}
	}

	private function saveFileHandler(event:MouseEvent):Void {
		// TODO Auto-generated method stub
		if (!AS3.as(tree.selectedItem, Bool)) {
			Alert.show('Please select folder location to save!');
			return;
		} else if (txt_fileName.text == '') {
			txt_fileName.errorString = 'File name is required ';
			return;
		}

		loaderIcon = new Image();
		loaderIcon.source = new ConstantsCoreVO.loaderIcon();
		loaderIcon.width = loaderIcon.height = 10;
		loaderIcon.y = (txt_fileName.height - loaderIcon.height) / 2;
		loaderIcon.right = 6;
		grpFileName.addElement(loaderIcon);
		btn_save.enabled = false;

		file = new FileLocation();
		file.fileBridge.name = txt_fileName.text + lbl_ext.text;
		file.fileBridge.nativePath = tree.selectedItem.file.fileBridge.nativePath;
		lastSelectedNode = AS3.as(tree.selectedItem, FileWrapper);

		GlobalEventDispatcher.getInstance().dispatchEvent(new ConsoleOutputEvent(ConsoleOutputEvent.CONSOLE_OUTPUT, file.fileBridge.name + ': Saving in process...'));
		loader = new DataAgent(URLDescriptorVO.FILE_NEW, onSaveSuccess, onSaveFault, {
					'path': file.fileBridge.nativePath,
					'name': file.fileBridge.name,
					'type': ((AS3.as(file.fileBridge.isDirectory, Bool)) ? 'folder' : 'file'),
					'text': editor.text
				});
	}

	private function onSaveSuccess(value:Dynamic, message:String = null):Void {
		removeLoaderIcon();

		var jsonObj:Dynamic = haxe.Json.parse(Std.string(value));
		if (!AS3.as(jsonObj, Bool) || Reflect.field(jsonObj, 'nativePath') == '') {
			return;
		}

		// create new object to update in tree view
		var tmpLocation:FileLocation = new FileLocation(AS3.string(Reflect.field(jsonObj, 'nativePath')));
		tmpLocation.fileBridge.isDirectory = ((Std.string(Reflect.field(jsonObj, 'isDirectory')) == 'true')) ? true : false;
		tmpLocation.fileBridge.isHidden = ((Std.string(Reflect.field(jsonObj, 'isHidden')) == 'true')) ? true : false;
		tmpLocation.fileBridge.name = Std.string(Reflect.field(jsonObj, 'name'));
		tmpLocation.fileBridge.extension = Std.string(Reflect.field(jsonObj, 'extension'));
		tmpLocation.fileBridge.exists = true;

		var tmpFW:FileWrapper = new FileWrapper(tmpLocation, false, FileWrapper(lastSelectedNode.originalReference).projectReference);
		tmpFW.children = null;
		FileWrapper(lastSelectedNode.originalReference).children.push(tmpFW);
		GlobalEventDispatcher.getInstance().dispatchEvent(new ConsoleOutputEvent(ConsoleOutputEvent.CONSOLE_OUTPUT, file.fileBridge.name + ': Saved successfully.'));
		GlobalEventDispatcher.getInstance().dispatchEvent(new ProjectEvent(ProjectEvent.PROJECT_FILES_UPDATES, tmpFW));
		editor.onFileSaveSuccess(tmpLocation);

		loader = null;
		super.closeThis();
	}

	private function onSaveFault(message:String):Void {
		removeLoaderIcon();
		GlobalEventDispatcher.getInstance().dispatchEvent(new ConsoleOutputEvent(ConsoleOutputEvent.CONSOLE_OUTPUT, file.fileBridge.name + ': Save error!'));
		btn_save.enabled = true;
		loader = null;
		super.closeThis();
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _FileSavePopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Save';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btn_save_click);
		temp.id = 'btn_save';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btn_save = temp;
		mx.binding.BindingManager.executeBindings(this, 'btn_save', btn_save);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btn_save_click(event:flash.events.MouseEvent):Void {
		saveFileHandler(event);
	}

	private function _FileSavePopup_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_FileSavePopup_VGroup1_c()];
		return cast temp;
	}

	private function _FileSavePopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_FileSavePopup_Tree1_i(), _FileSavePopup_HGroup1_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _FileSavePopup_Tree1_i():mx.controls.Tree {
		var temp:mx.controls.Tree = new mx.controls.Tree();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.rowHeight = 18;
		temp.doubleClickEnabled = true;
		temp.labelField = 'name';
		temp.itemRenderer = _FileSavePopup_ClassFactory1_c();
		temp.setStyle('color', 15658734);
		temp.setStyle('contentBackgroundColor', 0);
		temp.setStyle('rollOverColor', 3750201);
		temp.setStyle('selectionColor', 12674488);
		temp.setStyle('alternatingItemColors', [4473924, 5065804]);
		temp.setStyle('verticalScrollBarStyleName', 'black');
		temp.setStyle('borderVisible', false);
		temp.setStyle('useRollOver', true);
		temp.addEventListener('itemClick', __tree_itemClick);
		temp.id = 'tree';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		tree = temp;
		mx.binding.BindingManager.executeBindings(this, 'tree', tree);
		return temp;
	}

	private function _FileSavePopup_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = actionScripts.ui.renderers.FTETreeItemRenderer;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __tree_itemClick(event:mx.events.ListEvent):Void {
		fileClickedInTree(event);
	}

	private function _FileSavePopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_FileSavePopup_Group1_i(), _FileSavePopup_Label1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _FileSavePopup_Group1_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_FileSavePopup_PromptTextInput1_i()];
		temp.id = 'grpFileName';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		grpFileName = temp;
		mx.binding.BindingManager.executeBindings(this, 'grpFileName', grpFileName);
		return temp;
	}

	private function _FileSavePopup_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'File Name';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.restrict = '0-9a-zA-z_^\\^\\\\';
		temp.maxChars = 129;
		temp.id = 'txt_fileName';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txt_fileName = temp;
		mx.binding.BindingManager.executeBindings(this, 'txt_fileName', txt_fileName);
		return temp;
	}

	private function _FileSavePopup_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.percentHeight = 100.0;
		temp.setStyle('verticalAlign', 'middle');
		temp.id = 'lbl_ext';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lbl_ext = temp;
		mx.binding.BindingManager.executeBindings(this, 'lbl_ext', lbl_ext);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___FileSavePopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		init();
	}

	//  binding mgmt
	private function _FileSavePopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Dynamic {
					return (projectFolders);
				},
				null,
				'tree.dataProvider');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(FileSavePopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def