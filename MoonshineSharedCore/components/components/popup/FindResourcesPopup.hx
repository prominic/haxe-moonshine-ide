/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      FindResourcesPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/FindResourcesPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package components.popup;

import actionScripts.utils.UtilsCore;
import mx.collections.ArrayCollection;
import mx.controls.Alert;
import mx.events.FlexEvent;
import mx.managers.IFocusManagerComponent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.OpenFileEvent;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.findResources.FindResourcesPlugin;
import actionScripts.valueObjects.ResourceVO;
import elements.skins.DarkButtonSkin;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.FilterCalloutButtonSkin;
import components.skins.ResizableTitleWindowSkin;
import components.views.other.FilesExtensionFilterView;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.KeyboardEvent;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;

import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexDisplayObject;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.CalloutButton;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.List;
import spark.components.VGroup;
import spark.events.TextOperationEvent;
import spark.layouts.VerticalLayout;

//  begin class def
class FindResourcesPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var fileNameTextInput:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var filesExtensionFilterView:components.views.other.FilesExtensionFilterView;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lstResources:spark.components.List;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var openBtn:spark.components.Button;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _FindResourcesPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_FindResourcesPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(FindResourcesPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 600;
		this.height = 500;
		this.minWidth = 300;
		this.minHeight = 300;
		this.title = 'Find Resources';
		this.layout = _FindResourcesPopup_VerticalLayout1_c();
		this.controlBarContent = [_FindResourcesPopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_FindResourcesPopup_Array2_c);

		// events
		this.addEventListener('keyDown', ___FindResourcesPopup_ResizableTitleWindow1_keyDown);
		this.addEventListener('creationComplete', ___FindResourcesPopup_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 40 - 165

	@:meta(Bindable())
	private var resources:ArrayCollection = new ArrayCollection();

	private var model:IDEModel = IDEModel.getInstance();

	private function onFindResourcesPopupCreationComplete(event:FlexEvent):Void {
		UtilsCore.parseFilesList(resources);

		//Workaround for unresolved issue https://issues.apache.org/jira/browse/FLEX-26797
		openBtn.setStyle('skinClass', DarkButtonSkin);

		resources.filterFunction = resourceFilterFunction;
		resources.refresh();
	}

	private function getResourceName(item:Dynamic):String {
		return Reflect.field(item, 'name') + ' - ' + Reflect.field(item, 'resourcePath');
	}

	private function onListDoubleClicked(event:MouseEvent):Void {
		if (!AS3.as(lstResources.selectedItem, Bool)) {
			Alert.show('Please select an item to open.');
			return;
		}

		var tmpObject:ResourceVO = AS3.as(lstResources.selectedItem, ResourceVO);
		GlobalEventDispatcher.getInstance().dispatchEvent(
				new OpenFileEvent(OpenFileEvent.OPEN_FILE, cast [tmpObject.sourceWrapper.file], -1, cast [tmpObject.sourceWrapper])
		);

		super.closeThis();
	}

	private function onFindResourcesKeyDown(event:KeyboardEvent):Void {
		var isKeyDown:Bool = event.keyCode == AS3.int(Keyboard.DOWN);
		var isKeyUp:Bool = event.keyCode == AS3.int(Keyboard.UP);
		var isKeyTab:Bool = event.keyCode == AS3.int(Keyboard.TAB);
		var focusedComponent:IFocusManagerComponent = lstResources.focusManager.getFocus();

		if (isKeyDown || isKeyUp || (isKeyTab && !event.shiftKey)) {
			if (lstResources != focusedComponent) {
				event.preventDefault();

				lstResources.setFocus();
				var resourceSelectedIndex:Int = (isKeyTab) ? AS3.int(lstResources.selectedIndex) : lstResources.selectedIndex + 1;

				if (isKeyDown || isKeyTab) {
					if (resourceSelectedIndex < resources.length) {
						lstResources.selectedIndex = resourceSelectedIndex;
					}
				} else {
					resourceSelectedIndex = AS3.int(lstResources.selectedIndex - 1);
					if (resourceSelectedIndex > -1) {
						lstResources.selectedIndex = resourceSelectedIndex;
					}
				}
			}
		} else if (event.keyCode == AS3.int(Keyboard.LEFT) || event.keyCode == AS3.int(Keyboard.RIGHT) || (isKeyTab && event.shiftKey)) {
			if (isKeyTab && event.shiftKey) {
				event.preventDefault();
			}

			fileNameTextInput.setFocus();
			if (lstResources == focusedComponent && fileNameTextInput.text != null) {
				var textLenght:Int = fileNameTextInput.text.length;
				fileNameTextInput.selectRange(textLenght, textLenght);
			}
		}
	}

	private function onFileFilterChanged(event:Event):Void {
		resources.refresh();
	}

	private function resourceFilterFunction(item:ResourceVO):Bool {
		var selectedExtension:Array<Dynamic> = filesExtensionFilterView.getSelectedExtensions();
		if (selectedExtension.length == 0 && fileNameTextInput.text == null) {
			return true;
		}

		var itemName:String = item.name.toLowerCase();
		if (selectedExtension.length == 0 && fileNameTextInput.text != null) {
			return itemName.indexOf(fileNameTextInput.text.toLowerCase()) != -1;
		}

		if (selectedExtension.length > 0 && fileNameTextInput.text != null) {
			return AS3.as(selectedExtension.some(function(ext:Dynamic, index:Int, arr:Array<Dynamic>):Bool {
								return Reflect.field(ext, 'label') == item.resourceExtension;
							}), Bool) && itemName.indexOf(fileNameTextInput.text.toLowerCase()) != -1;
		}

		return AS3.as(selectedExtension.some(function(ext:Dynamic, index:Int, arr:Array<Dynamic>):Bool {
							return Reflect.field(ext, 'label') == item.resourceExtension;
						}), Bool);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _FindResourcesPopup_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.horizontalAlign = 'left';
		temp.paddingRight = 12;
		return temp;
	}

	private function _FindResourcesPopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Open';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __openBtn_click);
		temp.id = 'openBtn';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		openBtn = temp;
		mx.binding.BindingManager.executeBindings(this, 'openBtn', openBtn);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __openBtn_click(event:flash.events.MouseEvent):Void {
		onListDoubleClicked(event);
	}

	private function _FindResourcesPopup_Array2_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [_FindResourcesPopup_Label1_c(), _FindResourcesPopup_HGroup1_c(), _FindResourcesPopup_VGroup1_c()];
		return temp;
	}

	private function _FindResourcesPopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Search an select an item to open:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _FindResourcesPopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.horizontalAlign = 'left';
		temp.gap = 5;
		temp.mxmlContent = [_FindResourcesPopup_PromptTextInput1_i(), _FindResourcesPopup_CalloutButton1_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _FindResourcesPopup_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'File Name';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.maxChars = 129;
		temp.addEventListener('change', __fileNameTextInput_change);
		temp.addEventListener('creationComplete', __fileNameTextInput_creationComplete);
		temp.id = 'fileNameTextInput';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		fileNameTextInput = temp;
		mx.binding.BindingManager.executeBindings(this, 'fileNameTextInput', fileNameTextInput);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __fileNameTextInput_change(event:spark.events.TextOperationEvent):Void {
		onFileFilterChanged(event);
	}

	/**
	 * @private
	 **/
	public function __fileNameTextInput_creationComplete(event:mx.events.FlexEvent):Void {
		fileNameTextInput.setFocus();
	}

	private function _FindResourcesPopup_CalloutButton1_c():spark.components.CalloutButton {
		var temp:spark.components.CalloutButton = new spark.components.CalloutButton();
		temp.width = 36;
		temp.height = 20;
		temp.buttonMode = true;
		temp.horizontalPosition = 'end';
		temp.verticalPosition = 'after';
		temp.calloutContent = [_FindResourcesPopup_FilesExtensionFilterView1_i()];
		temp.setStyle('icon', _embed_mxml__elements_images_filter_png_2087047081);
		temp.setStyle('skinClass', components.skins.FilterCalloutButtonSkin);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _FindResourcesPopup_FilesExtensionFilterView1_i():components.views.other.FilesExtensionFilterView {
		var temp:components.views.other.FilesExtensionFilterView = new components.views.other.FilesExtensionFilterView();
		temp.width = 250;
		temp.addEventListener('filterChanged', __filesExtensionFilterView_filterChanged);
		temp.id = 'filesExtensionFilterView';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		filesExtensionFilterView = temp;
		mx.binding.BindingManager.executeBindings(this, 'filesExtensionFilterView', filesExtensionFilterView);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __filesExtensionFilterView_filterChanged(event:flash.events.Event):Void {
		onFileFilterChanged(event);
	}

	private function _FindResourcesPopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.mxmlContent = [_FindResourcesPopup_Label2_c(), _FindResourcesPopup_List1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _FindResourcesPopup_Label2_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Matching items:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _FindResourcesPopup_List1_i():spark.components.List {
		var temp:spark.components.List = new spark.components.List();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.requireSelection = true;
		temp.labelFunction = getResourceName;
		temp.styleName = 'multiLineList';
		temp.doubleClickEnabled = true;
		temp.addEventListener('doubleClick', __lstResources_doubleClick);
		temp.id = 'lstResources';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lstResources = temp;
		mx.binding.BindingManager.executeBindings(this, 'lstResources', lstResources);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __lstResources_doubleClick(event:flash.events.MouseEvent):Void {
		onListDoubleClicked(event);
	}

	/**
	 * @private
	 **/
	public function ___FindResourcesPopup_ResizableTitleWindow1_keyDown(event:flash.events.KeyboardEvent):Void {
		onFindResourcesKeyDown(event);
	}

	/**
	 * @private
	 **/
	public function ___FindResourcesPopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onFindResourcesPopupCreationComplete(event);
	}

	//  binding mgmt
	private function _FindResourcesPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'this.defaultButton', 'openBtn');

		result[1] = new mx.binding.Binding(this,
				function():mx.collections.ArrayCollection {
					return (FindResourcesPlugin.previouslySelectedPatterns);
				},
				null,
				'filesExtensionFilterView.patterns');

		result[2] = new mx.binding.Binding(this,
				function():mx.collections.IList {
					return (resources);
				},
				null,
				'lstResources.dataProvider');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(FindResourcesPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	@:meta(Embed(source = '/elements/images/filter.png'))
	private var _embed_mxml__elements_images_filter_png_2087047081:Class<Dynamic>;

	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def