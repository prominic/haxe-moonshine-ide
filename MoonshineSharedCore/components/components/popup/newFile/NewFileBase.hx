/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup.newFile
 *  Class:      NewFileBase
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/newFile/NewFileBase.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package components.popup.newFile;

import mx.collections.ArrayCollection;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.managers.PopUpManager;
import spark.events.DropDownEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.NewFileEvent;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEModel;
import actionScripts.ui.menu.MenuPlugin;
import actionScripts.valueObjects.FileWrapper;
import actionScripts.valueObjects.ProjectVO;
import components.renderers.DividerRenderer;
import components.renderers.FileTypeRenderer;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import mx.validators.StringValidator;
import spark.layouts.VerticalLayout;

@:meta(Event(name = 'EVENT_NEW_FILE', type = 'actionScripts.events.NewFileEvent'))
//  begin class def
class NewFileBase extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var sValidator:mx.validators.StringValidator;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.width = 600;
		this.minWidth = 400;
		this.title = 'New Visual Editor File';
		this.layout = _NewFileBase_VerticalLayout1_c();
		_NewFileBase_StringValidator1_i();

		// events
		this.addEventListener('creationComplete', ___NewFileBase_ResizableTitleWindow1_creationComplete);

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 39 - 157

	@:meta(Bindable())
	public var wrapperBelongToProject:ProjectVO;

	public var wrapperOfFolderLocation:FileWrapper;
	public var folderLocation:FileLocation;

	@:meta(Bindable())
	private var modifiedName:String = '';
	@:meta(Bindable())
	private var projectFolders:ArrayCollection;
	@:meta(Bindable())
	private var model:IDEModel = IDEModel.getInstance();
	@:meta(Bindable())
	private var warningMessage:String = 'Class files allowed to create inside source folder only.';

	@:meta(Bindable())
	private var componentTemplates:ArrayCollection;

	private var lastSelectedItem:Dynamic;
	private var projectSelectionWindow:NewFileProjectSelectionPopup;

	private var _isDestinationValid:Bool = false;

	@:meta(Bindable())
	private var isDestinationValid(get, set):Bool;
	private function set_isDestinationValid(value:Bool):Bool {
		_isDestinationValid = value;
		if (!value) {
			warningMessage = 'Class files allowed to create inside source folder only.';
		}
		return value;
	}

	private function get_isDestinationValid():Bool {
		return _isDestinationValid;
	}

	override private function closeByCrossSign(event:Event):Void {
		doBeforeExit();
		super.closeByCrossSign(event);
	}

	override private function onResizeKeyDownEvent(event:KeyboardEvent):Void {
		doBeforeExit();
		super.onResizeKeyDownEvent(event);
	}

	private function doBeforeExit():Void {
		GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_ENABLE_STATE));
	}

	private function onBrowseButton(event:MouseEvent):Void {
		if (projectSelectionWindow == null) {
			projectSelectionWindow = AS3.as(PopUpManager.createPopUp(this, NewFileProjectSelectionPopup, true), NewFileProjectSelectionPopup);
			projectSelectionWindow.addEventListener(CloseEvent.CLOSE, handleProjectSelectionPopupClose);
			projectSelectionWindow.addEventListener(NewFileEvent.EVENT_PROJECT_SELECTED, onProjectSelectionChanged);

			//projectSelectionWindow.wrapperProject = UtilsCore.getProjectFromProjectFolder(tree.selectedItem as FileWrapper);
			//PopUpManager.centerPopUp(projectSelectionWindow);
		}
	}

	private function handleProjectSelectionPopupClose(event:CloseEvent):Void {
		projectSelectionWindow.removeEventListener(CloseEvent.CLOSE, handleProjectSelectionPopupClose);
		projectSelectionWindow.removeEventListener(NewFileEvent.EVENT_PROJECT_SELECTED, onProjectSelectionChanged);
		projectSelectionWindow = null;
	}

	private function onProjectSelectionChanged(event:NewFileEvent):Void {
		wrapperBelongToProject = event.ofProject;
		wrapperOfFolderLocation = wrapperBelongToProject.projectFolder;
		projectFolders = new ArrayCollection();

	}

	private function getTemplateLabel(item:Dynamic):String {
		return Std.string((!(Std.is(item, String))) ? Reflect.getProperty(Reflect.field(item, 'name').split('.'), Std.string(0)) : '');
	}

	private function getItemRenderer(item:Dynamic):IFactory {
		var renderer:Class<Dynamic> = (Std.is(item, String)) ? DividerRenderer : FileTypeRenderer;
		return new ClassFactory(renderer);
	}

	private function onDropDownClosed(event:DropDownEvent):Void {
		if (Std.is(event.target.selectedItem, String)) {
			event.target.selectedItem = lastSelectedItem;
		}
	}

	private function onNewFileCreationComplete(event:FlexEvent):Void {}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _NewFileBase_StringValidator1_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.initialized(this, 'sValidator');
		sValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'sValidator', sValidator);
		return temp;
	}

	private function _NewFileBase_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.horizontalAlign = 'center';
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___NewFileBase_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onNewFileCreationComplete(event);
	}

}

//  end package def