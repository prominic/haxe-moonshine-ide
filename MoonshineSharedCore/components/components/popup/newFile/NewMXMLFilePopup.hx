/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup.newFile
 *  Class:      NewMXMLFilePopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/newFile/NewMXMLFilePopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package components.popup.newFile;

import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.managers.PopUpManager;
import spark.events.TextOperationEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.NewFileEvent;
import actionScripts.extResources.com.validator.ValidatorType;
import actionScripts.factory.FileLocation;
import actionScripts.ui.menu.MenuPlugin;
import actionScripts.utils.SimpleValidator;
import actionScripts.utils.UtilsCore;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.FileWrapper;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.renderers.FTETreeItemRenderer;
import actionScripts.utils.CustomTreeFolders;
import components.popup.newFile.NewFileBase;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.DropDownList;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Image;
import spark.components.Label;
import spark.components.VGroup;
import spark.events.DropDownEvent;

@:meta(Event(name = 'EVENT_NEW_FILE', type = 'actionScripts.events.NewFileEvent'))
//  begin class def
class NewMXMLFilePopup extends components.popup.newFile.NewFileBase implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _NewMXMLFilePopup_Button2:spark.components.Button;

	/**
	 * @private
	 **/
	public var _NewMXMLFilePopup_Label5:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnCreate:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var ddlType:spark.components.DropDownList;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var extensionLabel:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var hgExistingWarning:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var tree:actionScripts.utils.CustomTreeFolders;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtDestination:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtFileName:actionScripts.plugin.findreplace.view.PromptTextInput;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _NewMXMLFilePopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_newFile_NewMXMLFilePopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(NewMXMLFilePopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.title = 'New MXML Component';
		this.controlBarContent = [_NewMXMLFilePopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_NewMXMLFilePopup_Array2_c);

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 32 - 199

	override private function onBrowseButton(event:MouseEvent):Void {
		super.onBrowseButton(event);

		if (projectSelectionWindow == null) {
			projectSelectionWindow.wrapperProject = UtilsCore.getProjectFromProjectFolder(AS3.as(tree.selectedItem, FileWrapper));
			PopUpManager.centerPopUp(projectSelectionWindow);
		}
	}

	override private function onProjectSelectionChanged(event:NewFileEvent):Void {
		super.onProjectSelectionChanged(event);

		txtDestination.text = wrapperBelongToProject.projectName;

		refreshTemplatesBasedOnDropDownList();

		var timeoutValue:Int = as3hx.Compat.setTimeout(function():Void {
					parseFolders();
					as3hx.Compat.clearTimeout(timeoutValue);
				}, 100);
	}

	private function onCreateButton(event:MouseEvent):Void {
		// validation check for Enter key
		if (!AS3.as(btnCreate.enabled, Bool)) {
			return;
		}

		// validation 2
		var validateArr:Array<Dynamic> = new Array<Dynamic>();
		if (SimpleValidator.validate(validateArr)) {
			var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_NEW_FILE, null, new FileLocation(Std.string(ddlType.selectedItem.nativePath)), wrapperOfFolderLocation);
			tmpEvent.ofProject = wrapperBelongToProject;
			tmpEvent.fileName = txtFileName.text;
			dispatchEvent(tmpEvent);

			doBeforeExit();
			super.closeThis();
		}
	}

	private function refreshTemplatesBasedOnDropDownList():Void {
		var currentProject:AS3ProjectVO = AS3.as(wrapperBelongToProject, AS3ProjectVO);
		if (currentProject != null && currentProject.isFlexJS && !currentProject.isRoyale) {
			componentTemplates = ConstantsCoreVO.TEMPLATES_MXML_FLEXJS_COMPONENTS;
		} else if (currentProject != null && currentProject.isRoyale) {
			componentTemplates = ConstantsCoreVO.TEMPLATES_MXML_ROYALE_COMPONENTS;
			//Selects Group which is more common for Royale
			ddlType.selectedIndex = 1;
		} else {
			componentTemplates = ConstantsCoreVO.TEMPLATES_MXML_COMPONENTS;
		}
	}

	private function parseFolders():Void {
		tree.expandItem(wrapperBelongToProject.projectFolder, true);

		// 1. expand all items to our fileWrapper object
		// 2. select the fileWrapper object
		// 3. scroll to the fileWrapper object
		UtilsCore.wrappersFoundThroughFindingAWrapper = cast new Array<FileWrapper>();
		UtilsCore.findFileWrapperInDepth(wrapperOfFolderLocation, wrapperOfFolderLocation.nativePath, wrapperBelongToProject);
		tree.callLater(function():Void {
					var wrappers:Array<FileWrapper> = cast UtilsCore.wrappersFoundThroughFindingAWrapper;
					for (j in 0...(wrappers.length - 1)) {
						tree.expandItem(wrappers[j], true);
					}

					// selection
					tree.selectedItem = wrapperOfFolderLocation;
					// scroll-to
					tree.callLater(function():Void {
								tree.scrollToIndex(tree.getItemIndex(wrapperOfFolderLocation));
							});
				});
	}

	private function onNameChanged(event:TextOperationEvent):Void {
		// @note
		// for some reason PromptTextInput.text is not binding properly
		// to other Flex UI component, i.e. Label
		// it shows only the origianl set text to PromptTextInput.text if
		// binded to a label component, thus:
		modifiedName = txtFileName.text;
		if (isDestinationValid) {
			warningMessage = modifiedName + '.mxml is already exists.';
		}

		if (!isDestinationValid || txtFileName.text == '') {
			btnCreate.enabled = false;
		} else {
			var targetFile:FileLocation = wrapperOfFolderLocation.file.fileBridge.resolvePath(txtFileName.text + '.mxml');
			targetFile.fileBridge.canonicalize();

			btnCreate.enabled = !targetFile.fileBridge.exists;
		}
	}

	private function onTreeItemClicked(event:ListEvent):Void {
		txtDestination.text = UtilsCore.getPackageReferenceByProjectPath(
						[new FileLocation(Std.string(tree.selectedItem.projectReference.path))],
						Std.string(tree.selectedItem.nativePath)
			);

		// re-validate upon folder location change
		wrapperOfFolderLocation = AS3.as(tree.selectedItem, FileWrapper);
		isDestinationValid = UtilsCore.validatePathAgainstSourceFolder(wrapperBelongToProject, wrapperOfFolderLocation);
		onNameChanged(new TextOperationEvent(TextOperationEvent.CHANGE));
	}

	override private function onNewFileCreationComplete(event:FlexEvent):Void {
		super.onNewFileCreationComplete(event);

		refreshTemplatesBasedOnDropDownList();

		minHeight = height;
		if (folderLocation != null) {
			txtDestination.text = wrapperBelongToProject.projectName;
			txtFileName.setFocus();
		}

		// check if the file creation requested in the
		// 'source folder' or not
		isDestinationValid = UtilsCore.validatePathAgainstSourceFolder(wrapperBelongToProject, wrapperOfFolderLocation);
		if (isDestinationValid) {
			hgExistingWarning.visible = false;
		}

		tree.callLater(parseFolders);
		GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _NewMXMLFilePopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Create';
		temp.styleName = 'darkButton';
		temp.enabled = false;
		temp.addEventListener('click', __btnCreate_click);
		temp.id = 'btnCreate';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnCreate = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnCreate', btnCreate);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnCreate_click(event:flash.events.MouseEvent):Void {
		onCreateButton(event);
	}

	private function _NewMXMLFilePopup_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_NewMXMLFilePopup_VGroup1_c(), _NewMXMLFilePopup_VGroup2_c(), _NewMXMLFilePopup_VGroup3_c()];
		return cast temp;
	}

	private function _NewMXMLFilePopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewMXMLFilePopup_Label1_c(), _NewMXMLFilePopup_HGroup1_c(), _NewMXMLFilePopup_CustomTreeFolders1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewMXMLFilePopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Source Folder:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewMXMLFilePopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_NewMXMLFilePopup_PromptTextInput1_i(), _NewMXMLFilePopup_Button2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewMXMLFilePopup_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Select Destination';
		temp.editable = false;
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.id = 'txtDestination';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtDestination = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtDestination', txtDestination);
		return temp;
	}

	private function _NewMXMLFilePopup_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Change';
		temp.styleName = 'lightButtonTight';
		temp.width = 70;
		temp.addEventListener('click', ___NewMXMLFilePopup_Button2_click);
		temp.id = '_NewMXMLFilePopup_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_NewMXMLFilePopup_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_NewMXMLFilePopup_Button2', _NewMXMLFilePopup_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___NewMXMLFilePopup_Button2_click(event:flash.events.MouseEvent):Void {
		onBrowseButton(event);
	}

	private function _NewMXMLFilePopup_CustomTreeFolders1_i():actionScripts.utils.CustomTreeFolders {
		var temp:actionScripts.utils.CustomTreeFolders = new actionScripts.utils.CustomTreeFolders();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.rowHeight = 18;
		temp.doubleClickEnabled = true;
		temp.labelField = 'name';
		temp.itemRenderer = _NewMXMLFilePopup_ClassFactory1_c();
		temp.setStyle('color', 15658734);
		temp.setStyle('contentBackgroundColor', 0);
		temp.setStyle('rollOverColor', 3750201);
		temp.setStyle('selectionColor', 12674488);
		temp.setStyle('alternatingItemColors', [4473924, 5065804]);
		temp.setStyle('verticalScrollBarStyleName', 'black');
		temp.setStyle('borderVisible', false);
		temp.setStyle('useRollOver', true);
		temp.addEventListener('itemClick', __tree_itemClick);
		temp.id = 'tree';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		tree = temp;
		mx.binding.BindingManager.executeBindings(this, 'tree', tree);
		return temp;
	}

	private function _NewMXMLFilePopup_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = actionScripts.ui.renderers.FTETreeItemRenderer;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __tree_itemClick(event:mx.events.ListEvent):Void {
		onTreeItemClicked(event);
	}

	private function _NewMXMLFilePopup_VGroup2_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewMXMLFilePopup_Label2_c(), _NewMXMLFilePopup_Group1_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewMXMLFilePopup_Label2_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Name:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewMXMLFilePopup_Group1_c():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewMXMLFilePopup_PromptTextInput2_i(), _NewMXMLFilePopup_Label3_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewMXMLFilePopup_PromptTextInput2_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Name';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.restrict = '0-9A-Za-z_';
		temp.marginRight = 50;
		temp.addEventListener('change', __txtFileName_change);
		temp.addEventListener('enter', __txtFileName_enter);
		temp.id = 'txtFileName';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtFileName = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtFileName', txtFileName);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtFileName_change(event:spark.events.TextOperationEvent):Void {
		onNameChanged(event);
	}

	/**
	 * @private
	 **/
	public function __txtFileName_enter(event:mx.events.FlexEvent):Void {
		onCreateButton(null);
	}

	private function _NewMXMLFilePopup_Label3_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = '.mxml';
		temp.styleName = 'textInputLabel';
		temp.right = 6;
		temp.verticalCenter = 0;
		temp.setStyle('textAlign', 'right');
		temp.id = 'extensionLabel';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		extensionLabel = temp;
		mx.binding.BindingManager.executeBindings(this, 'extensionLabel', extensionLabel);
		return temp;
	}

	private function _NewMXMLFilePopup_VGroup3_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewMXMLFilePopup_Label4_c(), _NewMXMLFilePopup_DropDownList1_i(), _NewMXMLFilePopup_HGroup2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewMXMLFilePopup_Label4_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Based on:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewMXMLFilePopup_DropDownList1_i():spark.components.DropDownList {
		var temp:spark.components.DropDownList = new spark.components.DropDownList();
		temp.percentWidth = 100.0;
		temp.height = 25;
		temp.labelFunction = getTemplateLabel;
		temp.requireSelection = true;
		temp.itemRendererFunction = getItemRenderer;
		temp.addEventListener('open', __ddlType_open);
		temp.addEventListener('close', __ddlType_close);
		temp.id = 'ddlType';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		ddlType = temp;
		mx.binding.BindingManager.executeBindings(this, 'ddlType', ddlType);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __ddlType_open(event:spark.events.DropDownEvent):Void {
		lastSelectedItem = ddlType.selectedItem;
	}

	/**
	 * @private
	 **/
	public function __ddlType_close(event:spark.events.DropDownEvent):Void {
		onDropDownClosed(event);
	}

	private function _NewMXMLFilePopup_HGroup2_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_NewMXMLFilePopup_Image1_c(), _NewMXMLFilePopup_Label5_i()];
		temp.id = 'hgExistingWarning';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		hgExistingWarning = temp;
		mx.binding.BindingManager.executeBindings(this, 'hgExistingWarning', hgExistingWarning);
		return temp;
	}

	private function _NewMXMLFilePopup_Image1_c():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = _embed_mxml__elements_images_iconExclamationRed_png_1685577265;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewMXMLFilePopup_Label5_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.percentWidth = 100.0;
		temp.id = '_NewMXMLFilePopup_Label5';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_NewMXMLFilePopup_Label5 = temp;
		mx.binding.BindingManager.executeBindings(this, '_NewMXMLFilePopup_Label5', _NewMXMLFilePopup_Label5);
		return temp;
	}

	//  binding mgmt
	private function _NewMXMLFilePopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Bool {
					return (model.projects.length > 1);
				},
				null,
				'_NewMXMLFilePopup_Button2.enabled');

		result[1] = new mx.binding.Binding(this,
				function():Dynamic {
					return (wrapperBelongToProject.projectFolder);
				},
				null,
				'tree.dataProvider');

		result[2] = new mx.binding.Binding(this,
				function():mx.collections.IList {
					return (componentTemplates);
				},
				null,
				'ddlType.dataProvider');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (!isDestinationValid || (!AS3.as(btnCreate.enabled, Bool) && modifiedName != ''));
				},
				null,
				'hgExistingWarning.visible');

		result[4] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (warningMessage);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_NewMXMLFilePopup_Label5.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(NewMXMLFilePopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	@:meta(Embed(source = '/elements/images/iconExclamationRed.png'))
	private var _embed_mxml__elements_images_iconExclamationRed_png_1685577265:Class<Dynamic>;

	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def