/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup.newFile
 *  Class:      NewFileProjectSelectionPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/newFile/NewFileProjectSelectionPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package components.popup.newFile;

import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.managers.PopUpManager;
import actionScripts.events.NewFileEvent;
import actionScripts.locator.IDEModel;
import actionScripts.valueObjects.ProjectVO;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.controls.HRule;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.Label;
import spark.components.List;
import spark.components.TitleWindow;
import spark.components.VGroup;

//  begin class def
class NewFileProjectSelectionPopup extends spark.components.TitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnChange:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lstResources:spark.components.List;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _NewFileProjectSelectionPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_newFile_NewFileProjectSelectionPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(NewFileProjectSelectionPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 350;
		this.autoLayout = true;
		this.title = 'Select a Source Project';
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_NewFileProjectSelectionPopup_Array1_c);

		// events
		this.addEventListener('close', ___NewFileProjectSelectionPopup_TitleWindow1_close);
		this.addEventListener('creationComplete', ___NewFileProjectSelectionPopup_TitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 30 - 66

	public var wrapperProject:ProjectVO;

	@:meta(Bindable())private var model:IDEModel = IDEModel.getInstance();

	private function closeHandler():Void {
		PopUpManager.removePopUp(this);
	}

	private function onChangeButton(event:MouseEvent):Void {
		// validation check for Enter key
		if (!AS3.as(btnChange.enabled, Bool)) {
			return;
		}

		var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_PROJECT_SELECTED, null, null, null);
		tmpEvent.ofProject = AS3.as(lstResources.selectedItem, ProjectVO);
		dispatchEvent(tmpEvent);

		callLater(closeHandler);
		dispatchEvent(new CloseEvent(CloseEvent.CLOSE, true));
	}

	private function onCreationCompletes(event:FlexEvent):Void {
		lstResources.selectedItem = wrapperProject;
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _NewFileProjectSelectionPopup_Array1_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_NewFileProjectSelectionPopup_VGroup1_c()];
		return cast temp;
	}

	private function _NewFileProjectSelectionPopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_NewFileProjectSelectionPopup_VGroup2_c(), _NewFileProjectSelectionPopup_HRule1_c(), _NewFileProjectSelectionPopup_Button1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewFileProjectSelectionPopup_VGroup2_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewFileProjectSelectionPopup_Label1_c(), _NewFileProjectSelectionPopup_List1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewFileProjectSelectionPopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Select Source Project:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewFileProjectSelectionPopup_List1_i():spark.components.List {
		var temp:spark.components.List = new spark.components.List();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.labelField = 'projectName';
		temp.styleName = 'multiLineList';
		temp.requireSelection = true;
		temp.doubleClickEnabled = true;
		temp.addEventListener('doubleClick', __lstResources_doubleClick);
		temp.id = 'lstResources';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lstResources = temp;
		mx.binding.BindingManager.executeBindings(this, 'lstResources', lstResources);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __lstResources_doubleClick(event:flash.events.MouseEvent):Void {
		onChangeButton(null);
	}

	private function _NewFileProjectSelectionPopup_HRule1_c():mx.controls.HRule {
		var temp:mx.controls.HRule = new mx.controls.HRule();
		temp.percentWidth = 100.0;
		temp.height = 1;
		temp.horizontalCenter = 0;
		temp.setStyle('strokeColor', 14342874);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewFileProjectSelectionPopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Select';
		temp.styleName = 'lightButtonTight';
		temp.width = 80;
		temp.addEventListener('click', __btnChange_click);
		temp.id = 'btnChange';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnChange = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnChange', btnChange);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnChange_click(event:flash.events.MouseEvent):Void {
		onChangeButton(event);
	}

	/**
	 * @private
	 **/
	public function ___NewFileProjectSelectionPopup_TitleWindow1_close(event:mx.events.CloseEvent):Void {
		closeHandler();
	}

	/**
	 * @private
	 **/
	public function ___NewFileProjectSelectionPopup_TitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes(event);
	}

	//  binding mgmt
	private function _NewFileProjectSelectionPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():mx.collections.IList {
					return (model.projects);
				},
				null,
				'lstResources.dataProvider');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(NewFileProjectSelectionPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def