/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup.newFile
 *  Class:      NewASFilePopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/newFile/NewASFilePopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package components.popup.newFile;

import actionScripts.factory.FileLocation;
import actionScripts.ui.editor.text.NewASFileCompletionManager;
import elements.skins.DarkButtonSkin;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.managers.PopUpManager;
import spark.events.TextOperationEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.NewFileEvent;
import actionScripts.extResources.com.validator.ValidatorType;
import actionScripts.ui.menu.MenuPlugin;
import actionScripts.utils.SimpleValidator;
import actionScripts.utils.UtilsCore;
import actionScripts.valueObjects.AS3ClassAttributes;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.FileWrapper;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.renderers.FTETreeItemRenderer;
import actionScripts.utils.CustomTreeFolders;
import components.popup.newFile.NewFileBase;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexDisplayObject;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Image;
import spark.components.Label;
import spark.components.RadioButton;
import spark.components.RadioButtonGroup;
import spark.components.TileGroup;
import spark.components.VGroup;

@:meta(Event(name = 'EVENT_NEW_FILE', type = 'actionScripts.events.NewFileEvent'))
//  begin class def
class NewASFilePopup extends components.popup.newFile.NewFileBase implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _NewASFilePopup_Button2:spark.components.Button;

	/**
	 * @private
	 **/
	public var _NewASFilePopup_Label3:spark.components.Label;

	/**
	 * @private
	 **/
	public var _NewASFilePopup_Label4:spark.components.Label;

	/**
	 * @private
	 **/
	public var _NewASFilePopup_Label7:spark.components.Label;

	/**
	 * @private
	 **/
	public var _NewASFilePopup_TileGroup1:spark.components.TileGroup;

	/**
	 * @private
	 **/
	public var _NewASFilePopup_VGroup3:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnCreate:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbDynamic:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var cbFinal:spark.components.CheckBox;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var hgExistingWarning:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var radio1:spark.components.RadioButton;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var radio2:spark.components.RadioButton;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var rgModifiersA:spark.components.RadioButtonGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var tree:actionScripts.utils.CustomTreeFolders;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtDestination:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtFileName:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtInterfaces:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtSuperclass:actionScripts.plugin.findreplace.view.PromptTextInput;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _NewASFilePopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_newFile_NewASFilePopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(NewASFilePopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.controlBarContent = [_NewASFilePopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_NewASFilePopup_Array2_c);
		_NewASFilePopup_RadioButtonGroup1_i();

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 31 - 246

	@:meta(Bindable())
	public var isInterfaceDialog:Bool = false;
	@:meta(Bindable())
	public var hasInternalClasses:Bool = true;

	@:meta(Bindable())
	private var newAsFileCompletionManager:NewASFileCompletionManager;

	@:meta(Bindable())
	private var createdFileExtension:String = '.as';

	override private function onBrowseButton(event:MouseEvent):Void {
		super.onBrowseButton(event);

		if (projectSelectionWindow == null) {
			projectSelectionWindow.wrapperProject = UtilsCore.getProjectFromProjectFolder(AS3.as(tree.selectedItem, FileWrapper));
			PopUpManager.centerPopUp(projectSelectionWindow);
		}
	}

	override private function onProjectSelectionChanged(event:NewFileEvent):Void {
		super.onProjectSelectionChanged(event);

		txtDestination.text = wrapperBelongToProject.projectName;

		var timeoutValue:Int = as3hx.Compat.setTimeout(function():Void {
					parseFolders();
					as3hx.Compat.clearTimeout(timeoutValue);
				}, 100);
	}

	private function onBtnCreateClick(event:MouseEvent):Void {
		// validation check for Enter key
		if (!AS3.as(btnCreate.enabled, Bool)) {
			return;
		}

		// validation 2
		var validateArr:Array<Dynamic> = new Array<Dynamic>();
		if (SimpleValidator.validate(validateArr)) {
			var attributes:AS3ClassAttributes = new AS3ClassAttributes();
			attributes.modifierA = Std.string(rgModifiersA.selectedValue);
			attributes.extendsClassInterface = txtSuperclass.text;
			attributes.implementsInterface = txtInterfaces.text;
			attributes.modifierB = (AS3.as(cbDynamic.selected, Bool)) ? 'dynamic' : '';
			attributes.modifierC = (AS3.as(cbFinal.selected, Bool)) ? 'final' : '';

			attributes.imports = newAsFileCompletionManager.classesImports.concat(newAsFileCompletionManager.interfacesImports);

			var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_NEW_FILE, null, (isInterfaceDialog) ? ConstantsCoreVO.TEMPLATE_AS3INTERFACE : ConstantsCoreVO.TEMPLATE_AS3CLASS, wrapperOfFolderLocation, attributes);
			tmpEvent.fileName = txtFileName.text;
			tmpEvent.ofProject = wrapperBelongToProject;
			tmpEvent.fileExtension = this.createdFileExtension;

			dispatchEvent(tmpEvent);

			doBeforeExit();
			super.closeThis();
		}
	}

	private function parseFolders():Void {
		tree.expandItem(wrapperBelongToProject.projectFolder, true);

		// 1. expand all items to our fileWrapper object
		// 2. select the fileWrapper object
		// 3. scroll to the fileWrapper object
		UtilsCore.wrappersFoundThroughFindingAWrapper = cast new Array<FileWrapper>();
		UtilsCore.findFileWrapperInDepth(wrapperOfFolderLocation, wrapperOfFolderLocation.nativePath, wrapperBelongToProject);
		tree.callLater(function():Void {
					var wrappers:Array<FileWrapper> = cast UtilsCore.wrappersFoundThroughFindingAWrapper;
					for (j in 0...(wrappers.length - 1)) {
						tree.expandItem(wrappers[j], true);
					}

					// selection
					tree.selectedItem = wrapperOfFolderLocation;
					// scroll-to
					tree.callLater(function():Void {
								tree.scrollToIndex(tree.getItemIndex(wrapperOfFolderLocation));
							});
				});
	}

	private function onNameChanged(event:TextOperationEvent):Void {
		// @note
		// for some reason PromptTextInput.text is not binding properly
		// to other Flex UI component, i.e. Label
		// it shows only the origianl set text to PromptTextInput.text if
		// binded to a label component, thus:
		modifiedName = txtFileName.text;
		if (isDestinationValid) {
			warningMessage = modifiedName + createdFileExtension + ' is already exists.';
		}

		if (!isDestinationValid || txtFileName.text == '') {
			btnCreate.enabled = false;
		} else {
			var targetFile:FileLocation = wrapperOfFolderLocation.file.fileBridge.resolvePath(txtFileName.text + createdFileExtension);
			targetFile.fileBridge.canonicalize();

			btnCreate.enabled = !targetFile.fileBridge.exists;
		}
	}

	private function onTreeItemClicked(event:ListEvent):Void {
		txtDestination.text = UtilsCore.getPackageReferenceByProjectPath(
						[new FileLocation(Std.string(tree.selectedItem.projectReference.path))],
						Std.string(tree.selectedItem.nativePath)
			);

		// re-validate upon folder location change
		wrapperOfFolderLocation = AS3.as(tree.selectedItem, FileWrapper);
		isDestinationValid = UtilsCore.validatePathAgainstSourceFolder(wrapperBelongToProject, wrapperOfFolderLocation);
		onNameChanged(new TextOperationEvent(TextOperationEvent.CHANGE));
	}

	override private function onNewFileCreationComplete(event:FlexEvent):Void {
		super.onNewFileCreationComplete(event);

		minHeight = height;
		title = (isInterfaceDialog) ? 'New Interface Class' : 'New ActionScript Class';

		if (folderLocation != null) {
			txtDestination.text = wrapperBelongToProject.projectName;
			txtFileName.setFocus();
		}

		// check if the file creation requested in the
		// 'source folder' or not
		isDestinationValid = UtilsCore.validatePathAgainstSourceFolder(wrapperBelongToProject, wrapperOfFolderLocation);
		if (isDestinationValid) {
			hgExistingWarning.visible = false;
		}

		tree.callLater(parseFolders);
		GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));

		newAsFileCompletionManager = new NewASFileCompletionManager(this);
		newAsFileCompletionManager.addEventListener('itemSelected', onCompletionManagerItemSelected);

		this.btnCreate.setStyle('skinClass', DarkButtonSkin);
	}

	override private function closeThis():Void {
		newAsFileCompletionManager.removeEventListener('itemSelected', onCompletionManagerItemSelected);
		super.closeThis();
	}

	override private function closeByCrossSign(event:Event):Void {
		newAsFileCompletionManager.removeEventListener('itemSelected', onCompletionManagerItemSelected);
		super.closeByCrossSign(event);
	}

	private function onTxtSuperClassChange(event:TextOperationEvent):Void {
		var completionListPosition:Point = this.txtSuperclass.localToGlobal(
				new Point(this.txtSuperclass.x, this.txtSuperclass.y)
		);

		if (isInterfaceDialog) {
			newAsFileCompletionManager.showCompletionListInterfaces(this.txtSuperclass.text, completionListPosition);
		} else {
			newAsFileCompletionManager.showCompletionListClasses(this.txtSuperclass.text, completionListPosition);
		}
	}

	private function onTxtInterfaceChange(event:TextOperationEvent):Void {
		var completionListPosition:Point = this.txtInterfaces.localToGlobal(
				new Point(this.txtInterfaces.x, this.txtInterfaces.y)
		);
		newAsFileCompletionManager.showCompletionListInterfaces(this.txtInterfaces.text, completionListPosition);
	}

	private function onCompletionManagerItemSelected(event:Event):Void {
		txtSuperclass.selectRange(txtSuperclass.text.length, txtSuperclass.text.length);
		txtInterfaces.selectRange(txtInterfaces.text.length, txtInterfaces.text.length);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _NewASFilePopup_RadioButtonGroup1_i():spark.components.RadioButtonGroup {
		var temp:spark.components.RadioButtonGroup = new spark.components.RadioButtonGroup();
		temp.initialized(this, 'rgModifiersA');
		rgModifiersA = temp;
		mx.binding.BindingManager.executeBindings(this, 'rgModifiersA', rgModifiersA);
		return temp;
	}

	private function _NewASFilePopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Create';
		temp.styleName = 'darkButton';
		temp.enabled = false;
		temp.addEventListener('click', __btnCreate_click);
		temp.id = 'btnCreate';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnCreate = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnCreate', btnCreate);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnCreate_click(event:flash.events.MouseEvent):Void {
		onBtnCreateClick(event);
	}

	private function _NewASFilePopup_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_NewASFilePopup_VGroup1_c(), _NewASFilePopup_VGroup2_c(), _NewASFilePopup_VGroup3_i(), _NewASFilePopup_VGroup4_c()];
		return cast temp;
	}

	private function _NewASFilePopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewASFilePopup_Label1_c(), _NewASFilePopup_HGroup1_c(), _NewASFilePopup_CustomTreeFolders1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Source Folder:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_NewASFilePopup_PromptTextInput1_i(), _NewASFilePopup_Button2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Select Destination';
		temp.editable = false;
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.id = 'txtDestination';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtDestination = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtDestination', txtDestination);
		return temp;
	}

	private function _NewASFilePopup_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Change';
		temp.styleName = 'lightButtonTight';
		temp.width = 70;
		temp.addEventListener('click', ___NewASFilePopup_Button2_click);
		temp.id = '_NewASFilePopup_Button2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_NewASFilePopup_Button2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_NewASFilePopup_Button2', _NewASFilePopup_Button2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___NewASFilePopup_Button2_click(event:flash.events.MouseEvent):Void {
		onBrowseButton(event);
	}

	private function _NewASFilePopup_CustomTreeFolders1_i():actionScripts.utils.CustomTreeFolders {
		var temp:actionScripts.utils.CustomTreeFolders = new actionScripts.utils.CustomTreeFolders();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.rowHeight = 18;
		temp.doubleClickEnabled = true;
		temp.labelField = 'name';
		temp.itemRenderer = _NewASFilePopup_ClassFactory1_c();
		temp.setStyle('color', 15658734);
		temp.setStyle('contentBackgroundColor', 0);
		temp.setStyle('rollOverColor', 3750201);
		temp.setStyle('selectionColor', 12674488);
		temp.setStyle('alternatingItemColors', [4473924, 5065804]);
		temp.setStyle('verticalScrollBarStyleName', 'black');
		temp.setStyle('borderVisible', false);
		temp.setStyle('useRollOver', true);
		temp.addEventListener('itemClick', __tree_itemClick);
		temp.id = 'tree';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		tree = temp;
		mx.binding.BindingManager.executeBindings(this, 'tree', tree);
		return temp;
	}

	private function _NewASFilePopup_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = actionScripts.ui.renderers.FTETreeItemRenderer;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __tree_itemClick(event:mx.events.ListEvent):Void {
		onTreeItemClicked(event);
	}

	private function _NewASFilePopup_VGroup2_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewASFilePopup_Label2_c(), _NewASFilePopup_Group1_c(), _NewASFilePopup_Label4_i(), _NewASFilePopup_TileGroup1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_Label2_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Name:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_Group1_c():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewASFilePopup_PromptTextInput2_i(), _NewASFilePopup_Label3_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_PromptTextInput2_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Name';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.restrict = '0-9A-Za-z_';
		temp.marginRight = 50;
		temp.addEventListener('change', __txtFileName_change);
		temp.addEventListener('enter', __txtFileName_enter);
		temp.id = 'txtFileName';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtFileName = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtFileName', txtFileName);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtFileName_change(event:spark.events.TextOperationEvent):Void {
		onNameChanged(event);
	}

	/**
	 * @private
	 **/
	public function __txtFileName_enter(event:mx.events.FlexEvent):Void {
		onBtnCreateClick(null);
	}

	private function _NewASFilePopup_Label3_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.styleName = 'textInputLabel';
		temp.right = 6;
		temp.verticalCenter = 0;
		temp.setStyle('textAlign', 'right');
		temp.id = '_NewASFilePopup_Label3';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_NewASFilePopup_Label3 = temp;
		mx.binding.BindingManager.executeBindings(this, '_NewASFilePopup_Label3', _NewASFilePopup_Label3);
		return temp;
	}

	private function _NewASFilePopup_Label4_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Modifiers:';
		temp.id = '_NewASFilePopup_Label4';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_NewASFilePopup_Label4 = temp;
		mx.binding.BindingManager.executeBindings(this, '_NewASFilePopup_Label4', _NewASFilePopup_Label4);
		return temp;
	}

	private function _NewASFilePopup_TileGroup1_i():spark.components.TileGroup {
		var temp:spark.components.TileGroup = new spark.components.TileGroup();
		temp.width = 220;
		temp.columnWidth = 100;
		temp.mxmlContent = [_NewASFilePopup_RadioButton1_i(), _NewASFilePopup_RadioButton2_i(), _NewASFilePopup_CheckBox1_i(), _NewASFilePopup_CheckBox2_i()];
		temp.id = '_NewASFilePopup_TileGroup1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_NewASFilePopup_TileGroup1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_NewASFilePopup_TileGroup1', _NewASFilePopup_TileGroup1);
		return temp;
	}

	private function _NewASFilePopup_RadioButton1_i():spark.components.RadioButton {
		var temp:spark.components.RadioButton = new spark.components.RadioButton();
		temp.label = 'public';
		temp.value = 'public';
		temp.selected = true;
		temp.id = 'radio1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		radio1 = temp;
		mx.binding.BindingManager.executeBindings(this, 'radio1', radio1);
		return temp;
	}

	private function _NewASFilePopup_RadioButton2_i():spark.components.RadioButton {
		var temp:spark.components.RadioButton = new spark.components.RadioButton();
		temp.label = 'internal';
		temp.value = 'internal';
		temp.id = 'radio2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		radio2 = temp;
		mx.binding.BindingManager.executeBindings(this, 'radio2', radio2);
		return temp;
	}

	private function _NewASFilePopup_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'dynamic';
		temp.id = 'cbDynamic';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbDynamic = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbDynamic', cbDynamic);
		return temp;
	}

	private function _NewASFilePopup_CheckBox2_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'final';
		temp.id = 'cbFinal';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		cbFinal = temp;
		mx.binding.BindingManager.executeBindings(this, 'cbFinal', cbFinal);
		return temp;
	}

	private function _NewASFilePopup_VGroup3_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewASFilePopup_Label5_c(), _NewASFilePopup_PromptTextInput3_i()];
		temp.id = '_NewASFilePopup_VGroup3';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_NewASFilePopup_VGroup3 = temp;
		mx.binding.BindingManager.executeBindings(this, '_NewASFilePopup_VGroup3', _NewASFilePopup_VGroup3);
		return temp;
	}

	private function _NewASFilePopup_Label5_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Superclass:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_PromptTextInput3_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Class to extend with';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.addEventListener('change', __txtSuperclass_change);
		temp.id = 'txtSuperclass';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtSuperclass = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtSuperclass', txtSuperclass);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtSuperclass_change(event:spark.events.TextOperationEvent):Void {
		onTxtSuperClassChange(event);
	}

	private function _NewASFilePopup_VGroup4_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_NewASFilePopup_Label6_c(), _NewASFilePopup_PromptTextInput4_i(), _NewASFilePopup_HGroup2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_Label6_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Interfaces:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_PromptTextInput4_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Interface to extend with';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.addEventListener('change', __txtInterfaces_change);
		temp.id = 'txtInterfaces';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtInterfaces = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtInterfaces', txtInterfaces);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtInterfaces_change(event:spark.events.TextOperationEvent):Void {
		onTxtInterfaceChange(event);
	}

	private function _NewASFilePopup_HGroup2_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_NewASFilePopup_Image1_c(), _NewASFilePopup_Label7_i()];
		temp.id = 'hgExistingWarning';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		hgExistingWarning = temp;
		mx.binding.BindingManager.executeBindings(this, 'hgExistingWarning', hgExistingWarning);
		return temp;
	}

	private function _NewASFilePopup_Image1_c():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = _embed_mxml__elements_images_iconExclamationRed_png_1685577265;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _NewASFilePopup_Label7_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.percentWidth = 100.0;
		temp.id = '_NewASFilePopup_Label7';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_NewASFilePopup_Label7 = temp;
		mx.binding.BindingManager.executeBindings(this, '_NewASFilePopup_Label7', _NewASFilePopup_Label7);
		return temp;
	}

	//  binding mgmt
	private function _NewASFilePopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'this.defaultButton', 'btnCreate');

		result[1] = new mx.binding.Binding(this,
				function():Bool {
					return (model.projects.length > 1);
				},
				null,
				'_NewASFilePopup_Button2.enabled');

		result[2] = new mx.binding.Binding(this,
				function():Dynamic {
					return (wrapperBelongToProject.projectFolder);
				},
				null,
				'tree.dataProvider');

		result[3] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (createdFileExtension);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_NewASFilePopup_Label3.text');

		result[4] = new mx.binding.Binding(this,
				null,
				null,
				'_NewASFilePopup_Label4.visible', 'hasInternalClasses');

		result[5] = new mx.binding.Binding(this,
				null,
				null,
				'_NewASFilePopup_Label4.includeInLayout', 'hasInternalClasses');

		result[6] = new mx.binding.Binding(this,
				null,
				null,
				'_NewASFilePopup_TileGroup1.visible', 'hasInternalClasses');

		result[7] = new mx.binding.Binding(this,
				null,
				null,
				'_NewASFilePopup_TileGroup1.includeInLayout', 'hasInternalClasses');

		result[8] = new mx.binding.Binding(this,
				null,
				null,
				'radio1.group', 'rgModifiersA');

		result[9] = new mx.binding.Binding(this,
				null,
				null,
				'radio2.group', 'rgModifiersA');

		result[10] = new mx.binding.Binding(this,
				function():Bool {
					return (!isInterfaceDialog);
				},
				null,
				'cbDynamic.includeInLayout');

		result[11] = new mx.binding.Binding(this,
				function():Bool {
					return (!isInterfaceDialog);
				},
				null,
				'cbDynamic.visible');

		result[12] = new mx.binding.Binding(this,
				function():Bool {
					return (!isInterfaceDialog);
				},
				null,
				'cbFinal.includeInLayout');

		result[13] = new mx.binding.Binding(this,
				function():Bool {
					return (!isInterfaceDialog);
				},
				null,
				'cbFinal.visible');

		result[14] = new mx.binding.Binding(this,
				function():Bool {
					return (!isInterfaceDialog);
				},
				null,
				'_NewASFilePopup_VGroup3.visible');

		result[15] = new mx.binding.Binding(this,
				function():Bool {
					return (!isInterfaceDialog);
				},
				null,
				'_NewASFilePopup_VGroup3.includeInLayout');

		result[16] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (newAsFileCompletionManager.superClassName);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'txtSuperclass.text');

		result[17] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (newAsFileCompletionManager.interfaceName);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'txtInterfaces.text');

		result[18] = new mx.binding.Binding(this,
				function():Bool {
					return (!isDestinationValid || (!AS3.as(btnCreate.enabled, Bool) && modifiedName != ''));
				},
				null,
				'hgExistingWarning.includeInLayout');

		result[19] = new mx.binding.Binding(this,
				function():Bool {
					return (!isDestinationValid || (!AS3.as(btnCreate.enabled, Bool) && modifiedName != ''));
				},
				null,
				'hgExistingWarning.visible');

		result[20] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (warningMessage);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_NewASFilePopup_Label7.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(NewASFilePopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	@:meta(Embed(source = '/elements/images/iconExclamationRed.png'))
	private var _embed_mxml__elements_images_iconExclamationRed_png_1685577265:Class<Dynamic>;

	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def