/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      SearchInProjectPreviewPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/SearchInProjectPreviewPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package components.popup;

import mx.collections.ArrayCollection;
import mx.core.FlexGlobals;
import mx.events.FlexEvent;
import mx.managers.PopUpManager;
import spark.events.IndexChangeEvent;
import actionScripts.events.GeneralEvent;
import actionScripts.events.WorkerEvent;
import actionScripts.factory.FileLocation;
import actionScripts.locator.IDEWorker;
import actionScripts.utils.TextUtil;

import actionScripts.ui.marker.MarkerTextArea;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.popup.SearchInProjectPreviewPopupInnerClass0;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.List;
import spark.components.VGroup;

//  begin class def
class SearchInProjectPreviewPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _SearchInProjectPreviewPopup_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnReplace:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lstFiles:spark.components.List;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var marker1:actionScripts.ui.marker.MarkerTextArea;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var marker2:actionScripts.ui.marker.MarkerTextArea;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _SearchInProjectPreviewPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_SearchInProjectPreviewPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(SearchInProjectPreviewPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.title = 'Replace Text Matches';
		this.controlBarContent = [_SearchInProjectPreviewPopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_SearchInProjectPreviewPopup_Array2_c);

		// events
		this.addEventListener('initialize', ___SearchInProjectPreviewPopup_ResizableTitleWindow1_initialize);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 8 - 126

	@:meta(Bindable())public var filesCount:Int = 0;

	public var matchCount:Int = 0;
	public var replaceValue:String;
	public var replaceWithValue:String;
	public var isMatchCase:Bool = false;
	public var isRegexp:Bool = false;
	public var isEscapeChars:Bool = false;

	@:meta(Bindable())private var storedPathsForProbableReplace:ArrayCollection;

	private var worker:IDEWorker = IDEWorker.getInstance();

	override private function closeByCrossSign(event:Event):Void {
		worker.removeEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming);
		super.closeByCrossSign(event);
	}

	private function onInit(event:FlexEvent):Void {
		worker.addEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming, false, 0, true);
		worker.sendToWorker(WorkerEvent.GET_FILE_LIST, null);
	}

	private function onWorkerValueIncoming(event:GeneralEvent):Void {
		switch (Reflect.field(event.value, 'event')) {
			case WorkerEvent.GET_FILE_LIST:
				storedPathsForProbableReplace = new ArrayCollection(Reflect.field(event.value, 'value'));
				generateUI();
		}
	}

	private function generateUI():Void {
		if (storedPathsForProbableReplace == null || storedPathsForProbableReplace.length == 0) {
			return;
		}

		marker1.isEscapeChars = marker2.isEscapeChars = isEscapeChars;
		marker1.isMatchCase = marker2.isMatchCase = isMatchCase;
		marker1.isRegexp = marker2.isRegexp = isRegexp;

		// pre-load the first instance from the list
		updateMarkers(Std.string(Reflect.getProperty(storedPathsForProbableReplace, Std.string(0)).label));
	}

	private function onListSelectionChanged(event:IndexChangeEvent):Void {
		updateMarkers(Std.string(lstFiles.selectedItem.label));
	}

	private function updateMarkers(filePath:String):Void {
		var searchString:String = (isEscapeChars) ? TextUtil.escapeRegex(replaceValue) : replaceValue;
		var flags:String = 'g';
		if (!isMatchCase) {
			flags += 'i';
		}
		var searchRegExp:as3hx.Compat.Regex = new as3hx.Compat.Regex(searchString, flags);

		var tmpContent:String = Std.string(new FileLocation(filePath).fileBridge.read());
		marker1.text = tmpContent;
		marker1.searchRegExp = searchRegExp;
		marker1.highlight(replaceValue);

		marker2.text = tmpContent;
		marker2.searchRegExp = searchRegExp;
		marker2.highlight(replaceWithValue);
	}

	private function onReplaceSelectedFiles(event:MouseEvent):Void {
		var selectedFilesCount:Int = getSelectedFilesCount();
		if (selectedFilesCount == 0) {
			return;
		}

		// update file list array in worker
		worker.sendToWorker(WorkerEvent.SET_FILE_LIST, storedPathsForProbableReplace.source);

		// open progress smaller window
		var replacePopup:ReplaceProjectSearchPopup = AS3.as(PopUpManager.createPopUp(AS3.as(FlexGlobals.topLevelApplication, DisplayObject), ReplaceProjectSearchPopup, true), ReplaceProjectSearchPopup);
		replacePopup.replaceValue = replaceValue;
		replacePopup.replaceWithValue = replaceWithValue;
		replacePopup.matchCount = matchCount;
		replacePopup.filesCount = selectedFilesCount;
		replacePopup.isMatchCase = isMatchCase;
		replacePopup.isRegexp = isRegexp;
		replacePopup.isEscapeChars = isEscapeChars;
		replacePopup.isStartReplaceImmediately = true;

		PopUpManager.centerPopUp(replacePopup);
		closeThis();
	}

	private function getSelectedFilesCount():Int {
		var tmp:Int;
		for (i in storedPathsForProbableReplace) {
			if (AS3.as(Reflect.field(i, 'isSelected'), Bool)) {
				tmp++;
			}
		}

		return tmp;
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _SearchInProjectPreviewPopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Replace All Selected';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btnReplace_click);
		temp.id = 'btnReplace';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnReplace = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnReplace', btnReplace);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnReplace_click(event:flash.events.MouseEvent):Void {
		onReplaceSelectedFiles(event);
	}

	private function _SearchInProjectPreviewPopup_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_SearchInProjectPreviewPopup_VGroup1_c()];
		return cast temp;
	}

	private function _SearchInProjectPreviewPopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.mxmlContent = [_SearchInProjectPreviewPopup_Label1_i(), _SearchInProjectPreviewPopup_List1_i(), _SearchInProjectPreviewPopup_HGroup1_c(), _SearchInProjectPreviewPopup_HGroup2_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchInProjectPreviewPopup_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.id = '_SearchInProjectPreviewPopup_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_SearchInProjectPreviewPopup_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_SearchInProjectPreviewPopup_Label1', _SearchInProjectPreviewPopup_Label1);
		return temp;
	}

	private function _SearchInProjectPreviewPopup_List1_i():spark.components.List {
		var temp:spark.components.List = new spark.components.List();
		temp.percentWidth = 100.0;
		temp.styleName = 'multiLineList';
		temp.requireSelection = true;
		temp.labelField = 'label';
		temp.itemRenderer = _SearchInProjectPreviewPopup_ClassFactory1_c();
		temp.addEventListener('change', __lstFiles_change);
		temp.id = 'lstFiles';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lstFiles = temp;
		mx.binding.BindingManager.executeBindings(this, 'lstFiles', lstFiles);
		return temp;
	}

	private function _SearchInProjectPreviewPopup_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.popup.SearchInProjectPreviewPopupInnerClass0;
		temp.properties = {
					'outerDocument': this
				};
		return temp;
	}

	/**
	 * @private
	 **/
	public function __lstFiles_change(event:spark.events.IndexChangeEvent):Void {
		onListSelectionChanged(event);
	}

	private function _SearchInProjectPreviewPopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_SearchInProjectPreviewPopup_Label2_c(), _SearchInProjectPreviewPopup_Label3_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchInProjectPreviewPopup_Label2_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Original source:';
		temp.percentWidth = 50.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchInProjectPreviewPopup_Label3_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'Refactored source:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchInProjectPreviewPopup_HGroup2_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.mxmlContent = [_SearchInProjectPreviewPopup_MarkerTextArea1_i(), _SearchInProjectPreviewPopup_MarkerTextArea2_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchInProjectPreviewPopup_MarkerTextArea1_i():actionScripts.ui.marker.MarkerTextArea {
		var temp:actionScripts.ui.marker.MarkerTextArea = new actionScripts.ui.marker.MarkerTextArea();
		temp.percentWidth = 50.0;
		temp.percentHeight = 100.0;
		temp.addEventListener('VSCrollUpdate', __marker1_VSCrollUpdate);
		temp.addEventListener('HSCrollUpdate', __marker1_HSCrollUpdate);
		temp.id = 'marker1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		marker1 = temp;
		mx.binding.BindingManager.executeBindings(this, 'marker1', marker1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __marker1_VSCrollUpdate(event:actionScripts.events.GeneralEvent):Void {
		marker2.updateVScrollByNeighbour(event);
	}

	/**
	 * @private
	 **/
	public function __marker1_HSCrollUpdate(event:actionScripts.events.GeneralEvent):Void {
		marker2.updateHScrollByNeighbour(event);
	}

	private function _SearchInProjectPreviewPopup_MarkerTextArea2_i():actionScripts.ui.marker.MarkerTextArea {
		var temp:actionScripts.ui.marker.MarkerTextArea = new actionScripts.ui.marker.MarkerTextArea();
		temp.percentWidth = 50.0;
		temp.percentHeight = 100.0;
		temp.isRefactoredView = true;
		temp.addEventListener('VSCrollUpdate', __marker2_VSCrollUpdate);
		temp.addEventListener('HSCrollUpdate', __marker2_HSCrollUpdate);
		temp.id = 'marker2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		marker2 = temp;
		mx.binding.BindingManager.executeBindings(this, 'marker2', marker2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __marker2_VSCrollUpdate(event:actionScripts.events.GeneralEvent):Void {
		marker1.updateVScrollByNeighbour(event);
	}

	/**
	 * @private
	 **/
	public function __marker2_HSCrollUpdate(event:actionScripts.events.GeneralEvent):Void {
		marker1.updateHScrollByNeighbour(event);
	}

	/**
	 * @private
	 **/
	public function ___SearchInProjectPreviewPopup_ResizableTitleWindow1_initialize(event:mx.events.FlexEvent):Void {
		onInit(event);
	}

	//  binding mgmt
	private function _SearchInProjectPreviewPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = 'Changes can be performed in ' + (filesCount) + ' files:';
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_SearchInProjectPreviewPopup_Label1.text');

		result[1] = new mx.binding.Binding(this,
				function():Float {
					return (this.height * .2);
				},
				null,
				'lstFiles.height');

		result[2] = new mx.binding.Binding(this,
				function():mx.collections.IList {
					return (storedPathsForProbableReplace);
				},
				null,
				'lstFiles.dataProvider');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(SearchInProjectPreviewPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def