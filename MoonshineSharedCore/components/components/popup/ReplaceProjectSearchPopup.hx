/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      ReplaceProjectSearchPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/ReplaceProjectSearchPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package components.popup;

import mx.core.FlexGlobals;
import mx.events.FlexEvent;
import mx.managers.PopUpManager;
import actionScripts.events.GeneralEvent;
import actionScripts.events.WorkerEvent;
import actionScripts.locator.IDEModel;
import actionScripts.locator.IDEWorker;
import actionScripts.plugin.search.SearchPlugin;
import actionScripts.ui.editor.BasicTextEditor;
import elements.skins.IDEProgressBarSkin;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.ProgressBar;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.states.AddItems;
import mx.states.State;
import mx.styles.*;
import spark.components.Button;
import spark.components.Label;
import spark.components.VGroup;

@:meta(States(name = 'default', name = 'progress'))
//  begin class def
class ReplaceProjectSearchPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _ReplaceProjectSearchPopup_Label1:spark.components.Label;

	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _ReplaceProjectSearchPopup_Label2:spark.components.Label;

	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _ReplaceProjectSearchPopup_Spacer2:mx.controls.Spacer;

	@:meta(Inspectable())
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _ReplaceProjectSearchPopup_VGroup1:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnPreview:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnReplace:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var pbProgress:mx.controls.ProgressBar;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtReplace:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtReplaceWith:actionScripts.plugin.findreplace.view.PromptTextInput;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _ReplaceProjectSearchPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_ReplaceProjectSearchPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(ReplaceProjectSearchPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 400;
		this.minWidth = 250;
		this.minHeight = 150;
		this.autoLayout = true;
		this.controlBarContent = [_ReplaceProjectSearchPopup_Spacer1_c(), _ReplaceProjectSearchPopup_Button1_i(), _ReplaceProjectSearchPopup_Button2_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_ReplaceProjectSearchPopup_Array3_c);
		this.currentState = 'default';

		// events
		this.addEventListener('creationComplete', ___ReplaceProjectSearchPopup_ResizableTitleWindow1_creationComplete);

		var _ReplaceProjectSearchPopup_Label2_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ReplaceProjectSearchPopup_Label2_i);
		var _ReplaceProjectSearchPopup_ProgressBar1_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ReplaceProjectSearchPopup_ProgressBar1_i);
		var _ReplaceProjectSearchPopup_PromptTextInput1_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ReplaceProjectSearchPopup_PromptTextInput1_i);
		var _ReplaceProjectSearchPopup_PromptTextInput2_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ReplaceProjectSearchPopup_PromptTextInput2_i);
		var _ReplaceProjectSearchPopup_Spacer2_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ReplaceProjectSearchPopup_Spacer2_i);

		states = [
				new State({
					'name': 'default',
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _ReplaceProjectSearchPopup_PromptTextInput2_factory,
								'destination': '_ReplaceProjectSearchPopup_VGroup1',
								'propertyName': 'mxmlContent',
								'position': 'after',
								'relativeTo': ['_ReplaceProjectSearchPopup_Label1']
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _ReplaceProjectSearchPopup_PromptTextInput1_factory,
								'destination': '_ReplaceProjectSearchPopup_VGroup1',
								'propertyName': 'mxmlContent',
								'position': 'after',
								'relativeTo': ['_ReplaceProjectSearchPopup_Label1']
							})
			]
				}),
				new State({
					'name': 'progress',
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _ReplaceProjectSearchPopup_Spacer2_factory,
								'destination': '_ReplaceProjectSearchPopup_VGroup1',
								'propertyName': 'mxmlContent',
								'position': 'after',
								'relativeTo': ['_ReplaceProjectSearchPopup_Label1']
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _ReplaceProjectSearchPopup_ProgressBar1_factory,
								'destination': '_ReplaceProjectSearchPopup_VGroup1',
								'propertyName': 'mxmlContent',
								'position': 'after',
								'relativeTo': ['_ReplaceProjectSearchPopup_Label1']
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _ReplaceProjectSearchPopup_Label2_factory,
								'destination': '_ReplaceProjectSearchPopup_VGroup1',
								'propertyName': 'mxmlContent',
								'position': 'after',
								'relativeTo': ['_ReplaceProjectSearchPopup_Label1']
							})
			]
				})
		];

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 31 - 162

	@:meta(Bindable())public var replaceValue:String;
	@:meta(Bindable())public var matchCount:Int = 0;
	@:meta(Bindable())public var filesCount:Int = 0;

	public var isMatchCase:Bool = false;
	public var isRegexp:Bool = false;
	public var isEscapeChars:Bool = false;
	public var replaceWithValue:String;
	public var isStartReplaceImmediately:Bool = false;

	@:meta(Bindable())private var matchCountProcessed:Int = 0;

	private var worker:IDEWorker = IDEWorker.getInstance();
	private var model:IDEModel = IDEModel.getInstance();
	private var isWorking:Bool = false;
	private var isReplaceApplied:Bool = false;

	private function onCreationCompletes(event:FlexEvent):Void {
		if (isStartReplaceImmediately && replaceWithValue != null) {
			txtReplaceWith.text = replaceWithValue;
			onChangeButton(null);
		}
	}

	private function onChangeButton(event:MouseEvent):Void {
		// probable termination
		if (currentState == 'progress') {
			closeThis();
			return;
		}

		// validation check for Enter key
		if (StringTools.trim(txtReplaceWith.text).length == 0) {
			return;
		}

		replaceWithValue = txtReplaceWith.text;
		btnReplace.enabled = false;
		currentState = 'progress';
		pbProgress.setProgress(0, filesCount);
		pbProgress.label = 'Replaced (%)';
		isWorking = true;

		worker.addEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming, false, 0, true);
		worker.sendToWorker(WorkerEvent.REPLACE_FILE_WITH_VALUE, getReplaceObject());
	}

	private function getReplaceObject():Dynamic {
		return {
			'valueToSearch': replaceValue,
			'valueToReplace': replaceWithValue,
			'isMatchCase': isMatchCase,
			'isRegexp': isRegexp,
			'isEscapeChars': isEscapeChars
		};
	}

	override private function closeByCrossSign(event:Event):Void {
		if (isWorking) {
			return;
		}

		SearchPlugin.IS_REPLACE_APPLIED = isReplaceApplied;
		worker.removeEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming);
		super.closeByCrossSign(event);
	}

	private function onWorkerValueIncoming(event:GeneralEvent):Void {
		switch (Reflect.field(event.value, 'event')) {
			case WorkerEvent.FILE_PROCESSED_COUNT:
				pbProgress.setProgress(++matchCountProcessed, filesCount);
				updateOpenEditor(AS3.string(Reflect.field(event.value, 'value')));
			case WorkerEvent.PROCESS_ENDS:
				btnPreview.enabled = false;
				btnReplace.label = 'Finish';
				btnReplace.enabled = true;
				isWorking = false;
				isReplaceApplied = true;
		}
	}

	private function updateOpenEditor(value:String):Void {
		for (item in model.editors) {
			if (Std.is(item, BasicTextEditor) && BasicTextEditor(item).currentFile.fileBridge.nativePath == value) {
				var editor:BasicTextEditor = AS3.as(item, BasicTextEditor);
				var lastScrolledLineIndex:Int = editor.editor.model.itemRenderersInUse[0].dataIndex;
				editor.reload();
				editor.callLater(editor.scrollTo, [lastScrolledLineIndex]);
				break;
			}
		}
	}

	private function openPreview():Void {
		// validation check for Enter key
		if (StringTools.trim(txtReplaceWith.text).length == 0) {
			return;
		}

		var tmpPopup:SearchInProjectPreviewPopup = AS3.as(PopUpManager.createPopUp(AS3.as(FlexGlobals.topLevelApplication, DisplayObject), SearchInProjectPreviewPopup, true), SearchInProjectPreviewPopup);
		tmpPopup.replaceValue = replaceValue;
		tmpPopup.replaceWithValue = txtReplaceWith.text;
		tmpPopup.matchCount = matchCount;
		tmpPopup.filesCount = filesCount;
		tmpPopup.isMatchCase = isMatchCase;
		tmpPopup.isRegexp = isRegexp;
		tmpPopup.isEscapeChars = isEscapeChars;
		tmpPopup.width = screen.width * .6;
		tmpPopup.height = screen.height * .8;
		PopUpManager.centerPopUp(tmpPopup);
		closeThis();
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _ReplaceProjectSearchPopup_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _ReplaceProjectSearchPopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Preview';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btnPreview_click);
		temp.id = 'btnPreview';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnPreview = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnPreview', btnPreview);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnPreview_click(event:flash.events.MouseEvent):Void {
		openPreview();
	}

	private function _ReplaceProjectSearchPopup_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Replace';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btnReplace_click);
		temp.id = 'btnReplace';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnReplace = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnReplace', btnReplace);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnReplace_click(event:flash.events.MouseEvent):Void {
		onChangeButton(event);
	}

	private function _ReplaceProjectSearchPopup_Array3_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_ReplaceProjectSearchPopup_VGroup1_i()];
		return cast temp;
	}

	private function _ReplaceProjectSearchPopup_VGroup1_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 11;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.mxmlContent = [_ReplaceProjectSearchPopup_Label1_i()];
		temp.id = '_ReplaceProjectSearchPopup_VGroup1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ReplaceProjectSearchPopup_VGroup1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ReplaceProjectSearchPopup_VGroup1', _ReplaceProjectSearchPopup_VGroup1);
		return temp;
	}

	private function _ReplaceProjectSearchPopup_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.id = '_ReplaceProjectSearchPopup_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ReplaceProjectSearchPopup_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ReplaceProjectSearchPopup_Label1', _ReplaceProjectSearchPopup_Label1);
		return temp;
	}

	private function _ReplaceProjectSearchPopup_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.enabled = false;
		temp.id = 'txtReplace';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtReplace = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtReplace', txtReplace);
		return temp;
	}

	private function _ReplaceProjectSearchPopup_PromptTextInput2_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'With';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.addEventListener('enter', __txtReplaceWith_enter);
		temp.addEventListener('creationComplete', __txtReplaceWith_creationComplete);
		temp.id = 'txtReplaceWith';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtReplaceWith = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtReplaceWith', txtReplaceWith);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtReplaceWith_enter(event:mx.events.FlexEvent):Void {
		onChangeButton(null);
	}

	/**
	 * @private
	 **/
	public function __txtReplaceWith_creationComplete(event:mx.events.FlexEvent):Void {
		txtReplaceWith.setFocus();
	}

	private function _ReplaceProjectSearchPopup_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.setStyle('fontWeight', 'bold');
		temp.setStyle('paddingTop', 10);
		temp.id = '_ReplaceProjectSearchPopup_Label2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ReplaceProjectSearchPopup_Label2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ReplaceProjectSearchPopup_Label2', _ReplaceProjectSearchPopup_Label2);
		return temp;
	}

	private function _ReplaceProjectSearchPopup_ProgressBar1_i():mx.controls.ProgressBar {
		var temp:mx.controls.ProgressBar = new mx.controls.ProgressBar();
		temp.percentWidth = 100.0;
		temp.mode = 'manual';
		temp.labelPlacement = 'right';
		temp.setStyle('fontSize', 11);
		temp.setStyle('labelWidth', 0);
		temp.setStyle('barSkin', elements.skins.IDEProgressBarSkin);
		temp.id = 'pbProgress';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		pbProgress = temp;
		mx.binding.BindingManager.executeBindings(this, 'pbProgress', pbProgress);
		return temp;
	}

	private function _ReplaceProjectSearchPopup_Spacer2_i():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.height = 7;
		temp.id = '_ReplaceProjectSearchPopup_Spacer2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ReplaceProjectSearchPopup_Spacer2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ReplaceProjectSearchPopup_Spacer2', _ReplaceProjectSearchPopup_Spacer2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ReplaceProjectSearchPopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes(event);
	}

	//  binding mgmt
	private function _ReplaceProjectSearchPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = ('Replacing ' + matchCount + ' matches in ' + filesCount + ' file(s):');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_ReplaceProjectSearchPopup_Label1.text');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'txtReplace.text', 'replaceValue');

		result[2] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = 'File(s) processed: ' + (matchCountProcessed);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_ReplaceProjectSearchPopup_Label2.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(ReplaceProjectSearchPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def