/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      QuitPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/QuitPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package components.popup;

import mx.events.FlexEvent;
import actionScripts.valueObjects.ConstantsCoreVO;
import elements.skins.DarkButtonSkin;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexDisplayObject;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.Label;
import spark.layouts.VerticalLayout;

@:meta(Event(name = 'quitConfirmed', type = 'flash.events.Event'))
//  begin class def
class QuitPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _QuitPopup_CheckBox1:spark.components.CheckBox;

	/**
	 * @private
	 **/
	public var _QuitPopup_Label1:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var exitButton:spark.components.Button;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _QuitPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_QuitPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(QuitPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.title = 'Confirm Exit';
		this.width = 310;
		this.height = 150;
		this.layout = _QuitPopup_VerticalLayout1_c();
		this.controlBarContent = [_QuitPopup_Spacer1_c(), _QuitPopup_Button1_c(), _QuitPopup_Button2_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_QuitPopup_Array2_c);

		// events
		this.addEventListener('creationComplete', ___QuitPopup_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 24 - 55

	@:meta(Bindable())
	private var _doNotAskMeAgain:Bool = false;

	public var doNotAskMeAgain(get, never):Bool;
	private function get_doNotAskMeAgain():Bool {
		return _doNotAskMeAgain;
	}

	private function onExitButtonClick(event:MouseEvent):Void {
		dispatchEvent(new Event('quitConfirmed'));
		closeThis();
	}

	private function onCancelButtonClick(event:MouseEvent):Void {
		closeThis();
	}

	private function onQuitPopupCreationComplete(event:FlexEvent):Void {
		removeEventListener(FlexEvent.CREATION_COMPLETE, onQuitPopupCreationComplete);
		exitButton.setStyle('skinClass', DarkButtonSkin);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _QuitPopup_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.verticalAlign = 'middle';
		temp.horizontalAlign = 'left';
		temp.paddingLeft = 10;
		temp.paddingRight = 10;
		return temp;
	}

	private function _QuitPopup_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _QuitPopup_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Cancel';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___QuitPopup_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___QuitPopup_Button1_click(event:flash.events.MouseEvent):Void {
		onCancelButtonClick(event);
	}

	private function _QuitPopup_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Exit';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __exitButton_click);
		temp.id = 'exitButton';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		exitButton = temp;
		mx.binding.BindingManager.executeBindings(this, 'exitButton', exitButton);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __exitButton_click(event:flash.events.MouseEvent):Void {
		onExitButtonClick(event);
	}

	private function _QuitPopup_Array2_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [_QuitPopup_Label1_i(), _QuitPopup_CheckBox1_i()];
		return temp;
	}

	private function _QuitPopup_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.setStyle('fontWeight', 'bold');
		temp.id = '_QuitPopup_Label1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_QuitPopup_Label1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_QuitPopup_Label1', _QuitPopup_Label1);
		return temp;
	}

	private function _QuitPopup_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Do not ask me again';
		temp.left = 10;
		temp.id = '_QuitPopup_CheckBox1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_QuitPopup_CheckBox1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_QuitPopup_CheckBox1', _QuitPopup_CheckBox1);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___QuitPopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onQuitPopupCreationComplete(event);
	}

	//  binding mgmt
	private function _QuitPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'this.defaultButton', 'exitButton');

		result[1] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = 'Are you sure you want to exit ' + (ConstantsCoreVO.MOONSHINE_IDE_LABEL) + '?';
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_QuitPopup_Label1.text');

		result[2] = new mx.binding.Binding(this,
				function():Bool {
					return _doNotAskMeAgain;
				},
				null,
				'_QuitPopup_CheckBox1.selected');

		result[3] = new mx.binding.Binding(this,
				function():Dynamic {
					return _QuitPopup_CheckBox1.selected;
				},
				function(_sourceFunctionReturnValue:Dynamic):Void {
					_doNotAskMeAgain = AS3.as(_sourceFunctionReturnValue, Bool);
				},
				'_doNotAskMeAgain');

		Reflect.setField(result[3], 'twoWayCounterpart', result[2]);

		Reflect.setField(result[2], 'isTwoWayPrimary', true);
		Reflect.setField(result[2], 'twoWayCounterpart', result[3]);

		return result;
	}

	private function _QuitPopup_bindingExprs():Void {
		_doNotAskMeAgain = AS3.as(_QuitPopup_CheckBox1.selected, Bool);
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(QuitPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def