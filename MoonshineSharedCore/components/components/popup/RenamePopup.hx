/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      RenamePopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/RenamePopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package components.popup;

import mx.events.FlexEvent;
import spark.events.TextOperationEvent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.NewFileEvent;
import actionScripts.factory.FileLocation;
import actionScripts.ui.menu.MenuPlugin;
import actionScripts.valueObjects.FileWrapper;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.HGroup;
import spark.components.Image;
import spark.components.Label;
import spark.components.VGroup;

@:meta(Event(name = 'EVENT_FILE_RENAMED', type = 'actionScripts.events.NewFileEvent'))
//  begin class def
class RenamePopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	/**
	 * @private
	 **/
	public var _RenamePopup_Label2:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnChange:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var hgExistingWarning:spark.components.HGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtFileName:actionScripts.plugin.findreplace.view.PromptTextInput;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _RenamePopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_RenamePopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(RenamePopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 350;
		this.minWidth = 250;
		this.autoLayout = true;
		this.controlBarContent = [_RenamePopup_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_RenamePopup_Array2_c);

		// events
		this.addEventListener('creationComplete', ___RenamePopup_ResizableTitleWindow1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 34 - 129

	public var wrapperOfFolderLocation:FileWrapper;

	@:meta(Bindable())private var fileExtension:String;
	@:meta(Bindable())private var modifiedName:String = '';
	@:meta(Bindable())private var originalFileName:String;

	override private function closeByCrossSign(event:Event):Void {
		doBeforeExit();
		super.closeByCrossSign(event);
	}

	override private function onResizeKeyDownEvent(event:KeyboardEvent):Void {
		doBeforeExit();
		super.onResizeKeyDownEvent(event);
	}

	private function doBeforeExit():Void {
		GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_ENABLE_STATE));
	}

	private function onChangeButton(event:MouseEvent):Void {
		// validation check for Enter key
		if (!AS3.as(btnChange.enabled, Bool)) {
			return;
		}

		var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_FILE_RENAMED, null, null, wrapperOfFolderLocation);
		tmpEvent.fileName = txtFileName.text + fileExtension;
		dispatchEvent(tmpEvent);

		doBeforeExit();
		super.closeThis();
	}

	private function onCreationCompletes(event:FlexEvent):Void {
		minHeight = height;
		if (wrapperOfFolderLocation != null) {
			txtFileName.text = Std.string(Reflect.getProperty(wrapperOfFolderLocation.file.fileBridge.name.split('.'), Std.string(0)));
			txtFileName.setFocus();
			txtFileName.selectRange(0, txtFileName.text.length);
			originalFileName = txtFileName.text;

			if (AS3.as(wrapperOfFolderLocation.file.fileBridge.isDirectory, Bool)) {
				fileExtension = '';
			} else {
				fileExtension = Std.string(wrapperOfFolderLocation.file.fileBridge.extension.toLowerCase());
				if (fileExtension == 'as' || fileExtension == 'mxml') {
					txtFileName.restrict = '0-9A-Za-z_.';
				}
				fileExtension = '.' + fileExtension;
			}

			this.title = ((fileExtension == '')) ? 'Rename Package' : 'Rename Class';
		}

		GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));
	}

	private function onNameChanged(event:TextOperationEvent):Void {
		// @note
		// for some reason PromptTextInput.text is not binding properly
		// to other Flex UI component, i.e. Label
		// it shows only the origianl set text to PromptTextInput.text if
		// binded to a label component, thus:
		modifiedName = txtFileName.text;

		if (txtFileName.text == '') {
			btnChange.enabled = false;
		} else {
			var targetFile:FileLocation = wrapperOfFolderLocation.file.fileBridge.parent.fileBridge.resolvePath(txtFileName.text + fileExtension);
			targetFile.fileBridge.canonicalize();

			btnChange.enabled = !targetFile.fileBridge.exists;
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _RenamePopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Change';
		temp.styleName = 'darkButton';
		temp.enabled = false;
		temp.addEventListener('click', __btnChange_click);
		temp.id = 'btnChange';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnChange = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnChange', btnChange);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnChange_click(event:flash.events.MouseEvent):Void {
		onChangeButton(event);
	}

	private function _RenamePopup_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_RenamePopup_VGroup1_c()];
		return cast temp;
	}

	private function _RenamePopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.mxmlContent = [_RenamePopup_Label1_c(), _RenamePopup_PromptTextInput1_i(), _RenamePopup_HGroup1_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _RenamePopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'New Name:';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _RenamePopup_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Rename To';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.restrict = '0-9A-Za-z._\\-';
		temp.addEventListener('change', __txtFileName_change);
		temp.addEventListener('enter', __txtFileName_enter);
		temp.id = 'txtFileName';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtFileName = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtFileName', txtFileName);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtFileName_change(event:spark.events.TextOperationEvent):Void {
		onNameChanged(event);
	}

	/**
	 * @private
	 **/
	public function __txtFileName_enter(event:mx.events.FlexEvent):Void {
		onChangeButton(null);
	}

	private function _RenamePopup_HGroup1_i():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_RenamePopup_Image1_c(), _RenamePopup_Label2_i()];
		temp.id = 'hgExistingWarning';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		hgExistingWarning = temp;
		mx.binding.BindingManager.executeBindings(this, 'hgExistingWarning', hgExistingWarning);
		return temp;
	}

	private function _RenamePopup_Image1_c():spark.components.Image {
		var temp:spark.components.Image = new spark.components.Image();
		temp.source = _embed_mxml__elements_images_iconExclamationRed_png_1685577265;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _RenamePopup_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.percentWidth = 100.0;
		temp.id = '_RenamePopup_Label2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_RenamePopup_Label2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_RenamePopup_Label2', _RenamePopup_Label2);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___RenamePopup_ResizableTitleWindow1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes(event);
	}

	//  binding mgmt
	private function _RenamePopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Bool {
					return (!AS3.as(btnChange.enabled, Bool) && modifiedName != '' && modifiedName != originalFileName);
				},
				null,
				'hgExistingWarning.visible');

		result[1] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (modifiedName + fileExtension + ' is already exists.');
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'_RenamePopup_Label2.text');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(RenamePopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	@:meta(Embed(source = '/elements/images/iconExclamationRed.png'))
	private var _embed_mxml__elements_images_iconExclamationRed_png_1685577265:Class<Dynamic>;

	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def