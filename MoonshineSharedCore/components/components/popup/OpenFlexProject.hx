/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      OpenFlexProject
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/OpenFlexProject.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package components.popup;

import mx.collections.ArrayList;
import mx.controls.Alert;
import mx.controls.Image;
import spark.effects.Move;
import spark.effects.Resize;
import actionScripts.controllers.DataAgent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.events.ProjectEvent;
import actionScripts.locator.IDEModel;
import actionScripts.plugin.actionscript.as3project.vo.MXMLProjectVO;
import actionScripts.utils.UtilsCore;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.ProjectReferenceVO;
import actionScripts.valueObjects.ProjectVO;
import actionScripts.valueObjects.URLDescriptorVO;

import flash.errors.Error;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.popup.Authentication;
import components.skins.ResizableTitleWindowSkin;
import components.views.project.ProjectListItemRenderer;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.List;
import spark.components.VGroup;
import spark.layouts.VerticalLayout;

//  begin class def
class OpenFlexProject extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btn_load:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var login:components.popup.Authentication;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var lst_projects:spark.components.List;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var vgLogin:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var vgProjects:spark.components.VGroup;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _OpenFlexProject_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_OpenFlexProjectWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(OpenFlexProject, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 400;
		this.height = 160;
		this.controlBarContent = [_OpenFlexProject_Button1_i()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_OpenFlexProject_Array2_c);

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 29 - 267

	public static inline var PROJECT_ADDED:String = 'PROJECT_ADDED';
	public static inline var PROJECT_CANCELED:String = 'PROJECT_CANCELED';

	public var jumptToLoadProject:Dynamic;
	private var loader:DataAgent;

	private var model:IDEModel = IDEModel.getInstance();
	private var effectMove:Move;
	private var effectResize:Resize;
	private var loaderIcon:Image;

	override private function closeByCrossSign(event:Event):Void {
		doBeforeExit();
		super.closeByCrossSign(event);
	}

	private function doBeforeExit():Void {
		if (lst_projects != null && AS3.as(lst_projects.selectedItem, Bool)) {
			lst_projects.selectedItem.loading = false;
			ConstantsCoreVO.FLEX_PROJECTS.itemUpdated(lst_projects.selectedItem);
		}
	}

	private function getProjectListFromServer():Void {
		ConstantsCoreVO.FLEX_PROJECTS = new ArrayList();
		loaderIcon = new Image();
		loaderIcon.source = new ConstantsCoreVO.loaderIcon();
		loaderIcon.width = loaderIcon.height = 10;
		this.addElement(loaderIcon);
		loaderIcon.y = ((this.height - loaderIcon.height) / 2) - 10;
		loaderIcon.x = ((this.width - loaderIcon.width) / 2) + 50;

		loader = new DataAgent(URLDescriptorVO.PROJECT_DIR, onDirectoriesLoaded, onDirectoryLoadFault);
	}

	private function onDirectoriesLoaded(value:Dynamic, message:String = null):Void {
		loader = null;
		if (loaderIcon != null) {
			this.removeElement(loaderIcon);
			loaderIcon = null;
		}

		// probable termination
		if (!AS3.as(value, Bool)) {
			return;
		}

		var jsonString:String = Std.string(value);
		var jsonObj:Dynamic;
		try {
			jsonObj = haxe.Json.parse(jsonString);
		} catch (e:Error) {
			if (jsonString != null) {
				Alert.show(jsonString, 'Error!');
			}
			return;
		}

		var tmpReference:ProjectReferenceVO;
		for (i in as3hx.Compat.each(Reflect.field(jsonObj, 'children'))) {
			if (Std.string(Reflect.field(i, 'isDirectory')) == 'true') {
				tmpReference = new ProjectReferenceVO();
				tmpReference.name = Std.string(Std.string(Reflect.field(i, 'name')));
				tmpReference.path = Std.string(Std.string(Reflect.field(i, 'nativePath')));

				ConstantsCoreVO.FLEX_PROJECTS.addItem(tmpReference);
			}
		}
	}

	private function onDirectoryLoadFault(message:String):Void {
		loader = null;
		if (loaderIcon != null) {
			this.removeElement(loaderIcon);
			loaderIcon = null;
		}
	}

	private function onProjectLoadRequest(event:MouseEvent):Void {
		if (!AS3.as(lst_projects.selectedItem, Bool)) {
			Alert.show('Please, selet a Project to Open.', 'Error!');
		} else {
			// don't open a project twice
			for (pr in model.projects) {
				if (Reflect.field(Reflect.field(Reflect.field(pr, 'folderLocation'), 'fileBridge'), 'nativePath') == URLDescriptorVO.PROJECT_DIR) {
					Alert.show('Project already opened. Ignoring.', 'Note!');
					return;
				}
			}

			btn_load.enabled = false;
			lst_projects.selectedItem.loading = true;
			ConstantsCoreVO.FLEX_PROJECTS.itemUpdated(lst_projects.selectedItem);

			if (AS3.as(ConstantsCoreVO.IS_AUTH_REQUIRED, Bool)) {
				sendRequestToLoad();
			} else {
				loader = new DataAgent(URLDescriptorVO.LOGIN_TEST, onProjectLoadSuccess, onLoginTestFault, null);
			}
		}
	}

	private function onProjectLoadSuccess(value:Dynamic):Void {
		loader = null;
		lst_projects.selectedItem.loading = false;
		ConstantsCoreVO.FLEX_PROJECTS.itemUpdated(lst_projects.selectedItem);

		var xData:FastXML = FastXML.parse(Std.string(value));
		if (xData == null) {
			return;
		}
		if (xData.node.status == Authentication.SESSION_UNAUTHENTICATED || xData.node.username == 'null' || xData.node.username == 'anonymous') {
			title = 'Login to Proceed';
			vgLogin.visible = vgLogin.includeInLayout = true;
			vgProjects.visible = vgProjects.includeInLayout = false;
			return;
		}

		sendRequestToLoad();
	}

	private function sendRequestToLoad():Void {
		var projectPath:String = (AS3.as(jumptToLoadProject, Bool)) ? AS3.string(Reflect.field(jumptToLoadProject, 'path')) : URLDescriptorVO.PROJECT_DIR + lst_projects.selectedItem.path + lst_projects.selectedItem.startIn;

		// do not open an already opened project
		if (UtilsCore.checkProjectIfAlreadyOpened(projectPath)) {
			btn_load.enabled = true;
			return;
		}

		var activeProj:MXMLProjectVO = new MXMLProjectVO(projectPath, (AS3.as(jumptToLoadProject, Bool)) ? AS3.string(Reflect.field(jumptToLoadProject, 'name')) : Std.string(lst_projects.selectedItem.name));
		activeProj.projectName = (AS3.as(jumptToLoadProject, Bool)) ? AS3.string(Reflect.field(jumptToLoadProject, 'name')) : Std.string(lst_projects.selectedItem.name);
		activeProj.projectRemotePath = '';
		model.activeProject = activeProj;
		GlobalEventDispatcher.getInstance().dispatchEvent(
				new ProjectEvent(ProjectEvent.ADD_PROJECT, model.activeProject)
		);

		// just to makeup some visual distruaction
		super.closeThis();
	}

	private function onLoginTestFault(result:Dynamic):Void {
		onAuthTestFault(null);
	}

	private function onUserLoginSuccess(event:Event):Void {
		// don't increase the window size again when
		// returned from project selection window -
		// usually when session expired found in project
		// selection window and login state again loaded
		if (lst_projects == null) {
			effectMove = new Move();
			effectResize = new Resize();

			effectMove.yTo = (this.stage.stageHeight - (this.height + 50)) / 2;
			effectMove.xTo = (this.stage.stageWidth - (this.width + 100)) / 2;

			effectResize.heightTo = this.height + 50;
			effectResize.widthTo = this.width + 100;

			effectResize.play([this]);
			effectMove.play([this]);
		}

		// if we need to load any project immediately by injected parameter
		if (AS3.as(jumptToLoadProject, Bool)) {
			sendRequestToLoad();
		} else {
			vgLogin.visible = vgLogin.includeInLayout = false;
			vgProjects.visible = vgProjects.includeInLayout = true;
			getProjectListFromServer();
		}
	}

	private function onLoginScreenLoads(event:Event):Void {
		title = 'Login to Proceed';
		effectMove = new Move();
		effectResize = new Resize();

		effectMove.yTo = (this.stage.stageHeight - (this.height + 20)) / 2;
		effectResize.heightTo = this.height + 20;

		effectResize.play([this]);
		effectMove.play([this]);
	}

	private function onAuthTestFault(event:Event):Void {
		// for project list
		if (lst_projects != null) {
			lst_projects.selectedItem.loading = false;
			ConstantsCoreVO.FLEX_PROJECTS.itemUpdated(lst_projects.selectedItem);
			btn_load.enabled = true;
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _OpenFlexProject_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Load';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', __btn_load_click);
		temp.id = 'btn_load';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btn_load = temp;
		mx.binding.BindingManager.executeBindings(this, 'btn_load', btn_load);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btn_load_click(event:flash.events.MouseEvent):Void {
		onProjectLoadRequest(event);
	}

	private function _OpenFlexProject_Array2_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_OpenFlexProject_VGroup1_i(), _OpenFlexProject_VGroup2_i()];
		return cast temp;
	}

	private function _OpenFlexProject_VGroup1_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.verticalCenter = 0;
		temp.autoLayout = true;
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_OpenFlexProject_Authentication1_i()];
		temp.addEventListener('addedToStage', __vgLogin_addedToStage);
		temp.id = 'vgLogin';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		vgLogin = temp;
		mx.binding.BindingManager.executeBindings(this, 'vgLogin', vgLogin);
		return temp;
	}

	private function _OpenFlexProject_Authentication1_i():components.popup.Authentication {
		var temp:components.popup.Authentication = new components.popup.Authentication();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.isCancelShow = false;
		temp.addEventListener('SUCCESS', __login_SUCCESS);
		temp.addEventListener('CANCEL', __login_CANCEL);
		temp.addEventListener('LOADING_LOGIN', __login_LOADING_LOGIN);
		temp.addEventListener('AUTH_TEST_FAULT', __login_AUTH_TEST_FAULT);
		temp.id = 'login';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		login = temp;
		mx.binding.BindingManager.executeBindings(this, 'login', login);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __login_SUCCESS(event:flash.events.Event):Void {
		onUserLoginSuccess(event);
	}

	/**
	 * @private
	 **/
	public function __login_CANCEL(event:flash.events.Event):Void {
		doBeforeExit();super.closeThis();
	}

	/**
	 * @private
	 **/
	public function __login_LOADING_LOGIN(event:flash.events.Event):Void {
		onLoginScreenLoads(event);
	}

	/**
	 * @private
	 **/
	public function __login_AUTH_TEST_FAULT(event:flash.events.Event):Void {
		onAuthTestFault(event);
	}

	/**
	 * @private
	 **/
	public function __vgLogin_addedToStage(event:flash.events.Event):Void {
		title = 'Select a Server';
	}

	private function _OpenFlexProject_VGroup2_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 13;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.horizontalAlign = 'center';
		temp.visible = false;
		temp.includeInLayout = false;
		temp.mxmlContent = [_OpenFlexProject_List1_i()];
		temp.addEventListener('addedToStage', __vgProjects_addedToStage);
		temp.id = 'vgProjects';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		vgProjects = temp;
		mx.binding.BindingManager.executeBindings(this, 'vgProjects', vgProjects);
		return temp;
	}

	private function _OpenFlexProject_List1_i():spark.components.List {
		var temp:spark.components.List = new spark.components.List();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.doubleClickEnabled = true;
		temp.labelField = 'name';
		temp.itemRenderer = _OpenFlexProject_ClassFactory1_c();
		temp.layout = _OpenFlexProject_VerticalLayout1_c();
		temp.setStyle('color', 15658734);
		temp.setStyle('borderVisible', false);
		temp.addEventListener('doubleClick', __lst_projects_doubleClick);
		temp.id = 'lst_projects';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		lst_projects = temp;
		mx.binding.BindingManager.executeBindings(this, 'lst_projects', lst_projects);
		return temp;
	}

	private function _OpenFlexProject_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.views.project.ProjectListItemRenderer;
		return temp;
	}

	private function _OpenFlexProject_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.gap = 0;
		temp.rowHeight = 18;
		temp.horizontalAlign = 'contentJustify';
		temp.requestedRowCount = 10;
		return temp;
	}

	/**
	 * @private
	 **/
	public function __lst_projects_doubleClick(event:flash.events.MouseEvent):Void {
		onProjectLoadRequest(event);
	}

	/**
	 * @private
	 **/
	public function __vgProjects_addedToStage(event:flash.events.Event):Void {
		title = 'Select Project to Open';
	}

	//  binding mgmt
	private function _OpenFlexProject_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():mx.collections.IList {
					return (ConstantsCoreVO.FLEX_PROJECTS);
				},
				null,
				'lst_projects.dataProvider');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(OpenFlexProject)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def