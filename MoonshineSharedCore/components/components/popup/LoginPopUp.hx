/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      LoginPopUp
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/LoginPopUp.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:50 MSK
 */

package components.popup;

import spark.components.Image;
import spark.effects.Move;
import spark.effects.Resize;
import actionScripts.controllers.DataAgent;
import actionScripts.locator.IDEModel;
import components.skins.ResizableTitleWindowSkin;

import haxe.Constraints.Function;
import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.popup.Authentication;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.VGroup;

//  begin class def
class LoginPopUp extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var login:components.popup.Authentication;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.width = 400;
		this.height = 160;
		this.minWidth = 400;
		this.minHeight = 160;
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_LoginPopUp_Array1_c);

		// events

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 31 - 88

	private var model:IDEModel = IDEModel.getInstance();
	private var effectMove:Move;
	private var effectResize:Resize;
	private var loaderIcon:Image;
	public var isLastDataCallingAgent:Bool = false;

	public var successFunctionCallback:Function;// Holds the author component's success handler (param: errorMessage, successMessage ..args)
	public var errorFunctionCallback:Function;// Holds the author component's fault handler (param: errorMessage)
	public var anObject:Dynamic;
	public var eventType:String;
	public var postUrl:String;
	public var timeOut:Float;
	private var loader:DataAgent;

	private function onUserLoginSuccess(event:Event):Void {
		effectMove = new Move();
		effectResize = new Resize();

		effectMove.yTo = (this.stage.stageHeight - (this.height + 50)) / 2;
		effectMove.xTo = (this.stage.stageWidth - (this.width + 100)) / 2;

		effectResize.heightTo = this.height + 50;
		effectResize.widthTo = this.width + 100;

		effectResize.play([this]);
		effectMove.play([this]);

		super.closeThis();

		//Calling user's last stored dataagent again to finish the action which user has selected
		if (isLastDataCallingAgent) {
			loader = new DataAgent(postUrl, cast successFunctionCallback, cast errorFunctionCallback, anObject);
		}
	}

	override private function closeByCrossSign(event:Event):Void {
		super.closeByCrossSign(event);

		//calling component's fault handler to stop the event processing
		if (isLastDataCallingAgent) {
			if (errorFunctionCallback != null) {
				errorFunctionCallback('');
			}
		}
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _LoginPopUp_Array1_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_LoginPopUp_VGroup1_c()];
		return cast temp;
	}

	private function _LoginPopUp_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.verticalCenter = 0;
		temp.autoLayout = true;
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingBottom = 3;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_LoginPopUp_Authentication1_i()];
		temp.addEventListener('addedToStage', ___LoginPopUp_VGroup1_addedToStage);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _LoginPopUp_Authentication1_i():components.popup.Authentication {
		var temp:components.popup.Authentication = new components.popup.Authentication();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.isCancelShow = false;
		temp.addEventListener('SUCCESS', __login_SUCCESS);
		temp.addEventListener('CANCEL', __login_CANCEL);
		temp.id = 'login';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		login = temp;
		mx.binding.BindingManager.executeBindings(this, 'login', login);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __login_SUCCESS(event:flash.events.Event):Void {
		onUserLoginSuccess(event);
	}

	/**
	 * @private
	 **/
	public function __login_CANCEL(event:flash.events.Event):Void {
		closeByCrossSign(null);
	}

	/**
	 * @private
	 **/
	public function ___LoginPopUp_VGroup1_addedToStage(event:flash.events.Event):Void {
		title = 'Your authentication has expired.Login again to continue';
	}

}

//  end package def