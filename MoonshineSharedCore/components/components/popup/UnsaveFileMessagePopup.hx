/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      UnsaveFileMessagePopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/UnsaveFileMessagePopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package components.popup;

import actionScripts.events.GlobalEventDispatcher;
import actionScripts.plugin.core.compiler.ActionScriptBuildEvent;
import mx.managers.PopUpManager;

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.events.CloseEvent;
import mx.filters.*;
import mx.styles.*;
import spark.components.Button;
import spark.components.CheckBox;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.TitleWindow;
import spark.components.VGroup;

//  begin class def
class UnsaveFileMessagePopup extends spark.components.TitleWindow {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btn_Cancel:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btn_Continue:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btn_Save:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var chk_enablePrompt:spark.components.CheckBox;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.width = 400;
		this.height = 160;
		this.autoLayout = true;
		this.title = 'Save & Launch';
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_UnsaveFileMessagePopup_Array1_c);

		// events
		this.addEventListener('close', ___UnsaveFileMessagePopup_TitleWindow1_close);

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 28 - 62

	public static inline var SAVE_SELECTED:String = 'SAVE_SELECTED';
	public static inline var CONTINUE:String = 'CONTINUE';
	public static inline var CANCELLED:String = 'CANCELLED';

	private function closeWindowHandler(event:MouseEvent):Void {
		dispatchEvent(new Event(CANCELLED));
		PopUpManager.removePopUp(this);
	}

	private function onSaveAndContinueClick(event:MouseEvent):Void {
		// TODO Auto-generated method stub
		dispatchEvent(new Event(SAVE_SELECTED));
		PopUpManager.removePopUp(this);
	}

	private function onContinueWithoutSavingClick(event:MouseEvent):Void {
		// TODO Auto-generated method stub
		dispatchEvent(new Event(CONTINUE));
		PopUpManager.removePopUp(this);
	}

	private function onDoNotPromptClick(event:Event):Void {
		GlobalEventDispatcher.getInstance().dispatchEvent(new ActionScriptBuildEvent(ActionScriptBuildEvent.SAVE_BEFORE_BUILD, false, true));
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _UnsaveFileMessagePopup_Array1_c():Array<Dynamic> {
		var temp:Array<VGroup> = [_UnsaveFileMessagePopup_VGroup1_c()];
		return cast temp;
	}

	private function _UnsaveFileMessagePopup_VGroup1_c():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentHeight = 100.0;
		temp.percentWidth = 100.0;
		temp.autoLayout = true;
		temp.gap = 10;
		temp.paddingLeft = 12;
		temp.paddingTop = 9;
		temp.paddingRight = 13;
		temp.verticalAlign = 'middle';
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_UnsaveFileMessagePopup_Label1_c(), _UnsaveFileMessagePopup_CheckBox1_i(), _UnsaveFileMessagePopup_HGroup1_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _UnsaveFileMessagePopup_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = 'You have at least one unsaved file';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _UnsaveFileMessagePopup_CheckBox1_i():spark.components.CheckBox {
		var temp:spark.components.CheckBox = new spark.components.CheckBox();
		temp.label = 'Do not prompt me again.';
		temp.addEventListener('change', __chk_enablePrompt_change);
		temp.id = 'chk_enablePrompt';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		chk_enablePrompt = temp;
		mx.binding.BindingManager.executeBindings(this, 'chk_enablePrompt', chk_enablePrompt);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __chk_enablePrompt_change(event:flash.events.Event):Void {
		onDoNotPromptClick(event);
	}

	private function _UnsaveFileMessagePopup_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.horizontalAlign = 'center';
		temp.paddingTop = 9;
		temp.mxmlContent = [_UnsaveFileMessagePopup_Button1_i(), _UnsaveFileMessagePopup_Button2_i(), _UnsaveFileMessagePopup_Button3_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _UnsaveFileMessagePopup_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Save & Continue';
		temp.addEventListener('click', __btn_Save_click);
		temp.id = 'btn_Save';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btn_Save = temp;
		mx.binding.BindingManager.executeBindings(this, 'btn_Save', btn_Save);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btn_Save_click(event:flash.events.MouseEvent):Void {
		onSaveAndContinueClick(event);
	}

	private function _UnsaveFileMessagePopup_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Continue Without Saving';
		temp.addEventListener('click', __btn_Continue_click);
		temp.id = 'btn_Continue';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btn_Continue = temp;
		mx.binding.BindingManager.executeBindings(this, 'btn_Continue', btn_Continue);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btn_Continue_click(event:flash.events.MouseEvent):Void {
		onContinueWithoutSavingClick(event);
	}

	private function _UnsaveFileMessagePopup_Button3_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Cancel';
		temp.addEventListener('click', __btn_Cancel_click);
		temp.id = 'btn_Cancel';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btn_Cancel = temp;
		mx.binding.BindingManager.executeBindings(this, 'btn_Cancel', btn_Cancel);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btn_Cancel_click(event:flash.events.MouseEvent):Void {
		closeWindowHandler(event);
	}

	/**
	 * @private
	 **/
	public function ___UnsaveFileMessagePopup_TitleWindow1_close(event:mx.events.CloseEvent):Void {
		closeWindowHandler(null);
	}

}

//  end package def