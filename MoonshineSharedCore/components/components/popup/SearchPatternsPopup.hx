/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      SearchPatternsPopup
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/SearchPatternsPopup.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package components.popup;

import mx.collections.ArrayCollection;

import actionScripts.ui.resizableTitleWindow.ResizableTitleWindow;
import components.skins.ResizableTitleWindowSkin;
import components.views.other.FilesExtensionFilterView;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;

import mx.controls.Spacer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.Button;

//  begin class def
class SearchPatternsPopup extends actionScripts.ui.resizableTitleWindow.ResizableTitleWindow implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var filesExtensionFilterView:components.views.other.FilesExtensionFilterView;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _SearchPatternsPopup_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_SearchPatternsPopupWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(SearchPatternsPopup, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.width = 350;
		this.maxHeight = 450;
		this.minWidth = 300;
		this.minHeight = 200;
		this.autoLayout = true;
		this.title = 'Select Pattern';
		this.controlBarContent = [_SearchPatternsPopup_Button1_c(), _SearchPatternsPopup_Button2_c(), _SearchPatternsPopup_Spacer1_c(), _SearchPatternsPopup_Button3_c()];
		this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_SearchPatternsPopup_Array2_c);

		// events

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings
		//  initialize component styles
		if (!AS3.as(this.styleDeclaration, Bool)) {
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():Void {
					this.backgroundColor = 16119285;
					this.skinClass = components.skins.ResizableTitleWindowSkin;
				};
		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 32 - 55

	public var isClosedAsSubmit:Bool = false;

	@:meta(Bindable())
	public var patterns:ArrayCollection;

	private function onOkClick(event:MouseEvent):Void {
		isClosedAsSubmit = true;
		closeThis();
	}

	private function onSelectAllClick(event:MouseEvent):Void {
		filesExtensionFilterView.selectAll();
	}

	private function onDeselectAllCkick(event:MouseEvent):Void {
		filesExtensionFilterView.deselectAll();
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _SearchPatternsPopup_Button1_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Select All';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___SearchPatternsPopup_Button1_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SearchPatternsPopup_Button1_click(event:flash.events.MouseEvent):Void {
		onSelectAllClick(event);
	}

	private function _SearchPatternsPopup_Button2_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Deselect All';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___SearchPatternsPopup_Button2_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SearchPatternsPopup_Button2_click(event:flash.events.MouseEvent):Void {
		onDeselectAllCkick(event);
	}

	private function _SearchPatternsPopup_Spacer1_c():mx.controls.Spacer {
		var temp:mx.controls.Spacer = new mx.controls.Spacer();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _SearchPatternsPopup_Button3_c():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'OK';
		temp.styleName = 'darkButton';
		temp.addEventListener('click', ___SearchPatternsPopup_Button3_click);
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___SearchPatternsPopup_Button3_click(event:flash.events.MouseEvent):Void {
		onOkClick(event);
	}

	private function _SearchPatternsPopup_Array2_c():Array<Dynamic> {
		var temp:Array<FilesExtensionFilterView> = [_SearchPatternsPopup_FilesExtensionFilterView1_i()];
		return cast temp;
	}

	private function _SearchPatternsPopup_FilesExtensionFilterView1_i():components.views.other.FilesExtensionFilterView {
		var temp:components.views.other.FilesExtensionFilterView = new components.views.other.FilesExtensionFilterView();
		temp.percentWidth = 100;
		temp.percentHeight = 100;
		temp.id = 'filesExtensionFilterView';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		filesExtensionFilterView = temp;
		mx.binding.BindingManager.executeBindings(this, 'filesExtensionFilterView', filesExtensionFilterView);
		return temp;
	}

	//  binding mgmt
	private function _SearchPatternsPopup_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'filesExtensionFilterView.patterns', 'patterns');

		result[1] = new mx.binding.Binding(this,
				function():Dynamic {
					return filesExtensionFilterView.patterns;
				},
				function(_sourceFunctionReturnValue:Dynamic):Void {
					patterns = _sourceFunctionReturnValue;
				},
				'patterns');

		Reflect.setField(result[1], 'twoWayCounterpart', result[0]);

		Reflect.setField(result[0], 'isTwoWayPrimary', true);
		Reflect.setField(result[0], 'twoWayCounterpart', result[1]);

		return result;
	}

	private function _SearchPatternsPopup_bindingExprs():Void {
		patterns = filesExtensionFilterView.patterns;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(SearchPatternsPopup)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def