/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.popup
 *  Class:      Authentication
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/popup/Authentication.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:49 MSK
 */

package components.popup;

import mx.controls.Alert;
import mx.controls.Image;
import mx.core.FlexGlobals;
import mx.core.IVisualElementContainer;
import mx.utils.URLUtil;
import mx.validators.Validator;
import actionScripts.controllers.DataAgent;
import actionScripts.events.GlobalEventDispatcher;
import actionScripts.plugin.console.ConsoleOutputEvent;
import actionScripts.valueObjects.ConstantsCoreVO;
import actionScripts.valueObjects.URLDescriptorVO;

import actionScripts.plugin.findreplace.view.PromptTextInput;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.IEventDispatcher;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.ArrayList;
import mx.controls.HRule;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.graphics.SolidColorStroke;
import mx.states.AddItems;
import mx.states.State;
import mx.styles.*;
import mx.validators.EmailValidator;
import mx.validators.StringValidator;
import spark.components.Button;
import spark.components.DropDownList;
import spark.components.Group;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.VGroup;
import spark.events.TextOperationEvent;

@:meta(Event(name = 'SUCCESS', type = 'flash.events.Event'))
@:meta(Event(name = 'CANCEL', type = 'flash.events.Event'))
@:meta(Event(name = 'LOADING_LOGIN', type = 'flash.events.Event'))
@:meta(Event(name = 'AUTH_TEST_FAULT', type = 'flash.events.Event'))
@:meta(States(name = 'domain', name = 'login'))
//  begin class def
class Authentication extends spark.components.Group implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	//  instance variables
	/**
	 * @private
	 **/
	public var _Authentication_Button3:spark.components.Button;

	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _Authentication_VGroup1:spark.components.VGroup;

	@:meta(Inspectable())
	/**
	 * @private
	 **/
	public var _Authentication_VGroup2:spark.components.VGroup;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnDomainSubmit:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var btnLogin:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var ddlProtocol:spark.components.DropDownList;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var eValidator:mx.validators.EmailValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var grpTxtDomain:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var grpTxtPassword:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var hLine:mx.graphics.SolidColorStroke;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var pValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var sValidator:mx.validators.StringValidator;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtDomain:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtDomainMess:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtPassword:actionScripts.plugin.findreplace.view.PromptTextInput;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var txtUsername:actionScripts.plugin.findreplace.view.PromptTextInput;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _Authentication_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_popup_AuthenticationWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(Authentication, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		this.mxmlContent = [];
		this.currentState = 'domain';
		_Authentication_EmailValidator1_i();
		_Authentication_SolidColorStroke1_i();
		_Authentication_StringValidator2_i();
		_Authentication_StringValidator1_i();

		// events
		this.addEventListener('creationComplete', ___Authentication_Group1_creationComplete);

		var _Authentication_VGroup1_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_Authentication_VGroup1_i);
		var _Authentication_VGroup2_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_Authentication_VGroup2_i);

		states = [
				new State({
					'name': 'domain',
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _Authentication_VGroup1_factory,
								'destination': null,
								'propertyName': 'mxmlContent',
								'position': 'first'
							})
			]
				}),
				new State({
					'name': 'login',
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _Authentication_VGroup2_factory,
								'destination': null,
								'propertyName': 'mxmlContent',
								'position': 'first'
							})
			]
				})
		];

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 35 - 335

	public static inline var SESSION_UNAUTHENTICATED:String = 'session-not-authenticated';
	public static inline var SESSION_AUTHLIMITEDACCESS:String = 'authenticated-with-insufficient-access';
	public static inline var SUCCESS:String = 'SUCCESS';
	public static inline var CANCEL:String = 'CANCEL';

	@:meta(Bindable())public var isCancelShow:Bool = true;

	private var LOADING_LOGIN(default, never):String = 'LOADING_LOGIN';
	private var AUTH_TEST_FAULT(default, never):String = 'AUTH_TEST_FAULT';
	private var loader:DataAgent;
	private var loaderIcon:Image;
	private var userMessageServerSelection:String = '(Note: Above domain will be use for all data calls)';

	/**
	 * On creation completes
	 */
	private function onCreationCompletes():Void {
		var serverWithPort:String = Std.string(URLUtil.getServerNameWithPort(FlexGlobals.topLevelApplication.loaderInfo.url));
		txtDomainMess.text = userMessageServerSelection;

		// set with server:port value if found, else show default prompt only
		if (serverWithPort != '') {
			var fullURL:String = Std.string(URLUtil.getFullURL('', FlexGlobals.topLevelApplication.loaderInfo.url));
			// probable url value
			// localhost/subfolder/appname/app.htm(l)-php-anyextension,
			// localhost/subfolder/appname/app (in case server tech dont show running page extension)
			var urlAfterServerWithPort:String = fullURL.substr(fullURL.indexOf(serverWithPort) + serverWithPort.length + 1, fullURL.length);// +1 to count "/"
			var afterServerWithPortSplit:Array<String> = urlAfterServerWithPort.split('/');
			// we don't take last indexed item which can be a swf or wrapper html page
			// so, the array count should be more than 1
			if (afterServerWithPortSplit.length > 1) {
				afterServerWithPortSplit.pop();
				serverWithPort += '/' + afterServerWithPortSplit.join('/');
			}

			txtDomain.text = serverWithPort;
		}
		// sets protocol upon any previously selected
		if (URLDescriptorVO.BASE_URL_PROTOCOL != '') {
			ddlProtocol.selectedItem = URLDescriptorVO.BASE_URL_PROTOCOL;
		}

		txtDomain.setFocus();
	}

	/**
	 * On domain value selected
	 */
	private function onDomainSelected():Void {
		function onApplicationNameConfirmed():Void {
			URLDescriptorVO.BASE_URL_MIRROR = txtDomain.text;
			URLDescriptorVO.BASE_URL = ddlProtocol.selectedItem + URLDescriptorVO.BASE_URL_MIRROR + '/';
			URLDescriptorVO.BASE_URL_PROTOCOL = Std.string(Std.string(ddlProtocol.selectedItem));
			URLDescriptorVO.updateURLs();

			loaderIcon = new Image();
			loaderIcon.source = new ConstantsCoreVO.loaderIcon();
			loaderIcon.width = loaderIcon.height = 10;
			loaderIcon.y = (txtDomain.height - loaderIcon.height) / 2;
			loaderIcon.right = 6;
			grpTxtDomain.addElement(loaderIcon);

			// test if application requires authentication or not
			btnDomainSubmit.enabled = false;
			loader = new DataAgent(URLDescriptorVO.CONFIG, onConfigLoads, onConfigLoadsFault, null);
		};
		function validateURLEmptySubFolders(value:Array<Dynamic>):Bool {
			for (i_ in value) {
				var i:String = cast i_;
				if (i == '') {
					return true;
				}
			}

			// if all is fine
			return false;
		};
		// validation 1 to check blank entry
		var tmpArr:Array<Dynamic> = new Array<Dynamic>();
		if (Validator.validateAll(tmpArr).length == 0) {
			// validation 2 to check double http/s insertion
			if ((txtDomain.text.indexOf('http:') != -1) || (txtDomain.text.indexOf('https:') != -1)) {
				txtDomainMess.setStyle('color', 0xff0000);
				txtDomainMess.text = '* Remove HTTP/S in server address and re-try.';
				return;
			}

			// validation 3 to check existance of (probable) application name
			var domArray:Array<String> = txtDomain.text.split('/'); /*
			 *@local
			 */  /*
			 *@local
			 */
			if (domArray.length < 2 || domArray[domArray.length - 1] == '') {
				txtDomainMess.setStyle('color', 0xff0000);
				txtDomainMess.text = '* Missing application name. Expected format is test.com/TestApp';
				return;
			}// validation 4 to check address integrity
			else if (validateURLEmptySubFolders(cast domArray)) {
				txtDomainMess.setStyle('color', 0xff0000);
				txtDomainMess.text = '* Server address is invalid. Please, check.';
				return;
			}// validation 5 to confirm application name
			else if ((URLDescriptorVO.BASE_URL_MIRROR == '') || (txtDomain.text != URLDescriptorVO.BASE_URL_MIRROR)) {
				/*var domArray: Array = txtDomain.text.split("/");
				Alert.show("Confirm your application name, is: "+ domArray[domArray.length - 1], "Application Name", Alert.YES | Alert.NO, null, onApplicationNameConfirmed);*/

				onApplicationNameConfirmed();
				txtDomainMess.setStyle('color', 0x666666);
				txtDomainMess.text = userMessageServerSelection;
			} else {
				onApplicationNameConfirmed();
			}
		}
	}

	/**
	 * Remove loader icon from its parent
	 */
	private function removeLoaderIcon():Void {
		// safe termination
		if (loaderIcon == null) {
			return;
		}

		IVisualElementContainer(loaderIcon.owner).removeElement(loaderIcon);
		loaderIcon = null;
	}

	/**
	 * Determines plugin type - MoonshineOpenSourced or else
	 * Should get return if MoonshineServerPluginOpenSource
	 */
	private function onConfigLoads(value:Dynamic, status:Bool = true):Void {
		loader = null;

		// expected to be MoonshinePluginOpenSource
		if (AS3.as(value, Bool) && status) {
			removeLoaderIcon();
			var jsonObj:Dynamic = haxe.Json.parse(Std.string(value));

			// MSPOS (MoonshineServerPluginOpenSource) is type of plugin
			// where authentication NOT required
			if (Std.is(Reflect.field(jsonObj, 'authRequired'), String)) {
				ConstantsCoreVO.IS_AUTH_REQUIRED = ((Reflect.field(jsonObj, 'authRequired') == 'true')) ? true : false;
			} else {
				ConstantsCoreVO.IS_AUTH_REQUIRED = Reflect.field(jsonObj, 'authRequired');
			}

			// don't continue if we don't need authentication
			if (AS3.as(ConstantsCoreVO.IS_AUTH_REQUIRED, Bool)) {
				URLDescriptorVO.LOGIN_TEST = URLDescriptorVO.BASE_URL + Reflect.field(jsonObj, 'statusURL');
				URLDescriptorVO.LOGIN_USER = URLDescriptorVO.BASE_URL + Reflect.field(jsonObj, 'authURL');
				URLDescriptorVO.LOGIN_USER_FIELD_2SEND2_SERVER = AS3.string(Reflect.field(jsonObj, 'usernameField'));
				URLDescriptorVO.LOGIN_PASSWORD_FIELD_2SEND2_SERVER = AS3.string(Reflect.field(jsonObj, 'passwordField'));
			} else {
				dispatchEvent(new Event(SUCCESS));
				return;
			}
		}

		// where authentication needs
		loader = new DataAgent(URLDescriptorVO.LOGIN_TEST, onStatusSuccess, onAuthTestFault, null);
	}

	/**
	 * On plugin type call fault
	 * Happens when it's not MoonshineServerPluginOpenSource
	 */
	private function onConfigLoadsFault(result:Dynamic):Void {
		// since it is non-MSPLOS we can proceed
		// to test authentication status
		loader = null;
		removeLoaderIcon();
		btnDomainSubmit.enabled = true;
	}

	private function onStatusSuccess(value:Dynamic, status:Bool = true):Void {
		removeLoaderIcon();

		var xData:FastXML = FastXML.parse(Std.string(value));
		if (xData == null) {
			return;
		}
		if (xData.node.status == SESSION_UNAUTHENTICATED || xData.node.username == 'null' || xData.node.username == 'anonymous') {
			dispatchEvent(new Event(LOADING_LOGIN));
			currentState = 'login';
		} else if (xData.node.status == SESSION_AUTHLIMITEDACCESS) {
			removeLoaderIcon();
			btnDomainSubmit.enabled = true;
			Alert.show('You do not have sufficient rights to performn this operation. If you feel this is in error please contact the Administrator.', 'Error!');
		} else {
			GlobalEventDispatcher.getInstance().dispatchEvent(new ConsoleOutputEvent(ConsoleOutputEvent.CONSOLE_OUTPUT, 'Successfully authenticated as: ' + xData.node.username));
			dispatchEvent(new Event(SUCCESS));
			loader = null;
		}
	}

	private function onAuthTestFault(result:Dynamic):Void {
		removeLoaderIcon();
		btnDomainSubmit.enabled = true;

		dispatchEvent(new Event(AUTH_TEST_FAULT));
	}

	private function onLoginRequest(event:MouseEvent):Void {
		var tmpArr:Array<Dynamic> = new Array<Dynamic>();
		if (Validator.validateAll(tmpArr).length == 0) {
			loaderIcon = new Image();
			loaderIcon.source = new ConstantsCoreVO.loaderIcon();
			loaderIcon.width = loaderIcon.height = 10;
			loaderIcon.y = (txtPassword.height - loaderIcon.height) / 2;
			loaderIcon.right = 6;
			grpTxtPassword.addElement(loaderIcon);

			btnLogin.enabled = false;

			var objectToSend:Dynamic = {};
			Reflect.setField(objectToSend, URLDescriptorVO.LOGIN_USER_FIELD_2SEND2_SERVER, txtUsername.text);
			Reflect.setField(objectToSend, URLDescriptorVO.LOGIN_PASSWORD_FIELD_2SEND2_SERVER, txtPassword.text);
			loader = new DataAgent(URLDescriptorVO.LOGIN_USER, onLoginSuccess, onSaveFault, objectToSend);
		}
	}

	private function releaseBusyView():Void {
		IVisualElementContainer(loaderIcon.owner).removeElement(loaderIcon);
		loaderIcon = null;
	}

	private function onLoginSuccess(event:Dynamic, status:Bool = true):Void {
		releaseBusyView();
		loader = null;
		btnLogin.enabled = true;

		var result:String = Std.string(event);
		if (status) {
			GlobalEventDispatcher.getInstance().dispatchEvent(new ConsoleOutputEvent(ConsoleOutputEvent.CONSOLE_OUTPUT, 'Successfully authenticated as: ' + txtUsername.text));
			dispatchEvent(new Event(SUCCESS));
		} else {
			Alert.show(result, 'Error!');
			btnLogin.enabled = true;
		}
	}

	private function onSaveFault(result:Dynamic):Void {
		GlobalEventDispatcher.getInstance().dispatchEvent(new ConsoleOutputEvent(ConsoleOutputEvent.CONSOLE_OUTPUT, 'Login error!'));
		btnLogin.enabled = true;
		releaseBusyView();
		loader = null;
	}

	private function btnCancel_clickHandler(event:MouseEvent):Void {
		loader = null;
		dispatchEvent(new Event(CANCEL));
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _Authentication_EmailValidator1_i():mx.validators.EmailValidator {
		var temp:mx.validators.EmailValidator = new mx.validators.EmailValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'eValidator');
		eValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'eValidator', eValidator);
		return temp;
	}

	private function _Authentication_SolidColorStroke1_i():mx.graphics.SolidColorStroke {
		var temp:mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
		temp.color = 13421772;
		hLine = temp;
		mx.binding.BindingManager.executeBindings(this, 'hLine', hLine);
		return temp;
	}

	private function _Authentication_StringValidator2_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'pValidator');
		pValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'pValidator', pValidator);
		return temp;
	}

	private function _Authentication_StringValidator1_i():mx.validators.StringValidator {
		var temp:mx.validators.StringValidator = new mx.validators.StringValidator();
		temp.property = 'text';
		temp.triggerEvent = 'click';
		temp.initialized(this, 'sValidator');
		sValidator = temp;
		mx.binding.BindingManager.executeBindings(this, 'sValidator', sValidator);
		return temp;
	}

	private function _Authentication_VGroup1_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.gap = 10;
		temp.autoLayout = true;
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_Authentication_HGroup1_c(), _Authentication_Label2_i(), _Authentication_HRule1_c(), _Authentication_Button1_i()];
		temp.id = '_Authentication_VGroup1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_Authentication_VGroup1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_Authentication_VGroup1', _Authentication_VGroup1);
		return temp;
	}

	private function _Authentication_HGroup1_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.verticalAlign = 'middle';
		temp.mxmlContent = [_Authentication_DropDownList1_i(), _Authentication_Group2_i(), _Authentication_Label1_c()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _Authentication_DropDownList1_i():spark.components.DropDownList {
		var temp:spark.components.DropDownList = new spark.components.DropDownList();
		temp.width = 80;
		temp.requireSelection = true;
		temp.dataProvider = _Authentication_ArrayList1_c();
		temp.id = 'ddlProtocol';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		ddlProtocol = temp;
		mx.binding.BindingManager.executeBindings(this, 'ddlProtocol', ddlProtocol);
		return temp;
	}

	private function _Authentication_ArrayList1_c():mx.collections.ArrayList {
		var temp:mx.collections.ArrayList = new mx.collections.ArrayList();
		temp.source = ['https://', 'http://'];
		return temp;
	}

	private function _Authentication_Group2_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_Authentication_PromptTextInput1_i()];
		temp.id = 'grpTxtDomain';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		grpTxtDomain = temp;
		mx.binding.BindingManager.executeBindings(this, 'grpTxtDomain', grpTxtDomain);
		return temp;
	}

	private function _Authentication_PromptTextInput1_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Server';
		temp.restrict = '0-9a-zA-Z.:\\-/';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.addEventListener('enter', __txtDomain_enter);
		temp.id = 'txtDomain';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtDomain = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtDomain', txtDomain);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtDomain_enter(event:mx.events.FlexEvent):Void {
		onDomainSelected();
	}

	private function _Authentication_Label1_c():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.text = '/MoonShineServer/';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _Authentication_Label2_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.setStyle('fontStyle', 'italic');
		temp.setStyle('color', 6710886);
		temp.id = 'txtDomainMess';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtDomainMess = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtDomainMess', txtDomainMess);
		return temp;
	}

	private function _Authentication_HRule1_c():mx.controls.HRule {
		var temp:mx.controls.HRule = new mx.controls.HRule();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _Authentication_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Submit';
		temp.styleName = 'lightButtonTight';
		temp.width = 80;
		temp.addEventListener('click', __btnDomainSubmit_click);
		temp.id = 'btnDomainSubmit';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnDomainSubmit = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnDomainSubmit', btnDomainSubmit);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnDomainSubmit_click(event:flash.events.MouseEvent):Void {
		onDomainSelected();
	}

	private function _Authentication_VGroup2_i():spark.components.VGroup {
		var temp:spark.components.VGroup = new spark.components.VGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.gap = 10;
		temp.autoLayout = true;
		temp.mxmlContent = [_Authentication_PromptTextInput2_i(), _Authentication_Group3_i(), _Authentication_HRule2_c(), _Authentication_HGroup2_c()];
		temp.id = '_Authentication_VGroup2';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_Authentication_VGroup2 = temp;
		mx.binding.BindingManager.executeBindings(this, '_Authentication_VGroup2', _Authentication_VGroup2);
		return temp;
	}

	private function _Authentication_PromptTextInput2_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'User Name';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.id = 'txtUsername';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtUsername = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtUsername', txtUsername);
		return temp;
	}

	private function _Authentication_Group3_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentWidth = 100.0;
		temp.mxmlContent = [_Authentication_PromptTextInput3_i()];
		temp.id = 'grpTxtPassword';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		grpTxtPassword = temp;
		mx.binding.BindingManager.executeBindings(this, 'grpTxtPassword', grpTxtPassword);
		return temp;
	}

	private function _Authentication_PromptTextInput3_i():actionScripts.plugin.findreplace.view.PromptTextInput {
		var temp:actionScripts.plugin.findreplace.view.PromptTextInput = new actionScripts.plugin.findreplace.view.PromptTextInput();
		temp.prompt = 'Password';
		temp.percentWidth = 100.0;
		temp.styleName = 'textInput';
		temp.addEventListener('change', __txtPassword_change);
		temp.addEventListener('enter', __txtPassword_enter);
		temp.id = 'txtPassword';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		txtPassword = temp;
		mx.binding.BindingManager.executeBindings(this, 'txtPassword', txtPassword);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __txtPassword_change(event:spark.events.TextOperationEvent):Void {
		txtPassword.displayAsPassword = true;
	}

	/**
	 * @private
	 **/
	public function __txtPassword_enter(event:mx.events.FlexEvent):Void {
		onLoginRequest(null);
	}

	private function _Authentication_HRule2_c():mx.controls.HRule {
		var temp:mx.controls.HRule = new mx.controls.HRule();
		temp.percentWidth = 100.0;
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _Authentication_HGroup2_c():spark.components.HGroup {
		var temp:spark.components.HGroup = new spark.components.HGroup();
		temp.percentWidth = 100.0;
		temp.horizontalAlign = 'center';
		temp.mxmlContent = [_Authentication_Button2_i(), _Authentication_Button3_i()];
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		return temp;
	}

	private function _Authentication_Button2_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Submit';
		temp.styleName = 'lightButtonTight';
		temp.width = 80;
		temp.addEventListener('click', __btnLogin_click);
		temp.id = 'btnLogin';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		btnLogin = temp;
		mx.binding.BindingManager.executeBindings(this, 'btnLogin', btnLogin);
		return temp;
	}

	/**
	 * @private
	 **/
	public function __btnLogin_click(event:flash.events.MouseEvent):Void {
		onLoginRequest(event);
	}

	private function _Authentication_Button3_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.label = 'Cancel';
		temp.styleName = 'lightButtonTight';
		temp.width = 80;
		temp.addEventListener('click', ___Authentication_Button3_click);
		temp.id = '_Authentication_Button3';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_Authentication_Button3 = temp;
		mx.binding.BindingManager.executeBindings(this, '_Authentication_Button3', _Authentication_Button3);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___Authentication_Button3_click(event:flash.events.MouseEvent):Void {
		btnCancel_clickHandler(event);
	}

	/**
	 * @private
	 **/
	public function ___Authentication_Group1_creationComplete(event:mx.events.FlexEvent):Void {
		onCreationCompletes();
	}

	//  binding mgmt
	private function _Authentication_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'sValidator.source', 'txtDomain');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'sValidator.trigger', 'btnDomainSubmit');

		result[2] = new mx.binding.Binding(this,
				null,
				null,
				'eValidator.source', 'txtUsername');

		result[3] = new mx.binding.Binding(this,
				null,
				null,
				'eValidator.trigger', 'btnLogin');

		result[4] = new mx.binding.Binding(this,
				null,
				null,
				'pValidator.source', 'txtPassword');

		result[5] = new mx.binding.Binding(this,
				null,
				null,
				'pValidator.trigger', 'btnLogin');

		result[6] = new mx.binding.Binding(this,
				function():Float {
					return (txtDomain.height);
				},
				null,
				'ddlProtocol.height');

		result[7] = new mx.binding.Binding(this,
				function():String {
					var result:Dynamic = (URLDescriptorVO.BASE_URL_MIRROR);
					return Std.string((result == null) ? null : Std.string(result));
				},
				null,
				'txtDomain.text');

		result[8] = new mx.binding.Binding(this,
				null,
				null,
				'_Authentication_Button3.includeInLayout', 'isCancelShow');

		result[9] = new mx.binding.Binding(this,
				null,
				null,
				'_Authentication_Button3.visible', 'isCancelShow');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(Authentication)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def