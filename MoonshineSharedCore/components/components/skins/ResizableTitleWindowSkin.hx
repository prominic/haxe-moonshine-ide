/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.skins
 *  Class:      ResizableTitleWindowSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/skins/ResizableTitleWindowSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package components.skins;

import mx.events.FlexEvent;
import actionScripts.ui.resizableControls.ResizeManager;

import components.skins.ResizeHandleLines;
import elements.skins.MoonshineTitleWindowCloseButtonSkin;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.display.DisplayObject;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.graphics.SolidColor;
import mx.states.AddItems;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.BorderContainer;
import spark.components.Button;
import spark.components.Group;
import spark.components.Label;
import spark.filters.DropShadowFilter;
import spark.layouts.HorizontalLayout;
import spark.layouts.VerticalLayout;
import spark.primitives.Rect;
import spark.skins.SparkSkin;

/**
 * @copy spark.skins.spark.ApplicationSkin#hostComponent
 */
@:meta(HostComponent(name = 'spark.components.TitleWindow'))
@:meta(States(name = 'normal', name = 'inactive', name = 'disabled', name = 'normalWithControlBar', name = 'inactiveWithControlBar', name = 'disabledWithControlBar'))
//  begin class def
class ResizableTitleWindowSkin extends spark.skins.SparkSkin implements mx.binding.IBindingClient implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Inspectable())
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var _ResizableTitleWindowSkin_BorderContainer1:spark.components.BorderContainer;

	/**
	 * @private
	 **/
	public var _ResizableTitleWindowSkin_Group8:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var bottomGroup:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var bottomGroupMask:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var bottomMaskRect:spark.primitives.Rect;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var closeButton:spark.components.Button;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var contentGroup:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var contents:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var controlBarGroup:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var moveArea:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var resizeHandle:components.skins.ResizeHandleLines;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var titleDisplay:spark.components.Label;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var topGroup:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var topGroupMask:spark.components.Group;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var topMaskRect:spark.primitives.Rect;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _ResizableTitleWindowSkin_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_skins_ResizableTitleWindowSkinWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(ResizableTitleWindowSkin, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.minHeight = 76;
		this.minWidth = 76;
		this.blendMode = 'normal';
		this.mouseEnabled = false;
		this.mxmlContent = [_ResizableTitleWindowSkin_BorderContainer1_i()];
		this.currentState = 'normal';

		// events
		this.addEventListener('creationComplete', ___ResizableTitleWindowSkin_SparkSkin1_creationComplete);

		var _ResizableTitleWindowSkin_Group2_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ResizableTitleWindowSkin_Group2_i);
		var _ResizableTitleWindowSkin_Group7_factory:DeferredInstanceFromFunction =
		new mx.core.DeferredInstanceFromFunction(_ResizableTitleWindowSkin_Group7_i);

		states = [
				new State({
					'name': 'normal',
					'overrides': []
				}),
				new State({
					'name': 'inactive',
					'stateGroups': ['inactiveGroup'],
					'overrides': []
				}),
				new State({
					'name': 'disabled',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				}),
				new State({
					'name': 'normalWithControlBar',
					'stateGroups': ['withControls'],
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _ResizableTitleWindowSkin_Group7_factory,
								'destination': 'contents',
								'propertyName': 'mxmlContent',
								'position': 'after',
								'relativeTo': ['contentGroup']
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _ResizableTitleWindowSkin_Group2_factory,
								'destination': '_ResizableTitleWindowSkin_BorderContainer1',
								'position': 'after',
								'relativeTo': ['topGroupMask']
							})
			]
				}),
				new State({
					'name': 'inactiveWithControlBar',
					'stateGroups': ['inactiveGroup', 'withControls'],
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _ResizableTitleWindowSkin_Group7_factory,
								'destination': 'contents',
								'propertyName': 'mxmlContent',
								'position': 'after',
								'relativeTo': ['contentGroup']
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _ResizableTitleWindowSkin_Group2_factory,
								'destination': '_ResizableTitleWindowSkin_BorderContainer1',
								'position': 'after',
								'relativeTo': ['topGroupMask']
							})
			]
				}),
				new State({
					'name': 'disabledWithControlBar',
					'stateGroups': ['withControls'],
					'overrides': [
					new AddItems().initializeFromObject({
								'itemsFactory': _ResizableTitleWindowSkin_Group7_factory,
								'destination': 'contents',
								'propertyName': 'mxmlContent',
								'position': 'after',
								'relativeTo': ['contentGroup']
							}),
					new AddItems().initializeFromObject({
								'itemsFactory': _ResizableTitleWindowSkin_Group2_factory,
								'destination': '_ResizableTitleWindowSkin_BorderContainer1',
								'position': 'after',
								'relativeTo': ['topGroupMask']
							}),
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				})
		];

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 46 - 70

	/* Define the skin elements that should not be colorized.
	 For panel, border and title background are skinned, but the content area and title text are not. */
	private static var exclusions(default, never):Array<Dynamic> = cast ['background', 'titleDisplay', 'contentGroup'];

	/**
	 * @private
	 */
	override private function get_colorizeExclusions():Array<Dynamic> {
		return exclusions;
	}

	/**
	 * @private
	 */
	override private function initializationComplete():Void {
		useChromeColor = true;
		if (hostComponent.minWidth != 0) {
			minWidth = hostComponent.minWidth;
		}
		if (hostComponent.minHeight != 0) {
			minHeight = hostComponent.minHeight;
		}
		super.initializationComplete();
	}

	private var cornerRadius:Float;

	//  <Script>, line 72 - 90

	@:meta(Bindable())
	public var resizeManager:ResizeManager;

	private function created(event:FlexEvent):Void {
		if (hostComponent.minWidth == 0) {
			hostComponent.minWidth = minWidth;
		}
		if (hostComponent.minHeight == 0) {
			hostComponent.minHeight = minHeight;
		}
		resizeManager = new ResizeManager(hostComponent, resizeHandle);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _ResizableTitleWindowSkin_BorderContainer1_i():spark.components.BorderContainer {
		var temp:spark.components.BorderContainer = new spark.components.BorderContainer();
		temp.top = 0;
		temp.left = 0;
		temp.right = 0;
		temp.bottom = 0;
		temp.backgroundFill = _ResizableTitleWindowSkin_SolidColor1_c();
		temp.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_ResizableTitleWindowSkin_Array7_c);
		temp.setStyle('cornerRadius', 6);
		temp.setStyle('borderColor', 2960685);
		temp.id = '_ResizableTitleWindowSkin_BorderContainer1';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ResizableTitleWindowSkin_BorderContainer1 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ResizableTitleWindowSkin_BorderContainer1', _ResizableTitleWindowSkin_BorderContainer1);
		return temp;
	}

	private function _ResizableTitleWindowSkin_SolidColor1_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 10526880;
		return temp;
	}

	private function _ResizableTitleWindowSkin_Array7_c():Array<Dynamic> {
		var temp:Array<Dynamic> = [_ResizableTitleWindowSkin_Group1_i(), _ResizableTitleWindowSkin_Group3_i(), _ResizableTitleWindowSkin_ResizeHandleLines1_i()];
		return temp;
	}

	private function _ResizableTitleWindowSkin_Group1_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.bottom = 1;
		temp.left = 1;
		temp.right = 1;
		temp.top = 1;
		temp.mxmlContent = [_ResizableTitleWindowSkin_Rect1_i()];
		temp.id = 'topGroupMask';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		topGroupMask = temp;
		mx.binding.BindingManager.executeBindings(this, 'topGroupMask', topGroupMask);
		return temp;
	}

	private function _ResizableTitleWindowSkin_Rect1_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.bottom = 0;
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.radiusX = 6;
		temp.radiusY = 6;
		temp.fill = _ResizableTitleWindowSkin_SolidColor2_c();
		temp.initialized(this, 'topMaskRect');
		topMaskRect = temp;
		mx.binding.BindingManager.executeBindings(this, 'topMaskRect', topMaskRect);
		return temp;
	}

	private function _ResizableTitleWindowSkin_SolidColor2_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 16776960;
		temp.alpha = 0;
		return temp;
	}

	private function _ResizableTitleWindowSkin_Group2_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.bottom = 0;
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.mxmlContent = [_ResizableTitleWindowSkin_Rect2_i()];
		temp.id = 'bottomGroupMask';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		bottomGroupMask = temp;
		mx.binding.BindingManager.executeBindings(this, 'bottomGroupMask', bottomGroupMask);
		return temp;
	}

	private function _ResizableTitleWindowSkin_Rect2_i():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.bottom = 0;
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.radiusX = 6;
		temp.radiusY = 6;
		temp.fill = _ResizableTitleWindowSkin_SolidColor3_c();
		temp.initialized(this, 'bottomMaskRect');
		bottomMaskRect = temp;
		mx.binding.BindingManager.executeBindings(this, 'bottomMaskRect', bottomMaskRect);
		return temp;
	}

	private function _ResizableTitleWindowSkin_SolidColor3_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 16776960;
		temp.alpha = 0;
		return temp;
	}

	private function _ResizableTitleWindowSkin_Group3_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.bottom = 0;
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.layout = _ResizableTitleWindowSkin_VerticalLayout1_c();
		temp.mxmlContent = [_ResizableTitleWindowSkin_Group4_i(), _ResizableTitleWindowSkin_Group6_i()];
		temp.id = 'contents';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		contents = temp;
		mx.binding.BindingManager.executeBindings(this, 'contents', contents);
		return temp;
	}

	private function _ResizableTitleWindowSkin_VerticalLayout1_c():spark.layouts.VerticalLayout {
		var temp:spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
		temp.horizontalAlign = 'justify';
		temp.gap = 0;
		return temp;
	}

	private function _ResizableTitleWindowSkin_Group4_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.mxmlContent = [_ResizableTitleWindowSkin_Label1_i(), _ResizableTitleWindowSkin_Group5_i(), _ResizableTitleWindowSkin_Button1_i()];
		temp.id = 'topGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		topGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'topGroup', topGroup);
		return temp;
	}

	private function _ResizableTitleWindowSkin_Label1_i():spark.components.Label {
		var temp:spark.components.Label = new spark.components.Label();
		temp.minHeight = 30;
		temp.bottom = 0;
		temp.left = 9;
		temp.right = 36;
		temp.top = 1;
		temp.maxDisplayedLines = 1;
		temp.setStyle('fontWeight', 'bold');
		temp.setStyle('color', 2697513);
		temp.setStyle('verticalAlign', 'middle');
		temp.id = 'titleDisplay';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		titleDisplay = temp;
		mx.binding.BindingManager.executeBindings(this, 'titleDisplay', titleDisplay);
		return temp;
	}

	private function _ResizableTitleWindowSkin_Group5_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.bottom = 0;
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.id = 'moveArea';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		moveArea = temp;
		mx.binding.BindingManager.executeBindings(this, 'moveArea', moveArea);
		return temp;
	}

	private function _ResizableTitleWindowSkin_Button1_i():spark.components.Button {
		var temp:spark.components.Button = new spark.components.Button();
		temp.height = 27;
		temp.width = 27;
		temp.right = 0;
		temp.setStyle('skinClass', elements.skins.MoonshineTitleWindowCloseButtonSkin);
		temp.id = 'closeButton';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		closeButton = temp;
		mx.binding.BindingManager.executeBindings(this, 'closeButton', closeButton);
		return temp;
	}

	private function _ResizableTitleWindowSkin_Group6_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.percentHeight = 100.0;
		temp.minHeight = 0;
		temp.minWidth = 0;
		temp.percentWidth = 100.0;
		temp.id = 'contentGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		contentGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'contentGroup', contentGroup);
		return temp;
	}

	private function _ResizableTitleWindowSkin_Group7_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.minHeight = 0;
		temp.minWidth = 0;
		temp.bottom = 0;
		temp.mxmlContent = [_ResizableTitleWindowSkin_Group8_i(), _ResizableTitleWindowSkin_Group9_i()];
		temp.id = 'bottomGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		bottomGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'bottomGroup', bottomGroup);
		return temp;
	}

	private function _ResizableTitleWindowSkin_Group8_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.bottom = 0;
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.filters = [_ResizableTitleWindowSkin_DropShadowFilter1_c()];
		temp.mxmlContent = [_ResizableTitleWindowSkin_Rect3_c(), _ResizableTitleWindowSkin_Rect4_c()];
		temp.id = '_ResizableTitleWindowSkin_Group8';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		_ResizableTitleWindowSkin_Group8 = temp;
		mx.binding.BindingManager.executeBindings(this, '_ResizableTitleWindowSkin_Group8', _ResizableTitleWindowSkin_Group8);
		return temp;
	}

	private function _ResizableTitleWindowSkin_DropShadowFilter1_c():spark.filters.DropShadowFilter {
		var temp:spark.filters.DropShadowFilter = new spark.filters.DropShadowFilter();
		temp.alpha = 0.5;
		temp.angle = 90;
		temp.blurX = 0;
		temp.blurY = 7;
		temp.strength = 1;
		temp.distance = 1;
		temp.inner = true;
		return temp;
	}

	private function _ResizableTitleWindowSkin_Rect3_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.height = 1;
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.fill = _ResizableTitleWindowSkin_SolidColor4_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _ResizableTitleWindowSkin_SolidColor4_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 3158064;
		return temp;
	}

	private function _ResizableTitleWindowSkin_Rect4_c():spark.primitives.Rect {
		var temp:spark.primitives.Rect = new spark.primitives.Rect();
		temp.bottom = 0;
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.fill = _ResizableTitleWindowSkin_SolidColor5_c();
		temp.initialized(this, null);
		return temp;
	}

	private function _ResizableTitleWindowSkin_SolidColor5_c():mx.graphics.SolidColor {
		var temp:mx.graphics.SolidColor = new mx.graphics.SolidColor();
		temp.color = 4473924;
		return temp;
	}

	private function _ResizableTitleWindowSkin_Group9_i():spark.components.Group {
		var temp:spark.components.Group = new spark.components.Group();
		temp.minHeight = 41;
		temp.minWidth = 0;
		temp.bottom = 0;
		temp.left = 0;
		temp.right = 0;
		temp.top = 0;
		temp.layout = _ResizableTitleWindowSkin_HorizontalLayout1_c();
		temp.id = 'controlBarGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		controlBarGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'controlBarGroup', controlBarGroup);
		return temp;
	}

	private function _ResizableTitleWindowSkin_HorizontalLayout1_c():spark.layouts.HorizontalLayout {
		var temp:spark.layouts.HorizontalLayout = new spark.layouts.HorizontalLayout();
		temp.paddingBottom = 7;
		temp.paddingLeft = 10;
		temp.paddingRight = 10;
		temp.paddingTop = 7;
		temp.gap = 10;
		temp.verticalAlign = 'middle';
		temp.horizontalAlign = 'right';
		return temp;
	}

	private function _ResizableTitleWindowSkin_ResizeHandleLines1_i():components.skins.ResizeHandleLines {
		var temp:components.skins.ResizeHandleLines = new components.skins.ResizeHandleLines();
		temp.bottom = 1;
		temp.right = 1;
		temp.id = 'resizeHandle';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		resizeHandle = temp;
		mx.binding.BindingManager.executeBindings(this, 'resizeHandle', resizeHandle);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ResizableTitleWindowSkin_SparkSkin1_creationComplete(event:mx.events.FlexEvent):Void {
		created(event);
	}

	//  binding mgmt
	private function _ResizableTitleWindowSkin_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				null,
				null,
				'topGroup.mask', 'topGroupMask');

		result[1] = new mx.binding.Binding(this,
				null,
				null,
				'_ResizableTitleWindowSkin_Group8.mask', 'bottomGroupMask');

		result[2] = new mx.binding.Binding(this,
				function():Bool {
					return (resizeManager.enabled);
				},
				null,
				'resizeHandle.enabled');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (resizeManager.enabled);
				},
				null,
				'resizeHandle.visible');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(ResizableTitleWindowSkin)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def