/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.skins
 *  Class:      ResizableScrollerSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/skins/ResizableScrollerSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:47 MSK
 */

package components.skins;

import actionScripts.ui.resizableControls.ResizeManager;
import mx.core.UIComponent;
import mx.events.FlexEvent;
import spark.components.supportClasses.Skin;

import components.skins.ResizableHScrollBar;
import components.skins.ResizableVScrollBar;
import components.skins.ResizeHandleLines;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.Mx_internal;

import mx.filters.*;
import mx.styles.*;
import spark.skins.SparkSkin;

/**
 * @copy spark.skins.spark.ApplicationSkin#hostComponent
 */
@:meta(HostComponent(name = 'spark.components.Scroller'))
//  begin class def
class ResizableScrollerSkin extends spark.skins.SparkSkin implements mx.binding.IBindingClient {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var horizontalScrollBar:components.skins.ResizableHScrollBar;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var resizeHandle:components.skins.ResizeHandleLines;

	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var verticalScrollBar:components.skins.ResizableVScrollBar;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		var bindings:Array<Dynamic> = _ResizableScrollerSkin_bindingsSetup();
		var watchers:Array<Dynamic> = [];

		var target:Dynamic = this;

		if (_watcherSetupUtil == null) {
			var watcherSetupUtilClass:Dynamic = Type.resolveClass('_components_skins_ResizableScrollerSkinWatcherSetupUtil');
			Reflect.field(watcherSetupUtilClass, 'init')(null);
		}

		_watcherSetupUtil.setup(this,
				function(propertyName:String):Dynamic {
					return Reflect.field(target, propertyName);
				},
				function(propertyName:String):Dynamic {
					return Reflect.getProperty(ResizableScrollerSkin, propertyName);
				},
				bindings,
				watchers
		);

		// mx_internal::_bindings =  //  mx_internal::_bindings.concat(bindings);
		// mx_internal::_watchers =  //  mx_internal::_watchers.concat(watchers);

		// layer initializers

		// properties
		this.mxmlContent = [_ResizableScrollerSkin_ResizableVScrollBar1_i(), _ResizableScrollerSkin_ResizableHScrollBar1_i(), _ResizableScrollerSkin_ResizeHandleLines1_i()];

		// events
		this.addEventListener('creationComplete', ___ResizableScrollerSkin_SparkSkin1_creationComplete);

		for (i in 0...bindings.length) {
			AS3.as(bindings[i], Binding).execute();
		}

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 51 - 106

	/**
	 *  @private
	 */
	override public function beginHighlightBitmapCapture():Bool {
		var needUpdate:Bool = AS3.as(super.beginHighlightBitmapCapture(), Bool);

		// Draw an opaque rect that fill our entire skin. Our background
		// is transparent, but we don't want focus/error skins to
		// poke through.  This is safe to do since we don't have any
		// graphic elements as direct children.
		graphics.beginFill(0);
		graphics.drawRect(0, 0, width, height);
		graphics.endFill();

		return needUpdate;
	}

	/**
	 *  @private
	 */
	override public function endHighlightBitmapCapture():Bool {
		var needUpdate:Bool = AS3.as(super.endHighlightBitmapCapture(), Bool);

		// Clear the rect we drew in beginBitmapCapture();
		graphics.clear();

		return needUpdate;
	}

	override private function updateDisplayList(w:Float, h:Float):Void {
		super.updateDisplayList(w, h);
		resizeHandle.x = w - resizeHandle.width - 1;
		resizeHandle.y = h - resizeHandle.height - 1;
	}

	@:meta(Bindable())
	public var resizeManager:ResizeManager;

	private function created(event:FlexEvent):Void {
		// the component being resized is assumed to be the parent of the scroller
		// since most scrollers set left/right/top/bottom=0
		var resizeComponent:UIComponent = (AS3.as(hostComponent.parent, UIComponent));
		// Sometimes the parent is actually a skin, in which case we need to resize the host component, not the skin
		if (Std.is(resizeComponent, Skin)) {
			resizeComponent = (AS3.as(Reflect.getProperty(resizeComponent, 'hostComponent'), UIComponent));
		}
		resizeManager = new ResizeManager(resizeComponent, resizeHandle);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _ResizableScrollerSkin_ResizableVScrollBar1_i():components.skins.ResizableVScrollBar {
		var temp:components.skins.ResizableVScrollBar = new components.skins.ResizableVScrollBar();
		temp.visible = false;
		temp.id = 'verticalScrollBar';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		verticalScrollBar = temp;
		mx.binding.BindingManager.executeBindings(this, 'verticalScrollBar', verticalScrollBar);
		return temp;
	}

	private function _ResizableScrollerSkin_ResizableHScrollBar1_i():components.skins.ResizableHScrollBar {
		var temp:components.skins.ResizableHScrollBar = new components.skins.ResizableHScrollBar();
		temp.visible = false;
		temp.id = 'horizontalScrollBar';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		horizontalScrollBar = temp;
		mx.binding.BindingManager.executeBindings(this, 'horizontalScrollBar', horizontalScrollBar);
		return temp;
	}

	private function _ResizableScrollerSkin_ResizeHandleLines1_i():components.skins.ResizeHandleLines {
		var temp:components.skins.ResizeHandleLines = new components.skins.ResizeHandleLines();
		temp.id = 'resizeHandle';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		resizeHandle = temp;
		mx.binding.BindingManager.executeBindings(this, 'resizeHandle', resizeHandle);
		return temp;
	}

	/**
	 * @private
	 **/
	public function ___ResizableScrollerSkin_SparkSkin1_creationComplete(event:mx.events.FlexEvent):Void {
		created(event);
	}

	//  binding mgmt
	private function _ResizableScrollerSkin_bindingsSetup():Array<Dynamic> {
		var result:Array<Dynamic> = [];

		result[0] = new mx.binding.Binding(this,
				function():Bool {
					return (resizeManager.enabled);
				},
				null,
				'resizeHandle.enabled');

		result[1] = new mx.binding.Binding(this,
				function():Float {
					return (Math.max(12, horizontalScrollBar.height - 2));
				},
				null,
				'resizeHandle.height');

		result[2] = new mx.binding.Binding(this,
				function():Float {
					return (Math.max(12, verticalScrollBar.width - 2));
				},
				null,
				'resizeHandle.width');

		result[3] = new mx.binding.Binding(this,
				function():Bool {
					return (resizeManager.enabled);
				},
				null,
				'resizeHandle.visible');

		return result;
	}

	/**
	 * @private
	 **/
	public static var watcherSetupUtil(never, set):IWatcherSetupUtil2;
	private static function set_watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):IWatcherSetupUtil2 {
		(ResizableScrollerSkin)._watcherSetupUtil = watcherSetupUtil;
		return watcherSetupUtil;
	}

	private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//  embed carrier vars
	//  end embed carrier vars

	//  binding management vars
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindings:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _watchers:Array<Dynamic> = [];
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsByDestination:Dynamic = {};
	/**
	 * @private
	 **/
	@:ns('mx_internal') private var _bindingsBeginWithWord:Dynamic = {};

}

//  end package def