/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    components.skins
 *  Class:      EditorTabBarSkin
 *  Source:     /Users/axgord/dev/Moonshine-IDE/ide/MoonshineSharedCore/src/components/skins/EditorTabBarSkin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2019.04.22 23:25:48 MSK
 */

package components.skins;

import mx.core.UIComponent;

import components.skins.EditorTabBarSkinInnerClass0;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.Mx_internal;
import mx.filters.*;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.DataGroup;
import spark.components.supportClasses.ButtonBarHorizontalLayout;
import spark.components.supportClasses.Skin;

/**
 * @copy spark.skins.spark.ApplicationSkin#hostComponent
 */
@:meta(HostComponent(name = 'spark.components.TabBar'))
@:meta(States(name = 'normal', name = 'disabled'))
//  begin class def
class EditorTabBarSkin extends spark.components.supportClasses.Skin implements mx.core.IStateClient2 {

	//  instance variables
	@:meta(Bindable())
	/**
	 * @private
	 **/
	public var dataGroup:spark.components.DataGroup;

	//  type-import dummies

	//  constructor (Flex display object)
	/**
	 * @private
	 **/
	public function new() {
		super();

		// mx_internal::_document = this;

		// layer initializers

		// properties
		this.mxmlContent = [_EditorTabBarSkin_DataGroup1_i()];
		this.currentState = 'normal';

		// events

		states = [
				new State({
					'name': 'normal',
					'overrides': []
				}),
				new State({
					'name': 'disabled',
					'overrides': [
					new mx.states.SetProperty().initializeFromObject({
								'name': 'alpha',
								'value': 0.5
							})
			]
				})
		];

	}

	/**
	 * @private
	 **/
	private var __moduleFactoryInitialized:Bool = false;

	/**
	 * @private
	 * Override the module factory so we can defer setting style declarations
	 * until a module factory is set. Without the correct module factory set
	 * the style declaration will end up in the wrong style manager.
	 **/
	override private function set_moduleFactory(factory:IFlexModuleFactory):IFlexModuleFactory {
		super.moduleFactory = factory;

		if (__moduleFactoryInitialized) {
			return factory;
		}

		__moduleFactoryInitialized = true;

		// our style settings

		return factory;
	}

	//  initialize()
	/**
	 * @private
	 **/
	override public function initialize():Void {
		super.initialize();
	}

	//  scripts
	//  <Script>, line 18 - 40

	/**
	 *  @private
	 *  Push the cornerRadius style to the item renderers.
	 */
	override private function updateDisplayList(unscaledWidth:Float, unscaleHeight:Float):Void {
		var numElements:Int = AS3.int(dataGroup.numElements);
		var cornerRadius:Int = AS3.int(hostComponent.getStyle('cornerRadius'));
		for (i in 0...numElements) {
			var elt:UIComponent = AS3.as(dataGroup.getElementAt(i), UIComponent);
			if (elt != null) {
				elt.setStyle('cornerRadius', cornerRadius);
			}
		}

		super.updateDisplayList(unscaledWidth, unscaledHeight);
	}

	//  end scripts

	//  supporting function definitions for properties, events, styles, effects
	private function _EditorTabBarSkin_DataGroup1_i():spark.components.DataGroup {
		var temp:spark.components.DataGroup = new spark.components.DataGroup();
		temp.percentWidth = 100.0;
		temp.percentHeight = 100.0;
		temp.layout = _EditorTabBarSkin_ButtonBarHorizontalLayout1_c();
		temp.itemRenderer = _EditorTabBarSkin_ClassFactory1_c();
		temp.id = 'dataGroup';
		if (!AS3.as(temp.document, Bool)) {
			temp.document = this;
		}
		dataGroup = temp;
		mx.binding.BindingManager.executeBindings(this, 'dataGroup', dataGroup);
		return temp;
	}

	private function _EditorTabBarSkin_ButtonBarHorizontalLayout1_c():spark.components.supportClasses.ButtonBarHorizontalLayout {
		var temp:spark.components.supportClasses.ButtonBarHorizontalLayout = new spark.components.supportClasses.ButtonBarHorizontalLayout();
		temp.gap = -1;
		return temp;
	}

	private function _EditorTabBarSkin_ClassFactory1_c():mx.core.ClassFactory {
		var temp:mx.core.ClassFactory = new mx.core.ClassFactory();
		temp.generator = components.skins.EditorTabBarSkinInnerClass0;
		temp.properties = {
					'outerDocument': this
				};
		return temp;
	}

}

//  end package def